{"version":3,"file":"converter.js","sourceRoot":"","sources":["../../src/test/converter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Application, resetReflectionID, normalizePath, ProjectReflection } from '..';\r\nimport * as FS from 'fs';\r\nimport * as Path from 'path';\r\nimport Assert = require('assert');\r\n\r\nfunction compareReflections(fixture, spec, path?: string) {\r\n    path = (path ? path + '/' : '') + spec.name;\r\n    Assert.deepEqual(fixture, spec);\r\n\r\n    for (let key in spec) {\r\n        if (!spec.hasOwnProperty(key)) {\r\n            continue;\r\n        }\r\n        Assert(fixture.hasOwnProperty(key), path + ': Missing property \"' + key + '\"');\r\n    }\r\n\r\n    for (let key in fixture) {\r\n        if (!fixture.hasOwnProperty(key) || typeof fixture[key] === 'undefined') {\r\n            continue;\r\n        }\r\n        Assert(spec.hasOwnProperty(key), path + ': Unknown property \"' + key + '\"');\r\n\r\n        const a = fixture[key];\r\n        const b = spec[key];\r\n        Assert(a instanceof Object === b instanceof Object, path + ': Property \"' + key + '\" type mismatch');\r\n\r\n        if (a instanceof Object) {\r\n            switch (key) {\r\n                case 'signatures':\r\n                case 'typeParameters':\r\n                case 'children':\r\n                    compareChildren(a, b, path);\r\n                    break;\r\n                case 'indexSignature':\r\n                case 'getSignature':\r\n                case 'setSignature':\r\n                    compareReflections(a, b, path);\r\n                    break;\r\n                default:\r\n                    Assert.deepEqual(a, b, path + ': Property \"' + key + '\" value mismatch');\r\n            }\r\n        } else {\r\n            Assert(a === b, path + ': Property \"' + key + '\" value mismatch');\r\n        }\r\n    }\r\n}\r\n\r\nfunction compareChildren(fixture, spec, path) {\r\n    const a = fixture.map(function(child) { return child.id; });\r\n    const b = spec.map(function(child) { return child.id; });\r\n\r\n    Assert(a.length === b.length, path + ': Number of children differs');\r\n    Assert(a.every(function(u, i) { return u === b[i]; }), path + ': Children are different');\r\n\r\n    fixture.forEach(function(a, index) {\r\n        compareReflections(a, spec[index], path);\r\n    });\r\n}\r\n\r\ndescribe('Converter', function() {\r\n    const base = Path.join(__dirname, 'converter');\r\n    let app: Application;\r\n\r\n    it('constructs', function() {\r\n        app = new Application({\r\n            mode:   'Modules',\r\n            logger: 'none',\r\n            target: 'ES5',\r\n            module: 'CommonJS',\r\n            experimentalDecorators: true,\r\n            jsx: 'react'\r\n        });\r\n    });\r\n\r\n    FS.readdirSync(base).forEach(function (directory) {\r\n        const path = Path.join(base, directory);\r\n        if (!FS.lstatSync(path).isDirectory()) {\r\n            return;\r\n        }\r\n\r\n        describe(directory, function() {\r\n            let result: ProjectReflection;\r\n\r\n            it('converts fixtures', function() {\r\n                resetReflectionID();\r\n                result = app.convert(app.expandInputFiles([path]));\r\n                Assert(result instanceof ProjectReflection, 'No reflection returned');\r\n            });\r\n\r\n            it('matches specs', function() {\r\n                const specs = JSON.parse(FS.readFileSync(Path.join(path, 'specs.json')).toString());\r\n                let data = JSON.stringify(result.toObject(), null, '  ');\r\n                data = data.split(normalizePath(base)).join('%BASE%');\r\n\r\n                compareReflections(JSON.parse(data), specs);\r\n            });\r\n        });\r\n    });\r\n});\r\n"]}