{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/type-parameter.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,uCAAuE;AAGvE;IAA6C,2CAAU;IAQnD,iCAAY,MAAmB,EAAE,IAAwB;QAAzD,YACI,kBAAM,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,yBAAc,CAAC,aAAa,CAAC,SAEzD;QADG,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;;IAChC,CAAC;IAKD,0CAAQ,GAAR;QACI,IAAM,MAAM,GAAG,iBAAM,QAAQ,WAAE,CAAC;QAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IACL,8BAAC;AAAD,CAAC,AAzBD,CAA6C,qBAAU,GAyBtD;AAzBY,0DAAuB","sourcesContent":["import { Type, TypeParameterType } from '../types/index';\r\nimport { Reflection, ReflectionKind, TypeContainer } from './abstract';\r\nimport { DeclarationReflection } from './declaration';\r\n\r\nexport class TypeParameterReflection extends Reflection implements TypeContainer {\r\n    parent: DeclarationReflection;\r\n\r\n    type: Type;\r\n\r\n    /**\r\n     * Create a new TypeParameterReflection instance.\r\n     */\r\n    constructor(parent?: Reflection, type?: TypeParameterType) {\r\n        super(parent, type.name, ReflectionKind.TypeParameter);\r\n        this.type = type.constraint;\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this reflection.\r\n     */\r\n    toObject(): any {\r\n        const result = super.toObject();\r\n\r\n        if (this.type) {\r\n            result.type = this.type.toObject();\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]}