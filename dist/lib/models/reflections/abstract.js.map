{"version":3,"file":"abstract.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/abstract.ts"],"names":[],"mappings":"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","sourcesContent":["import { SourceReference } from '../sources/file';\r\nimport { Type } from '../types/index';\r\nimport { Comment } from '../comments/comment';\r\nimport { TypeParameterReflection } from './type-parameter';\r\n\r\n/**\r\n * Holds all data models used by TypeDoc.\r\n *\r\n * The [[BaseReflection]] is base class of all reflection models. The subclass [[ProjectReflection]]\r\n * serves as the root container for the current project while [[DeclarationReflection]] instances\r\n * form the structure of the project. Most of the other classes in this namespace are referenced by this\r\n * two base classes.\r\n *\r\n * The models [[NavigationItem]] and [[UrlMapping]] are special as they are only used by the [[Renderer]]\r\n * while creating the final output.\r\n */\r\n\r\n/**\r\n * Current reflection id.\r\n */\r\nlet REFLECTION_ID = 0;\r\n\r\n/**\r\n * Reset the reflection id.\r\n *\r\n * Used by the test cases to ensure the reflection ids won't change between runs.\r\n */\r\nexport function resetReflectionID() {\r\n    REFLECTION_ID = 0;\r\n}\r\n\r\n/**\r\n * Defines the available reflection kinds.\r\n */\r\nexport enum ReflectionKind {\r\n    Global = 0,\r\n    ExternalModule = 1,\r\n    Module = 2,\r\n    Enum = 4,\r\n    EnumMember = 16,\r\n    Variable = 32,\r\n    Function = 64,\r\n    Class = 128,\r\n    Interface = 256,\r\n    Constructor = 512,\r\n    Property = 1024,\r\n    Method = 2048,\r\n    CallSignature = 4096,\r\n    IndexSignature = 8192,\r\n    ConstructorSignature = 16384,\r\n    Parameter = 32768,\r\n    TypeLiteral = 65536,\r\n    TypeParameter = 131072,\r\n    Accessor = 262144,\r\n    GetSignature = 524288,\r\n    SetSignature = 1048576,\r\n    ObjectLiteral = 2097152,\r\n    TypeAlias = 4194304,\r\n    Event = 8388608,\r\n\r\n    ClassOrInterface = Class | Interface,\r\n    VariableOrProperty = Variable | Property,\r\n    FunctionOrMethod = Function | Method,\r\n    SomeSignature = CallSignature | IndexSignature | ConstructorSignature | GetSignature | SetSignature,\r\n    SomeModule = Module | ExternalModule\r\n}\r\n\r\nexport enum ReflectionFlag {\r\n    Private = 1,\r\n    Protected = 2,\r\n    Public = 4,\r\n    Static = 8,\r\n    Exported = 16,\r\n    ExportAssignment = 32,\r\n    External = 64,\r\n    Optional = 128,\r\n    DefaultValue = 256,\r\n    Rest = 512,\r\n    ConstructorProperty = 1024,\r\n    Abstract = 2048,\r\n    Const = 4096,\r\n    Let = 8192\r\n}\r\n\r\nconst relevantFlags: ReflectionFlag[] = [\r\n    ReflectionFlag.Private,\r\n    ReflectionFlag.Protected,\r\n    ReflectionFlag.Static,\r\n    ReflectionFlag.ExportAssignment,\r\n    ReflectionFlag.Optional,\r\n    ReflectionFlag.DefaultValue,\r\n    ReflectionFlag.Rest,\r\n    ReflectionFlag.Abstract,\r\n    ReflectionFlag.Let,\r\n    ReflectionFlag.Const\r\n];\r\n\r\nexport interface ReflectionFlags extends Array<string> {\r\n    flags?: ReflectionFlag;\r\n\r\n    /**\r\n     * Is this a private member?\r\n     */\r\n    isPrivate?: boolean;\r\n\r\n    /**\r\n     * Is this a protected member?\r\n     */\r\n    isProtected?: boolean;\r\n\r\n    /**\r\n     * Is this a public member?\r\n     */\r\n    isPublic?: boolean;\r\n\r\n    /**\r\n     * Is this a static member?\r\n     */\r\n    isStatic?: boolean;\r\n\r\n    /**\r\n     * Is this member exported?\r\n     */\r\n    isExported?: boolean;\r\n\r\n    /**\r\n     * Is this a declaration from an external document?\r\n     */\r\n    isExternal?: boolean;\r\n\r\n    /**\r\n     * Whether this reflection is an optional component or not.\r\n     *\r\n     * Applies to function parameters and object members.\r\n     */\r\n    isOptional?: boolean;\r\n\r\n    /**\r\n     * Whether it's a rest parameter, like `foo(...params);`.\r\n     */\r\n    isRest?: boolean;\r\n\r\n    /**\r\n     *\r\n     */\r\n    hasExportAssignment?: boolean;\r\n\r\n    isConstructorProperty?: boolean;\r\n\r\n    isAbstract?: boolean;\r\n\r\n    isConst?: boolean;\r\n\r\n    isLet?: boolean;\r\n}\r\n\r\nexport interface DefaultValueContainer extends Reflection {\r\n    defaultValue: string;\r\n}\r\n\r\nexport interface TypeContainer extends Reflection {\r\n    type: Type;\r\n}\r\n\r\nexport interface TypeParameterContainer extends Reflection {\r\n    typeParameters: TypeParameterReflection[];\r\n}\r\n\r\nexport enum TraverseProperty {\r\n    Children,\r\n    Parameters,\r\n    TypeLiteral,\r\n    TypeParameter,\r\n    Signatures,\r\n    IndexSignature,\r\n    GetSignature,\r\n    SetSignature\r\n}\r\n\r\nexport interface TraverseCallback {\r\n    (reflection: Reflection, property: TraverseProperty): void;\r\n}\r\n\r\n/**\r\n * Defines the usage of a decorator.\r\n */\r\nexport interface Decorator {\r\n    /**\r\n     * The name of the decorator being applied.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The type declaring the decorator.\r\n     * Usually a ReferenceType instance pointing to the decorator function.\r\n     */\r\n    type?: Type;\r\n\r\n    /**\r\n     * A named map of arguments the decorator is applied with.\r\n     */\r\n    arguments?: any;\r\n}\r\n\r\n/**\r\n * Base class for all reflection classes.\r\n *\r\n * While generating a documentation, TypeDoc generates an instance of [[ProjectReflection]]\r\n * as the root for all reflections within the project. All other reflections are represented\r\n * by the [[DeclarationReflection]] class.\r\n *\r\n * This base class exposes the basic properties one may use to traverse the reflection tree.\r\n * You can use the [[children]] and [[parent]] properties to walk the tree. The [[groups]] property\r\n * contains a list of all children grouped and sorted for being rendered.\r\n */\r\nexport abstract class Reflection {\r\n    /**\r\n     * Unique id of this reflection.\r\n     */\r\n    id: number;\r\n\r\n    /**\r\n     * The symbol name of this reflection.\r\n     */\r\n    name = '';\r\n\r\n    /**\r\n     * The original name of the TypeScript declaration.\r\n     */\r\n    originalName: string;\r\n\r\n    /**\r\n     * The kind of this reflection.\r\n     */\r\n    kind: ReflectionKind;\r\n\r\n    /**\r\n     * The human readable string representation of the kind of this reflection.\r\n     */\r\n    kindString: string;\r\n\r\n    flags: ReflectionFlags = [];\r\n\r\n    /**\r\n     * The reflection this reflection is a child of.\r\n     */\r\n    parent: Reflection;\r\n\r\n    /**\r\n     * The parsed documentation comment attached to this reflection.\r\n     */\r\n    comment: Comment;\r\n\r\n    /**\r\n     * A list of all source files that contributed to this reflection.\r\n     */\r\n    sources: SourceReference[];\r\n\r\n    /**\r\n     * A list of all decorators attached to this reflection.\r\n     */\r\n    decorators: Decorator[];\r\n\r\n    /**\r\n     * A list of all types that are decorated by this reflection.\r\n     */\r\n    decorates: Type[];\r\n\r\n    /**\r\n     * The url of this reflection in the generated documentation.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * The name of the anchor of this child.\r\n     */\r\n    anchor: string;\r\n\r\n    /**\r\n     * Is the url pointing to an individual document?\r\n     *\r\n     * When FALSE, the url points to an anchor tag on a page of a different reflection.\r\n     */\r\n    hasOwnDocument: boolean;\r\n\r\n    /**\r\n     * A list of generated css classes that should be applied to representations of this\r\n     * reflection in the generated markup.\r\n     */\r\n    cssClasses: string;\r\n\r\n    /**\r\n     * Url safe alias for this reflection.\r\n     *\r\n     * @see [[BaseReflection.getAlias]]\r\n     */\r\n    private _alias: string;\r\n\r\n    private _aliases: string[];\r\n\r\n    /**\r\n     * Create a new BaseReflection instance.\r\n     */\r\n    constructor(parent?: Reflection, name?: string, kind?: ReflectionKind) {\r\n        this.id     = REFLECTION_ID++;\r\n        this.parent = parent;\r\n        this.name   = name;\r\n        this.originalName = name;\r\n        this.kind   = kind;\r\n    }\r\n\r\n    /**\r\n     * @param kind  The kind to test for.\r\n     */\r\n    kindOf(kind: ReflectionKind): boolean;\r\n\r\n    /**\r\n     * @param kind  An array of kinds to test for.\r\n     */\r\n    kindOf(kind: ReflectionKind[]): boolean;\r\n\r\n    /**\r\n     * Test whether this reflection is of the given kind.\r\n     */\r\n    kindOf(kind: any): boolean {\r\n        if (Array.isArray(kind)) {\r\n            for (let i = 0, c = kind.length; i < c; i++) {\r\n                if ((this.kind & kind[i]) !== 0) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        } else {\r\n            return (this.kind & kind) !== 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the full name of this reflection.\r\n     *\r\n     * The full name contains the name of this reflection and the names of all parent reflections.\r\n     *\r\n     * @param separator  Separator used to join the names of the reflections.\r\n     * @returns The full name of this reflection.\r\n     */\r\n    getFullName(separator: string = '.'): string {\r\n        if (this.parent && !this.parent.isProject()) {\r\n            return this.parent.getFullName(separator) + separator + this.name;\r\n        } else {\r\n            return this.name;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a flag on this reflection.\r\n     */\r\n    setFlag(flag: ReflectionFlag, value: boolean = true) {\r\n        let name: string, index: number;\r\n        if (relevantFlags.indexOf(flag) !== -1) {\r\n            name = ReflectionFlag[flag];\r\n            name = name.replace(/(.)([A-Z])/g, (m, a, b) => a + ' ' + b.toLowerCase());\r\n            index = this.flags.indexOf(name);\r\n        }\r\n\r\n        if (value) {\r\n            this.flags.flags |= flag;\r\n            if (name && index === -1) {\r\n                this.flags.push(name);\r\n            }\r\n        } else {\r\n            this.flags.flags &= ~flag;\r\n            if (name && index !== -1) {\r\n                this.flags.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        switch (flag) {\r\n            case ReflectionFlag.Private:\r\n                this.flags.isPrivate = value;\r\n                if (value) {\r\n                    this.setFlag(ReflectionFlag.Protected, false);\r\n                    this.setFlag(ReflectionFlag.Public, false);\r\n                }\r\n                break;\r\n            case ReflectionFlag.Protected:\r\n                this.flags.isProtected = value;\r\n                if (value) {\r\n                    this.setFlag(ReflectionFlag.Private, false);\r\n                    this.setFlag(ReflectionFlag.Public, false);\r\n                }\r\n                break;\r\n            case ReflectionFlag.Public:\r\n                this.flags.isPublic = value;\r\n                if (value) {\r\n                    this.setFlag(ReflectionFlag.Private, false);\r\n                    this.setFlag(ReflectionFlag.Protected, false);\r\n                }\r\n                break;\r\n            case ReflectionFlag.Static:\r\n                this.flags.isStatic = value;\r\n                break;\r\n            case ReflectionFlag.Exported:\r\n                this.flags.isExported = value;\r\n                break;\r\n            case ReflectionFlag.External:\r\n                this.flags.isExternal = value;\r\n                break;\r\n            case ReflectionFlag.Optional:\r\n                this.flags.isOptional = value;\r\n                break;\r\n            case ReflectionFlag.Rest:\r\n                this.flags.isRest = value;\r\n                break;\r\n            case ReflectionFlag.ExportAssignment:\r\n                this.flags.hasExportAssignment = value;\r\n                break;\r\n            case ReflectionFlag.ConstructorProperty:\r\n                this.flags.isConstructorProperty = value;\r\n                break;\r\n            case ReflectionFlag.Abstract:\r\n                this.flags.isAbstract = value;\r\n                break;\r\n            case ReflectionFlag.Let:\r\n                this.flags.isLet = value;\r\n                break;\r\n            case ReflectionFlag.Const:\r\n                this.flags.isConst = value;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return an url safe alias for this reflection.\r\n     */\r\n    getAlias(): string {\r\n        if (!this._alias) {\r\n            let alias = this.name.replace(/[^a-z0-9]/gi, '_').toLowerCase();\r\n            if (alias === '') {\r\n                alias = 'reflection-' + this.id;\r\n            }\r\n\r\n            let target = <Reflection> this;\r\n            while (target.parent && !target.parent.isProject() && !target.hasOwnDocument) {\r\n                target = target.parent;\r\n            }\r\n\r\n            if (!target._aliases) {\r\n                target._aliases = [];\r\n            }\r\n            let suffix = '', index = 0;\r\n            while (target._aliases.indexOf(alias + suffix) !== -1) {\r\n                suffix = '-' + (++index).toString();\r\n            }\r\n\r\n            alias += suffix;\r\n            target._aliases.push(alias);\r\n            this._alias = alias;\r\n        }\r\n\r\n        return this._alias;\r\n    }\r\n\r\n    /**\r\n     * Has this reflection a visible comment?\r\n     *\r\n     * @returns TRUE when this reflection has a visible comment.\r\n     */\r\n    hasComment(): boolean {\r\n        return <boolean> (this.comment && this.comment.hasVisibleComponent());\r\n    }\r\n\r\n    hasGetterOrSetter(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param name  The name of the child to look for. Might contain a hierarchy.\r\n     */\r\n    getChildByName(name: string): Reflection;\r\n\r\n    /**\r\n     * @param names  The name hierarchy of the child to look for.\r\n     */\r\n    getChildByName(names: string[]): Reflection;\r\n\r\n    /**\r\n     * Return a child by its name.\r\n     *\r\n     * @returns The found child or NULL.\r\n     */\r\n    getChildByName(arg: any): Reflection {\r\n        const names: string[] = Array.isArray(arg) ? arg : arg.split('.');\r\n        const name = names[0];\r\n        let result: Reflection = null;\r\n\r\n        this.traverse((child) => {\r\n            if (child.name === name) {\r\n                if (names.length <= 1) {\r\n                    result = child;\r\n                } else if (child) {\r\n                    result = child.getChildByName(names.slice(1));\r\n                }\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return whether this reflection is the root / project reflection.\r\n     */\r\n    isProject(): boolean { // this is ProjectReflection\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param name  The name to look for. Might contain a hierarchy.\r\n     */\r\n    findReflectionByName(name: string): Reflection;\r\n\r\n    /**\r\n     * @param names  The name hierarchy to look for.\r\n     */\r\n    findReflectionByName(names: string[]): Reflection;\r\n\r\n    /**\r\n     * Try to find a reflection by its name.\r\n     *\r\n     * @return The found reflection or null.\r\n     */\r\n    findReflectionByName(arg: any): Reflection {\r\n        const names: string[] = Array.isArray(arg) ? arg : arg.split('.');\r\n\r\n        const reflection = this.getChildByName(names);\r\n        if (reflection) {\r\n            return reflection;\r\n        } else {\r\n            return this.parent.findReflectionByName(names);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Traverse all potential child reflections of this reflection.\r\n     *\r\n     * The given callback will be invoked for all children, signatures and type parameters\r\n     * attached to this reflection.\r\n     *\r\n     * @param callback  The callback function that should be applied for each child reflection.\r\n     */\r\n    traverse(callback: TraverseCallback) { }\r\n\r\n    /**\r\n     * Return a raw object representation of this reflection.\r\n     */\r\n    toObject(): any {\r\n        const result: any = {\r\n            id:         this.id,\r\n            name:       this.name,\r\n            kind:       this.kind,\r\n            kindString: this.kindString,\r\n            flags:      {}\r\n        };\r\n\r\n        if (this.originalName !== this.name) {\r\n            result.originalName = this.originalName;\r\n        }\r\n\r\n        if (this.comment) {\r\n            result.comment = this.comment.toObject();\r\n        }\r\n\r\n        for (let key in this.flags) {\r\n            // tslint:disable-next-line:triple-equals\r\n            if (parseInt(key, 10) == <any> key || key === 'flags') {\r\n                continue;\r\n            }\r\n            if (this.flags[key]) {\r\n                result.flags[key] = true;\r\n            }\r\n        }\r\n\r\n        if (this.decorates) {\r\n            result.decorates = this.decorates.map((type) => type.toObject());\r\n        }\r\n\r\n        if (this.decorators) {\r\n            result.decorators = this.decorators.map((decorator) => {\r\n                const result: any = { name: decorator.name };\r\n                if (decorator.type) {\r\n                    result.type = decorator.type.toObject();\r\n                }\r\n                if (decorator.arguments) {\r\n                    result.arguments = decorator.arguments;\r\n                }\r\n                return result;\r\n            });\r\n        }\r\n\r\n        this.traverse((child, property) => {\r\n            if (property === TraverseProperty.TypeLiteral) {\r\n                return;\r\n            }\r\n            let name = TraverseProperty[property];\r\n            name = name.substr(0, 1).toLowerCase() + name.substr(1);\r\n            if (!result[name]) {\r\n                result[name] = [];\r\n            }\r\n            result[name].push(child.toObject());\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this reflection.\r\n     */\r\n    toString(): string {\r\n        return ReflectionKind[this.kind] + ' ' + this.name;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this reflection and all of its children.\r\n     *\r\n     * @param indent  Used internally to indent child reflections.\r\n     */\r\n    toStringHierarchy(indent: string = '') {\r\n        const lines = [indent + this.toString()];\r\n\r\n        indent += '  ';\r\n        this.traverse((child, property) => {\r\n            lines.push(child.toStringHierarchy(indent));\r\n        });\r\n\r\n        return lines.join('\\n');\r\n    }\r\n}\r\n"]}