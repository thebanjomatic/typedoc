{"version":3,"file":"comment.js","sourceRoot":"","sources":["../../../../src/lib/models/comments/comment.ts"],"names":[],"mappings":"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","sourcesContent":["import { CommentTag } from './tag';\r\n\r\n/**\r\n * A model that represents a javadoc comment.\r\n *\r\n * Instances of this model are created by the [[CommentHandler]]. You can retrieve comments\r\n * through the [[BaseReflection.comment]] property.\r\n */\r\nexport class Comment {\r\n    /**\r\n     * The abstract of the comment. TypeDoc interprets the first paragraph of a comment\r\n     * as the abstract.\r\n     */\r\n    shortText: string;\r\n\r\n    /**\r\n     * The full body text of the comment. Excludes the [[shortText]].\r\n     */\r\n    text: string;\r\n\r\n    /**\r\n     * The text of the ```@returns``` tag if present.\r\n     */\r\n    returns: string;\r\n\r\n    /**\r\n     * All associated javadoc tags.\r\n     */\r\n    tags: CommentTag[];\r\n\r\n    /**\r\n     * Creates a new Comment instance.\r\n     */\r\n    constructor(shortText?: string, text?: string) {\r\n        this.shortText = shortText || '';\r\n        this.text = text || '';\r\n    }\r\n\r\n    /**\r\n     * Has this comment a visible component?\r\n     *\r\n     * @returns TRUE when this comment has a visible component.\r\n     */\r\n    hasVisibleComponent(): boolean {\r\n        return <boolean> (!!this.shortText || !!this.text || !!this.tags);\r\n    }\r\n\r\n    /**\r\n     * Test whether this comment contains a tag with the given name.\r\n     *\r\n     * @param tagName  The name of the tag to look for.\r\n     * @returns TRUE when this comment contains a tag with the given name, otherwise FALSE.\r\n     */\r\n    hasTag(tagName: string): boolean {\r\n        if (!this.tags) {\r\n            return false;\r\n        }\r\n        for (let i = 0, c = this.tags.length; i < c; i++) {\r\n            if (this.tags[i].tagName === tagName) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Return the first tag with the given name.\r\n     *\r\n     * You can optionally pass a parameter name that should be searched to.\r\n     *\r\n     * @param tagName  The name of the tag to look for.\r\n     * @param paramName  An optional parameter name to look for.\r\n     * @returns The found tag or NULL.\r\n     */\r\n    getTag(tagName: string, paramName?: string): CommentTag {\r\n        if (!this.tags) {\r\n            return null;\r\n        }\r\n        for (let i = 0, c = this.tags.length; i < c; i++) {\r\n            const tag = this.tags[i];\r\n            if (tag.tagName === tagName && (paramName === void 0 || tag.paramName === paramName)) {\r\n                return this.tags[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Copy the data of the given comment into this comment.\r\n     *\r\n     * @param comment\r\n     */\r\n    copyFrom(comment: Comment) {\r\n        this.shortText = comment.shortText;\r\n        this.text      = comment.text;\r\n        this.returns   = comment.returns;\r\n        this.tags      = comment.tags ? comment.tags.map((tag) => new CommentTag(tag.tagName, tag.paramName, tag.text)) : null;\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this comment.\r\n     */\r\n    toObject(): any {\r\n        const result: any = {};\r\n        if (this.shortText) {\r\n            result.shortText = this.shortText;\r\n        }\r\n        if (this.text) {\r\n            result.text      = this.text;\r\n        }\r\n        if (this.returns) {\r\n            result.returns   = this.returns;\r\n        }\r\n\r\n        if (this.tags && this.tags.length) {\r\n            result.tags = [];\r\n            this.tags.forEach((tag) => result.tags.push(tag.toObject()));\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]}