{"version":3,"file":"directory.js","sourceRoot":"","sources":["../../../../src/lib/models/sources/directory.ts"],"names":[],"mappings":";;AAYA;IAyCI,yBAAY,IAAa,EAAE,MAAwB;QArCnD,WAAM,GAAoB,IAAI,CAAC;QAK/B,gBAAW,GAAsC,EAAE,CAAC;QASpD,UAAK,GAAiB,EAAE,CAAC;QAKzB,SAAI,GAAW,IAAI,CAAC;QAKpB,YAAO,GAAW,IAAI,CAAC;QAcnB,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,IAAI,GAAM,IAAI,CAAC;YACpB,IAAI,CAAC,OAAO,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;YACnE,IAAI,CAAC,MAAM,GAAI,MAAM,CAAC;QAC1B,CAAC;IACL,CAAC;IAQD,kCAAQ,GAAR,UAAS,MAAmB;QAAnB,uBAAA,EAAA,WAAmB;QACxB,IAAI,GAAG,GAAG,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;QAE7B,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxC,QAAQ,CAAC;YACb,CAAC;YACD,GAAG,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;YACpB,GAAG,IAAI,IAAI,GAAG,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAQD,2CAAiB,GAAjB;QACI,IAAM,WAAW,GAAiB,EAAE,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;YACpB,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAGH,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IACL,sBAAC;AAAD,CAAC,AAvFD,IAuFC;AAvFY,0CAAe","sourcesContent":["import { Reflection } from '../reflections/abstract';\r\nimport { ReflectionCategory } from '../ReflectionCategory';\r\nimport { ReflectionGroup } from '../ReflectionGroup';\r\nimport { SourceFile } from './file';\r\n\r\n/**\r\n * Exposes information about a directory containing source files.\r\n *\r\n * One my access the root directory of a project through the [[ProjectReflection.directory]]\r\n * property. Traverse through directories by utilizing the [[SourceDirectory.parent]] or\r\n * [[SourceDirectory.directories]] properties.\r\n */\r\nexport class SourceDirectory {\r\n    /**\r\n     * The parent directory or NULL if this is a root directory.\r\n     */\r\n    parent: SourceDirectory = null;\r\n\r\n    /**\r\n     * A list of all subdirectories.\r\n     */\r\n    directories: {[name: string]: SourceDirectory} = {};\r\n\r\n    groups: ReflectionGroup[];\r\n\r\n    categories: ReflectionCategory[];\r\n\r\n    /**\r\n     * A list of all files in this directory.\r\n     */\r\n    files: SourceFile[] = [];\r\n\r\n    /**\r\n     * The name of this directory.\r\n     */\r\n    name: string = null;\r\n\r\n    /**\r\n     * The relative path from the root directory to this directory.\r\n     */\r\n    dirName: string = null;\r\n\r\n    /**\r\n     * The url of the page displaying the directory contents.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Create a new SourceDirectory instance.\r\n     *\r\n     * @param name  The new of directory.\r\n     * @param parent  The parent directory instance.\r\n     */\r\n    constructor(name?: string, parent?: SourceDirectory) {\r\n        if (name && parent) {\r\n            this.name    = name;\r\n            this.dirName = (parent.dirName ? parent.dirName + '/' : '') + name;\r\n            this.parent  = parent;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return a string describing this directory and its contents.\r\n     *\r\n     * @param indent  Used internally for indention.\r\n     * @returns A string representing this directory and all of its children.\r\n     */\r\n    toString(indent: string = '') {\r\n        let res = indent + this.name;\r\n\r\n        for (let key in this.directories) {\r\n            if (!this.directories.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            res += '\\n' + this.directories[key].toString(indent + '  ');\r\n        }\r\n\r\n        this.files.forEach((file) => {\r\n            res += '\\n' + indent + '  ' + file.fileName;\r\n        });\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Return a list of all reflections exposed by the files within this directory.\r\n     *\r\n     * @returns An aggregated list of all [[DeclarationReflection]] defined in the\r\n     * files of this directory.\r\n     */\r\n    getAllReflections(): Reflection[] {\r\n        const reflections: Reflection[] = [];\r\n        this.files.forEach((file) => {\r\n            reflections.push.apply(reflections, file.reflections);\r\n        });\r\n\r\n        // reflections.sort(Factories.GroupHandler.sortCallback);\r\n        return reflections;\r\n    }\r\n}\r\n"]}