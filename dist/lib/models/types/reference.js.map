{"version":3,"file":"reference.js","sourceRoot":"","sources":["../../../../src/lib/models/types/reference.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,uCAAkC;AASlC;IAAmC,iCAAI;IAmDnC,uBAAY,IAAY,EAAE,QAAgB,EAAE,UAAuB;QAAnE,YACI,iBAAO,SAIV;QApDQ,UAAI,GAAW,WAAW,CAAC;QAiDhC,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;;IACjC,CAAC;IAOD,6BAAK,GAAL;QACI,IAAM,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3E,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACzC,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAQD,8BAAM,GAAN,UAAO,IAAmB;QACtB,MAAM,CAAC,IAAI,YAAY,aAAa;YAChC,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC;IACjF,CAAC;IAKD,gCAAQ,GAAR;QACI,IAAM,MAAM,GAAQ,iBAAM,QAAQ,WAAE,CAAC;QACrC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAExB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,QAAQ,EAAE,EAAZ,CAAY,CAAC,CAAC;QACvE,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAMD,gCAAQ,GAAR;QACI,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QAChE,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACrB,QAAQ,IAAI,GAAG,CAAC;YAChB,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,QAAQ,EAAE,EAAd,CAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrE,QAAQ,IAAI,GAAG,CAAC;QACpB,CAAC;QAED,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;IAC3B,CAAC;IA3EM,gCAAkB,GAAG,CAAC,CAAC,CAAC;IAKxB,uCAAyB,GAAG,CAAC,CAAC,CAAC;IAuE1C,oBAAC;CAAA,AAjHD,CAAmC,eAAI,GAiHtC;AAjHY,sCAAa","sourcesContent":["import { Reflection } from '../reflections/abstract';\r\nimport { Type } from './abstract';\r\n\r\n/**\r\n * Represents a type that refers to another reflection like a class, interface or enum.\r\n *\r\n * ~~~\r\n * let value: MyClass;\r\n * ~~~\r\n */\r\nexport class ReferenceType extends Type {\r\n    /**\r\n     * The type name identifier.\r\n     */\r\n    readonly type: string = 'reference';\r\n\r\n    /**\r\n     * The name of the referenced type.\r\n     *\r\n     * If the symbol cannot be found cause it's not part of the documentation this\r\n     * can be used to represent the type.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The type arguments of this reference.\r\n     */\r\n    typeArguments: Type[];\r\n\r\n    /**\r\n     * The symbol id of the referenced type as returned from the TypeScript compiler.\r\n     *\r\n     * After the all reflections have been generated this is can be used to lookup the\r\n     * relevant reflection with [[ProjectReflection.symbolMapping]].\r\n     */\r\n    symbolID: number;\r\n\r\n    /**\r\n     * The resolved reflection.\r\n     *\r\n     * The [[TypePlugin]] will try to set this property in the resolving phase.\r\n     */\r\n    reflection: Reflection;\r\n\r\n    /**\r\n     * Special symbol ID noting that the reference of a ReferenceType was known when creating the type.\r\n     */\r\n    static SYMBOL_ID_RESOLVED = -1;\r\n\r\n    /**\r\n     * Special symbol ID noting that the reference should be resolved by the type name.\r\n     */\r\n    static SYMBOL_ID_RESOLVE_BY_NAME = -2;\r\n\r\n    /**\r\n     * Create a new instance of ReferenceType.\r\n     *\r\n     * @param name        The name of the referenced type.\r\n     * @param symbolID    The symbol id of the referenced type as returned from the TypeScript compiler.\r\n     * @param reflection  The resolved reflection if already known.\r\n     */\r\n    constructor(name: string, symbolID: number, reflection?: Reflection) {\r\n        super();\r\n        this.name = name;\r\n        this.symbolID = symbolID;\r\n        this.reflection = reflection;\r\n    }\r\n\r\n    /**\r\n     * Clone this type.\r\n     *\r\n     * @return A clone of this type.\r\n     */\r\n    clone(): Type {\r\n        const clone = new ReferenceType(this.name, this.symbolID, this.reflection);\r\n        clone.typeArguments = this.typeArguments;\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Test whether this type equals the given type.\r\n     *\r\n     * @param type  The type that should be checked for equality.\r\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\r\n     */\r\n    equals(type: ReferenceType): boolean {\r\n        return type instanceof ReferenceType &&\r\n            (type.symbolID === this.symbolID || type.reflection === this.reflection);\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this type.\r\n     */\r\n    toObject(): any {\r\n        const result: any = super.toObject();\r\n        result.name = this.name;\r\n\r\n        if (this.reflection) {\r\n            result.id = this.reflection.id;\r\n        }\r\n\r\n        if (this.typeArguments) {\r\n            result.typeArguments = this.typeArguments.map((t) => t.toObject());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this type.\r\n     * @example EventEmitter<any>\r\n     */\r\n    toString() {\r\n        const name = this.reflection ? this.reflection.name : this.name;\r\n        let typeArgs = '';\r\n        if (this.typeArguments) {\r\n            typeArgs += '<';\r\n            typeArgs += this.typeArguments.map(arg => arg.toString()).join(', ');\r\n            typeArgs += '>';\r\n        }\r\n\r\n        return name + typeArgs;\r\n    }\r\n}\r\n"]}