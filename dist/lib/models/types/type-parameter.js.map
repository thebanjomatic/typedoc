{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../../src/lib/models/types/type-parameter.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAAkC;AASlC;IAAuC,qCAAI;IAA3C;QAAA,qEAiEC;QAtDY,UAAI,GAAW,eAAe,CAAC;;IAsD5C,CAAC;IA/CG,iCAAK,GAAL;QACI,IAAM,KAAK,GAAG,IAAI,iBAAiB,EAAE,CAAC;QACtC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAQD,kCAAM,GAAN,UAAO,IAAuB;QAC1B,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,iBAAiB,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACnD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;IACL,CAAC;IAKD,oCAAQ,GAAR;QACI,IAAM,MAAM,GAAQ,iBAAM,QAAQ,WAAE,CAAC;QACrC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAExB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QACnD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAKD,oCAAQ,GAAR;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IACL,wBAAC;AAAD,CAAC,AAjED,CAAuC,eAAI,GAiE1C;AAjEY,8CAAiB","sourcesContent":["import { Type } from './abstract';\r\n\r\n/**\r\n * Represents a type parameter type.\r\n *\r\n * ~~~\r\n * let value: T;\r\n * ~~~\r\n */\r\nexport class TypeParameterType extends Type {\r\n    /**\r\n     *\r\n     */\r\n    name: string;\r\n\r\n    constraint: Type;\r\n\r\n    /**\r\n     * The type name identifier.\r\n     */\r\n    readonly type: string = 'typeParameter';\r\n\r\n    /**\r\n     * Clone this type.\r\n     *\r\n     * @return A clone of this type.\r\n     */\r\n    clone(): Type {\r\n        const clone = new TypeParameterType();\r\n        clone.name = this.name;\r\n        clone.constraint = this.constraint;\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Test whether this type equals the given type.\r\n     *\r\n     * @param type  The type that should be checked for equality.\r\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\r\n     */\r\n    equals(type: TypeParameterType): boolean {\r\n        if (!(type instanceof TypeParameterType)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.constraint && type.constraint) {\r\n            return type.constraint.equals(this.constraint);\r\n        } else if (!this.constraint && !type.constraint) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this type.\r\n     */\r\n    toObject(): any {\r\n        const result: any = super.toObject();\r\n        result.name = this.name;\r\n\r\n        if (this.constraint) {\r\n            result.constraint = this.constraint.toObject();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this type.\r\n     */\r\n    toString() {\r\n        return this.name;\r\n    }\r\n}\r\n"]}