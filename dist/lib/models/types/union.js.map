{"version":3,"file":"union.js","sourceRoot":"","sources":["../../../../src/lib/models/types/union.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAAkC;AASlC;IAA+B,6BAAI;IAgB/B,mBAAY,KAAa;QAAzB,YACI,iBAAO,SAEV;QAVQ,UAAI,GAAW,OAAO,CAAC;QAS5B,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;IACvB,CAAC;IAOD,yBAAK,GAAL;QACI,MAAM,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAQD,0BAAM,GAAN,UAAO,IAAe;QAClB,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,SAAS,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACD,MAAM,CAAC,eAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;IAKD,4BAAQ,GAAR;QACI,IAAM,MAAM,GAAQ,iBAAM,QAAQ,WAAE,CAAC;QAErC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,QAAQ,EAAE,EAAZ,CAAY,CAAC,CAAC;QACvD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAKD,4BAAQ,GAAR;QACI,IAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,OAAO;YACvB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IACL,gBAAC;AAAD,CAAC,AAnED,CAA+B,eAAI,GAmElC;AAnEY,8BAAS","sourcesContent":["import { Type } from './abstract';\r\n\r\n/**\r\n * Represents an union type.\r\n *\r\n * ~~~\r\n * let value: string | string[];\r\n * ~~~\r\n */\r\nexport class UnionType extends Type {\r\n    /**\r\n     * The types this union consists of.\r\n     */\r\n    types: Type[];\r\n\r\n    /**\r\n     * The type name identifier.\r\n     */\r\n    readonly type: string = 'union';\r\n\r\n    /**\r\n     * Create a new TupleType instance.\r\n     *\r\n     * @param types  The types this union consists of.\r\n     */\r\n    constructor(types: Type[]) {\r\n        super();\r\n        this.types = types;\r\n    }\r\n\r\n    /**\r\n     * Clone this type.\r\n     *\r\n     * @return A clone of this type.\r\n     */\r\n    clone(): Type {\r\n        return new UnionType(this.types);\r\n    }\r\n\r\n    /**\r\n     * Test whether this type equals the given type.\r\n     *\r\n     * @param type  The type that should be checked for equality.\r\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\r\n     */\r\n    equals(type: UnionType): boolean {\r\n        if (!(type instanceof UnionType)) {\r\n            return false;\r\n        }\r\n        return Type.isTypeListSimiliar(type.types, this.types);\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this type.\r\n     */\r\n    toObject(): any {\r\n        const result: any = super.toObject();\r\n\r\n        if (this.types && this.types.length) {\r\n            result.types = this.types.map((e) => e.toObject());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this type.\r\n     */\r\n    toString() {\r\n        const names: string[] = [];\r\n        this.types.forEach((element) => {\r\n            names.push(element.toString());\r\n        });\r\n\r\n        return names.join(' | ');\r\n    }\r\n}\r\n"]}