{"version":3,"file":"string-literal.js","sourceRoot":"","sources":["../../../../src/lib/models/types/string-literal.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAAkC;AASlC;IAAuC,qCAAI;IAgBvC,2BAAY,KAAa;QAAzB,YACI,iBAAO,SAEV;QAVQ,UAAI,GAAW,eAAe,CAAC;QASpC,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;IACvB,CAAC;IAOD,iCAAK,GAAL;QACI,MAAM,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC;IAQD,kCAAM,GAAN,UAAO,IAAuB;QAC1B,MAAM,CAAC,IAAI,YAAY,iBAAiB;YACpC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;IAClC,CAAC;IAKD,oCAAQ,GAAR;QACI,IAAM,MAAM,GAAQ,iBAAM,QAAQ,WAAE,CAAC;QACrC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1B,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAKD,oCAAQ,GAAR;QACI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;IAClC,CAAC;IACL,wBAAC;AAAD,CAAC,AAxDD,CAAuC,eAAI,GAwD1C;AAxDY,8CAAiB","sourcesContent":["import { Type } from './abstract';\r\n\r\n/**\r\n * Represents a string literal type.\r\n *\r\n * ~~~\r\n * let value: \"DIV\";\r\n * ~~~\r\n */\r\nexport class StringLiteralType extends Type {\r\n    /**\r\n     * The string literal value.\r\n     */\r\n    value: string;\r\n\r\n    /**\r\n     * The type name identifier.\r\n     */\r\n    readonly type: string = 'stringLiteral';\r\n\r\n    /**\r\n     * Create a new instance of StringLiteralType.\r\n     *\r\n     * @param value The string literal value.\r\n     */\r\n    constructor(value: string) {\r\n        super();\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * Clone this type.\r\n     *\r\n     * @return A clone of this type.\r\n     */\r\n    clone(): Type {\r\n        return new StringLiteralType(this.value);\r\n    }\r\n\r\n    /**\r\n     * Test whether this type equals the given type.\r\n     *\r\n     * @param type  The type that should be checked for equality.\r\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\r\n     */\r\n    equals(type: StringLiteralType): boolean {\r\n        return type instanceof StringLiteralType &&\r\n            type.value === this.value;\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this type.\r\n     */\r\n    toObject(): any {\r\n        const result: any = super.toObject();\r\n        result.value = this.value;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this type.\r\n     */\r\n    toString(): string {\r\n        return '\"' + this.value + '\"';\r\n    }\r\n}\r\n"]}