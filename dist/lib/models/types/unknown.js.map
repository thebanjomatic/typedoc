{"version":3,"file":"unknown.js","sourceRoot":"","sources":["../../../../src/lib/models/types/unknown.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAAkC;AAKlC;IAAiC,+BAAI;IAgBjC,qBAAY,IAAY;QAAxB,YACI,iBAAO,SAEV;QAVQ,UAAI,GAAW,SAAS,CAAC;QAS9B,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;IACrB,CAAC;IAOD,2BAAK,GAAL;QACI,MAAM,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAQD,4BAAM,GAAN,UAAO,IAAiB;QACpB,MAAM,CAAC,IAAI,YAAY,WAAW;YAC9B,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;IAChC,CAAC;IAKD,8BAAQ,GAAR;QACI,IAAM,MAAM,GAAQ,iBAAM,QAAQ,WAAE,CAAC;QACrC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACxB,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAKD,8BAAQ,GAAR;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IACL,kBAAC;AAAD,CAAC,AAxDD,CAAiC,eAAI,GAwDpC;AAxDY,kCAAW","sourcesContent":["import { Type } from './abstract';\r\n\r\n/**\r\n * Represents all unknown types.\r\n */\r\nexport class UnknownType extends Type {\r\n    /**\r\n     * A string representation of the type as returned from TypeScript compiler.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The type name identifier.\r\n     */\r\n    readonly type: string = 'unknown';\r\n\r\n    /**\r\n     * Create a new instance of UnknownType.\r\n     *\r\n     * @param name  A string representation of the type as returned from TypeScript compiler.\r\n     */\r\n    constructor(name: string) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Clone this type.\r\n     *\r\n     * @return A clone of this type.\r\n     */\r\n    clone(): Type {\r\n        return new UnknownType(this.name);\r\n    }\r\n\r\n    /**\r\n     * Test whether this type equals the given type.\r\n     *\r\n     * @param type  The type that should be checked for equality.\r\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\r\n     */\r\n    equals(type: UnknownType): boolean {\r\n        return type instanceof UnknownType &&\r\n            type.name === this.name;\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this type.\r\n     */\r\n    toObject(): any {\r\n        const result: any = super.toObject();\r\n        result.name = this.name;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this type.\r\n     */\r\n    toString() {\r\n        return this.name;\r\n    }\r\n}\r\n"]}