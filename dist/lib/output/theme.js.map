{"version":3,"file":"theme.js","sourceRoot":"","sources":["../../../src/lib/output/theme.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAIA,2CAAiD;AACjD,gDAA+C;AAC/C,+CAA8C;AA8C9C;IAA2B,yBAAiB;IAcxC,eAAY,QAAkB,EAAE,QAAgB;QAAhD,YACI,kBAAM,QAAQ,CAAC,SAIlB;QAFG,KAAI,CAAC,QAAQ,GAAI,QAAQ,CAAC;QAC1B,KAAI,CAAC,SAAS,GAAG,IAAI,qBAAS,CAAC,KAAI,CAAC,CAAC;;IACzC,CAAC;IAmBD,iCAAiB,GAAjB,UAAkB,IAAY;QAC1B,OAAO,KAAK,CAAC;IACjB,CAAC;IAYD,uBAAO,GAAP,UAAQ,OAA0B;QAC9B,OAAO,EAAE,CAAC;IACd,CAAC;IAeD,6BAAa,GAAb,UAAc,OAA0B;QACpC,OAAO,IAAI,CAAC;IAChB,CAAC;IAvEQ,KAAK;QADjB,qBAAS,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;OAC9B,KAAK,CAwEjB;IAAD,YAAC;CAAA,AAxED,CAA2B,8BAAiB,GAwE3C;AAxEY,sBAAK","sourcesContent":["import { Renderer } from './renderer';\r\nimport { ProjectReflection } from '../models/reflections/project';\r\nimport { UrlMapping } from './models/UrlMapping';\r\nimport { NavigationItem } from './models/NavigationItem';\r\nimport { RendererComponent } from './components';\r\nimport { Component } from '../utils/component';\r\nimport { Resources } from './utils/resources';\r\n\r\n/**\r\n * Base class of all themes.\r\n *\r\n * A theme defines the logical and graphical output of a documentation. Themes are\r\n * directories containing a ```theme.js``` file defining a [[BaseTheme]] subclass and a\r\n * series of subdirectories containing templates and assets. You can select a theme\r\n * through the ```--theme <path/to/theme>``` commandline argument.\r\n *\r\n * The theme class controls which files will be created through the [[BaseTheme.getUrls]]\r\n * function. It returns an array of [[UrlMapping]] instances defining the target files, models\r\n * and templates to use. Additionally themes can subscribe to the events emitted by\r\n * [[Renderer]] to control and manipulate the output process.\r\n *\r\n * The default file structure of a theme looks like this:\r\n *\r\n * - ```/assets/```<br>\r\n *   Contains static assets like stylesheets, images or javascript files used by the theme.\r\n *   The [[AssetsPlugin]] will deep copy this directory to the output directory.\r\n *\r\n * - ```/layouts/```<br>\r\n *   Contains layout templates that the [[LayoutPlugin]] wraps around the output of the\r\n *   page template. Currently only one ```default.hbs``` layout is supported. Layout templates\r\n *   receive the current [[PageEvent]] instance as their handlebars context. Place the\r\n *   ```{{{contents}}}``` variable to render the actual body of the document within this template.\r\n *\r\n * - ```/partials/```<br>\r\n *   Contains partial templates that can be used by other templates using handlebars partial\r\n *   syntax ```{{> partial-name}}```. The [[PartialsPlugin]] loads all files in this directory\r\n *   and combines them with the partials of the default theme.\r\n *\r\n * - ```/templates/```<br>\r\n *   Contains the main templates of the theme. The theme maps models to these templates through\r\n *   the [[BaseTheme.getUrls]] function. If the [[Renderer.getTemplate]] function cannot find a\r\n *   given template within this directory, it will try to find it in the default theme\r\n *   ```/templates/``` directory. Templates receive the current [[PageEvent]] instance as\r\n *   their handlebars context. You can access the target model through the ```{{model}}``` variable.\r\n *\r\n * - ```/theme.js```<br>\r\n *   A javascript file that returns the definition of a [[BaseTheme]] subclass. This file will\r\n *   be executed within the context of TypeDoc, one may directly access all classes and functions\r\n *   of TypeDoc. If this file is not present, an instance of [[DefaultTheme]] will be used to render\r\n *   this theme.\r\n */\r\n@Component({name: 'theme', internal: true})\r\nexport class Theme extends RendererComponent {\r\n    /**\r\n     * The base path of this theme.\r\n     */\r\n    basePath: string;\r\n\r\n    resources: Resources;\r\n\r\n    /**\r\n     * Create a new BaseTheme instance.\r\n     *\r\n     * @param renderer  The renderer this theme is attached to.\r\n     * @param basePath  The base path of this theme.\r\n     */\r\n    constructor(renderer: Renderer, basePath: string) {\r\n        super(renderer);\r\n\r\n        this.basePath  = basePath;\r\n        this.resources = new Resources(this);\r\n    }\r\n\r\n    /**\r\n     * Test whether the given path contains a documentation generated by this theme.\r\n     *\r\n     * TypeDoc empties the output directory before rendering a project. This function\r\n     * is used to ensure that only previously generated documentations are deleted.\r\n     * When this function returns FALSE, the documentation will not be created and an\r\n     * error message will be displayed.\r\n     *\r\n     * Every theme must have an own implementation of this function, the default\r\n     * implementation always returns FALSE.\r\n     *\r\n     * @param path  The path of the directory that should be tested.\r\n     * @returns     TRUE if the given path seems to be a previous output directory,\r\n     *              otherwise FALSE.\r\n     *\r\n     * @see [[Renderer.prepareOutputDirectory]]\r\n     */\r\n    isOutputDirectory(path: string): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Map the models of the given project to the desired output files.\r\n     *\r\n     * Every theme must have an own implementation of this function, the default\r\n     * implementation always returns an empty array.\r\n     *\r\n     * @param project  The project whose urls should be generated.\r\n     * @returns        A list of [[UrlMapping]] instances defining which models\r\n     *                 should be rendered to which files.\r\n     */\r\n    getUrls(project: ProjectReflection): UrlMapping[] {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Create a navigation structure for the given project.\r\n     *\r\n     * A navigation is a tree structure consisting of [[NavigationItem]] nodes. This\r\n     * function should return the root node of the desired navigation tree.\r\n     *\r\n     * The [[NavigationPlugin]] will call this hook before a project will be rendered.\r\n     * The plugin will update the state of the navigation tree and pass it to the\r\n     * templates.\r\n     *\r\n     * @param project  The project whose navigation should be generated.\r\n     * @returns        The root navigation item.\r\n     */\r\n    getNavigation(project: ProjectReflection): NavigationItem {\r\n        return null;\r\n    }\r\n}\r\n"]}