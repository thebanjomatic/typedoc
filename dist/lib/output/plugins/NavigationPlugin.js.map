{"version":3,"file":"NavigationPlugin.js","sourceRoot":"","sources":["../../../../src/lib/output/plugins/NavigationPlugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,4CAA6D;AAE7D,oCAAqD;AAWrD;IAAsC,oCAAiB;IAAvD;;IAwEA,CAAC;IA/DG,qCAAU,GAAV;;QACI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK;YACpB,GAAC,sBAAa,CAAC,KAAK,IAAG,IAAI,CAAC,eAAe;YAC3C,GAAC,kBAAS,CAAC,KAAK,IAAO,IAAI,CAAC,WAAW;gBACzC,CAAC;IACP,CAAC;IAOO,0CAAe,GAAvB,UAAwB,KAAoB;QACxC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACpE,CAAC;IAOO,sCAAW,GAAnB,UAAoB,IAAe;QAC/B,IAAM,YAAY,GAAqB,EAAE,CAAC;QAC1C,CAAC,SAAS,UAAU,CAAC,IAAoB;YACrC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,QAAQ,GAAI,KAAK,CAAC;YACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YAEhC,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;gBAC9F,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC3B;YAED,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAK,IAAK,OAAA,UAAU,CAAC,KAAK,CAAC,EAAjB,CAAiB,CAAC,CAAC;aACvD;QACL,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEpB,YAAY,CAAC,OAAO,CAAC,UAAC,IAAoB;YACtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YAEtB,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,OAAO,IAAI,EAAE;gBACT,IAAI,CAAC,QAAQ,GAAI,IAAI,CAAC;gBACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBAEtB,KAAK,IAAI,CAAC,CAAC;gBACX,KAAK,IAAI,CAAC,CAAC;gBACX,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACf,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAC9B,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,EAAE,EAAE;wBACzB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAK;4BACxB,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;wBAC3B,CAAC,CAAC,CAAC;qBACN;iBACJ;gBAED,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;aACtB;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IACtC,CAAC;IAvEQ,gBAAgB;QAD5B,sBAAS,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC;OACnB,gBAAgB,CAwE5B;IAAD,uBAAC;CAAA,AAxED,CAAsC,8BAAiB,GAwEtD;AAxEY,4CAAgB","sourcesContent":["import { Component, RendererComponent } from '../components';\r\nimport { NavigationItem } from '../models/NavigationItem';\r\nimport { RendererEvent, PageEvent } from '../events';\r\n\r\n/**\r\n * A plugin that exposes the navigation structure of the documentation\r\n * to the rendered templates.\r\n *\r\n * The navigation structure is generated using the current themes\r\n * [[BaseTheme.getNavigation]] function. This plugins takes care that the navigation\r\n * is updated and passed to the render context.\r\n */\r\n@Component({name: 'navigation'})\r\nexport class NavigationPlugin extends RendererComponent {\r\n    /**\r\n     * The navigation structure generated by the current theme.\r\n     */\r\n    navigation: NavigationItem;\r\n\r\n    /**\r\n     * Create a new NavigationPlugin instance.\r\n     */\r\n    initialize() {\r\n        this.listenTo(this.owner, {\r\n            [RendererEvent.BEGIN]: this.onBeginRenderer,\r\n            [PageEvent.BEGIN]:     this.onBeginPage\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggered before the renderer starts rendering a project.\r\n     *\r\n     * @param event  An event object describing the current render operation.\r\n     */\r\n    private onBeginRenderer(event: RendererEvent) {\r\n        this.navigation = this.owner.theme.getNavigation(event.project);\r\n    }\r\n\r\n    /**\r\n     * Triggered before a document will be rendered.\r\n     *\r\n     * @param page  An event object describing the current render operation.\r\n     */\r\n    private onBeginPage(page: PageEvent) {\r\n        const currentItems: NavigationItem[] = [];\r\n        (function updateItem(item: NavigationItem) {\r\n            item.isCurrent = false;\r\n            item.isInPath  = false;\r\n            item.isVisible = item.isGlobals;\r\n\r\n            if (item.url === page.url || (item.dedicatedUrls && item.dedicatedUrls.indexOf(page.url) !== -1)) {\r\n                currentItems.push(item);\r\n            }\r\n\r\n            if (item.children) {\r\n                item.children.forEach((child) => updateItem(child));\r\n            }\r\n        })(this.navigation);\r\n\r\n        currentItems.forEach((item: NavigationItem) => {\r\n            item.isCurrent = true;\r\n\r\n            let depth = item.isGlobals ? -1 : 0;\r\n            let count = 1;\r\n            while (item) {\r\n                item.isInPath  = true;\r\n                item.isVisible = true;\r\n\r\n                count += 1;\r\n                depth += 1;\r\n                if (item.children) {\r\n                    count += item.children.length;\r\n                    if (depth < 2 || count < 30) {\r\n                        item.children.forEach((child) => {\r\n                            child.isVisible = true;\r\n                        });\r\n                    }\r\n                }\r\n\r\n                item = item.parent;\r\n            }\r\n        });\r\n\r\n        page.navigation = this.navigation;\r\n    }\r\n}\r\n"]}