{"version":3,"file":"MarkedPlugin.js","sourceRoot":"","sources":["../../../../src/lib/output/plugins/MarkedPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as FS from 'fs-extra';\r\nimport * as Path from 'path';\r\nimport * as Marked from 'marked';\r\nimport * as HighlightJS from 'highlight.js';\r\nimport * as Handlebars from 'handlebars';\r\n\r\nimport { Component, ContextAwareRendererComponent } from '../components';\r\nimport { RendererEvent, MarkdownEvent } from '../events';\r\nimport { Option } from '../../utils/component';\r\nimport { ParameterHint } from '../../utils/options/declaration';\r\n\r\n/**\r\n * A plugin that exposes the markdown, compact and relativeURL helper to handlebars.\r\n *\r\n * Templates should parse all comments with the markdown handler so authors can\r\n * easily format their documentation. TypeDoc uses the Marked (https://github.com/chjj/marked)\r\n * markdown parser and HighlightJS (https://github.com/isagalaev/highlight.js) to highlight\r\n * code blocks within markdown sections. Additionally this plugin allows to link to other symbols\r\n * using double angle brackets.\r\n *\r\n * You can use the markdown helper anywhere in the templates to convert content to html:\r\n *\r\n * ```handlebars\r\n * {{#markdown}}{{{comment.text}}}{{/markdown}}\r\n * ```\r\n *\r\n * The compact helper removes all newlines of its content:\r\n *\r\n * ```handlebars\r\n * {{#compact}}\r\n *   Compact\r\n *   this\r\n * {{/compact}}\r\n * ```\r\n *\r\n * The relativeURL helper simply transforms an absolute url into a relative url:\r\n *\r\n * ```handlebars\r\n * {{#relativeURL url}}\r\n * ```\r\n */\r\n@Component({name: 'marked'})\r\nexport class MarkedPlugin extends ContextAwareRendererComponent {\r\n    @Option({\r\n        name: 'includes',\r\n        help: 'Specifies the location to look for included documents (use [[include:FILENAME]] in comments).',\r\n        hint: ParameterHint.Directory\r\n    })\r\n    includeSource: string;\r\n\r\n    @Option({\r\n        name: 'media',\r\n        help: 'Specifies the location with media files that should be copied to the output directory.',\r\n        hint: ParameterHint.Directory\r\n    })\r\n    mediaSource: string;\r\n\r\n    /**\r\n     * The path referenced files are located in.\r\n     */\r\n    private includes: string;\r\n\r\n    /**\r\n     * Path to the output media directory.\r\n     */\r\n    private mediaDirectory: string;\r\n\r\n    /**\r\n     * The pattern used to find references in markdown.\r\n     */\r\n    private includePattern: RegExp = /\\[\\[include:([^\\]]+?)\\]\\]/g;\r\n\r\n    /**\r\n     * The pattern used to find media links.\r\n     */\r\n    private mediaPattern: RegExp = /media:\\/\\/([^ \"\\)\\]\\}]+)/g;\r\n\r\n    /**\r\n     * Create a new MarkedPlugin instance.\r\n     */\r\n    initialize() {\r\n        super.initialize();\r\n        this.listenTo(this.owner, MarkdownEvent.PARSE, this.onParseMarkdown);\r\n\r\n        const that = this;\r\n        Handlebars.registerHelper('markdown', function(arg: any) { return that.parseMarkdown(arg.fn(this), this); });\r\n        Handlebars.registerHelper('relativeURL', (url: string) => url ? this.getRelativeUrl(url) : url);\r\n\r\n        Marked.setOptions({\r\n            highlight: (text: any, lang: any) => this.getHighlighted(text, lang)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Highlight the synatx of the given text using HighlightJS.\r\n     *\r\n     * @param text  The text taht should be highlightes.\r\n     * @param lang  The language that should be used to highlight the string.\r\n     * @return A html string with syntax highlighting.\r\n     */\r\n    public getHighlighted(text: string, lang?: string): string {\r\n        try {\r\n            if (lang) {\r\n                return HighlightJS.highlight(lang, text).value;\r\n            } else {\r\n                return HighlightJS.highlightAuto(text).value;\r\n            }\r\n        } catch (error) {\r\n            this.application.logger.warn(error.message);\r\n            return text;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse the given markdown string and return the resulting html.\r\n     *\r\n     * @param text  The markdown string that should be parsed.\r\n     * @param context  The current handlebars context.\r\n     * @returns The resulting html string.\r\n     */\r\n    public parseMarkdown(text: string, context: any) {\r\n        if (this.includes) {\r\n            text = text.replace(this.includePattern, (match: string, path: string) => {\r\n                path = Path.join(this.includes, path.trim());\r\n                if (FS.existsSync(path) && FS.statSync(path).isFile()) {\r\n                    const contents = FS.readFileSync(path, 'utf-8');\r\n                    if (path.substr(-4).toLocaleLowerCase() === '.hbs') {\r\n                        const template = Handlebars.compile(contents);\r\n                        return template(context);\r\n                    } else {\r\n                        return contents;\r\n                    }\r\n                } else {\r\n                    return '';\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this.mediaDirectory) {\r\n            text = text.replace(this.mediaPattern, (match: string, path: string) => {\r\n                if (FS.existsSync(Path.join(this.mediaDirectory, path))) {\r\n                    return this.getRelativeUrl('media') + '/' + path;\r\n                } else {\r\n                    return match;\r\n                }\r\n            });\r\n        }\r\n\r\n        const event = new MarkdownEvent(MarkdownEvent.PARSE);\r\n        event.originalText = text;\r\n        event.parsedText = text;\r\n\r\n        this.owner.trigger(event);\r\n        return event.parsedText;\r\n    }\r\n\r\n    /**\r\n     * Triggered before the renderer starts rendering a project.\r\n     *\r\n     * @param event  An event object describing the current render operation.\r\n     */\r\n    protected onBeginRenderer(event: RendererEvent) {\r\n        super.onBeginRenderer(event);\r\n\r\n        delete this.includes;\r\n        if (this.includeSource) {\r\n            const includes = Path.resolve(this.includeSource);\r\n            if (FS.existsSync(includes) && FS.statSync(includes).isDirectory()) {\r\n                this.includes = includes;\r\n            } else {\r\n                this.application.logger.warn('Could not find provided includes directory: ' + includes);\r\n            }\r\n        }\r\n\r\n        if (this.mediaSource) {\r\n            const media = Path.resolve(this.mediaSource);\r\n            if (FS.existsSync(media) && FS.statSync(media).isDirectory()) {\r\n                this.mediaDirectory = Path.join(event.outputDirectory, 'media');\r\n                FS.copySync(media, this.mediaDirectory);\r\n            } else {\r\n                this.mediaDirectory = null;\r\n                this.application.logger.warn('Could not find provided media directory: ' + media);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggered when [[MarkedPlugin]] parses a markdown string.\r\n     *\r\n     * @param event\r\n     */\r\n    onParseMarkdown(event: MarkdownEvent) {\r\n        event.parsedText = Marked(event.parsedText);\r\n    }\r\n}\r\n"]}