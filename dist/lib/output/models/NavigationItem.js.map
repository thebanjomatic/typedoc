{"version":3,"file":"NavigationItem.js","sourceRoot":"","sources":["../../../../src/lib/output/models/NavigationItem.ts"],"names":[],"mappings":";;AASA;IAsEI,wBAAY,KAAc,EAAE,GAAY,EAAE,MAAuB,EAAE,UAAmB,EAAE,UAAuB;QAC3G,IAAI,CAAC,KAAK,GAAQ,KAAK,IAAK,EAAE,CAAC;QAC/B,IAAI,CAAC,GAAG,GAAU,GAAG,IAAO,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAO,MAAM,IAAI,IAAI,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,IAAI,CAAC,GAAG,EAAE;YACN,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACvB;QAED,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,EAAE,CAAC;aAC7B;YACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACnC;IACL,CAAC;IASM,qBAAM,GAAb,UAAc,UAAsB,EAAE,MAAuB,EAAE,aAAuB;QAClF,IAAI,IAAY,CAAC;QACjB,IAAI,aAAa,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;YAC5C,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;SAC1B;aAAM;YACH,IAAI,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;SACnC;QAED,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACnB,IAAI,IAAI,KAAK,EAAE,EAAE;YACb,IAAI,GAAG,SAAO,UAAU,CAAC,UAAU,UAAO,CAAC;SAC9C;QAED,OAAO,IAAI,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAC/F,CAAC;IACL,qBAAC;AAAD,CAAC,AA/GD,IA+GC;AA/GY,wCAAc","sourcesContent":["import { Reflection } from '../../models/reflections/abstract';\r\n\r\n/**\r\n * A hierarchical model holding the data of single node within the navigation.\r\n *\r\n * This structure is used by the [[NavigationPlugin]] and [[TocPlugin]] to expose the current\r\n * navigation state to the template engine. Themes should generate the primary navigation structure\r\n * through the [[BaseTheme.getNavigation]] method.\r\n */\r\nexport class NavigationItem {\r\n    /**\r\n     * The visible title of the navigation node.\r\n     */\r\n    title: string;\r\n\r\n    /**\r\n     * The url this navigation node points to.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * A list of urls that should be seen as sub-pages of this node.\r\n     */\r\n    dedicatedUrls: string[];\r\n\r\n    /**\r\n     * The parent navigation node.\r\n     */\r\n    parent: NavigationItem;\r\n\r\n    /**\r\n     * An array containing all child navigation nodes.\r\n     */\r\n    children: NavigationItem[];\r\n\r\n    /**\r\n     * A string containing the css classes of this node.\r\n     */\r\n    cssClasses: string;\r\n\r\n    /**\r\n     * Is this item a simple label without a link?\r\n     */\r\n    isLabel: boolean;\r\n\r\n    /**\r\n     * Is this item visible?\r\n     */\r\n    isVisible: boolean;\r\n\r\n    /**\r\n     * Does this navigation node represent the current page?\r\n     */\r\n    isCurrent: boolean;\r\n\r\n    /**\r\n     * Is this the navigation node for the globals page?\r\n     */\r\n    isGlobals: boolean;\r\n\r\n    /**\r\n     * Is this navigation node one of the parents of the current page?\r\n     */\r\n    isInPath: boolean;\r\n\r\n    /**\r\n     * The source [Reflection] this item is built from\r\n     */\r\n    reflection: Reflection;\r\n\r\n    /**\r\n     * Create a new NavigationItem instance.\r\n     *\r\n     * @param title       The visible title of the navigation node.\r\n     * @param url         The url this navigation node points to.\r\n     * @param parent      The parent navigation node.\r\n     * @param cssClasses  A string containing the css classes of this node.\r\n     * @param reflection  The source [Reflection] for this [NavigationItem]\r\n     */\r\n    constructor(title?: string, url?: string, parent?: NavigationItem, cssClasses?: string, reflection?: Reflection) {\r\n        this.title      = title  || '';\r\n        this.url        = url    || '';\r\n        this.parent     = parent || null;\r\n        this.cssClasses = cssClasses || '';\r\n        this.reflection = reflection;\r\n\r\n        if (!url) {\r\n            this.isLabel = true;\r\n        }\r\n\r\n        if (this.parent) {\r\n            if (!this.parent.children) {\r\n                this.parent.children = [];\r\n            }\r\n            this.parent.children.push(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a navigation node for the given reflection.\r\n     *\r\n     * @param reflection     The reflection whose navigation node should be created.\r\n     * @param parent         The parent navigation node.\r\n     * @param useShortNames  Force this function to always use short names.\r\n     */\r\n    static create(reflection: Reflection, parent?: NavigationItem, useShortNames?: boolean) {\r\n        let name: string;\r\n        if (useShortNames || (parent && parent.parent)) {\r\n            name = reflection.name;\r\n        } else {\r\n            name = reflection.getFullName();\r\n        }\r\n\r\n        name = name.trim();\r\n        if (name === '') {\r\n            name = `<em>${reflection.kindString}</em>`;\r\n        }\r\n\r\n        return new NavigationItem(name, reflection.url, parent, reflection.cssClasses, reflection);\r\n    }\r\n}\r\n"]}