{"version":3,"file":"events.js","sourceRoot":"","sources":["../../../src/lib/output/events.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2BAA6B;AAE7B,0CAAwC;AAYxC;IAAmC,iCAAK;IAAxC;;IAoDA,CAAC;IAVU,uCAAe,GAAtB,UAAuB,OAAmB;QACtC,IAAM,KAAK,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC7C,KAAK,CAAC,OAAO,GAAQ,IAAI,CAAC,OAAO,CAAC;QAClC,KAAK,CAAC,QAAQ,GAAO,IAAI,CAAC,QAAQ,CAAC;QACnC,KAAK,CAAC,GAAG,GAAY,OAAO,CAAC,GAAG,CAAC;QACjC,KAAK,CAAC,KAAK,GAAU,OAAO,CAAC,KAAK,CAAC;QACnC,KAAK,CAAC,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC;QACtC,KAAK,CAAC,QAAQ,GAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QAClE,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAxBM,mBAAK,GAAG,aAAa,CAAC;IAMtB,iBAAG,GAAG,WAAW,CAAC;IAmB7B,oBAAC;CAAA,AApDD,CAAmC,cAAK,GAoDvC;AApDY,sCAAa;AA+D1B;IAA+B,6BAAK;IAApC;;IAgEA,CAAC;IAPU,eAAK,GAAG,WAAW,CAAC;IAMpB,aAAG,GAAG,SAAS,CAAC;IAC3B,gBAAC;CAAA,AAhED,CAA+B,cAAK,GAgEnC;AAhEY,8BAAS;AAwEtB;IAAmC,iCAAK;IAAxC;;IAgBA,CAAC;IADU,mBAAK,GAAG,eAAe,CAAC;IACnC,oBAAC;CAAA,AAhBD,CAAmC,cAAK,GAgBvC;AAhBY,sCAAa","sourcesContent":["import * as Path from 'path';\r\n\r\nimport { Event } from '../utils/events';\r\nimport { ProjectReflection } from '../models/reflections/project';\r\nimport { UrlMapping } from './models/UrlMapping';\r\nimport { NavigationItem } from './models/NavigationItem';\r\n\r\n/**\r\n * An event emitted by the [[Renderer]] class at the very beginning and\r\n * ending of the entire rendering process.\r\n *\r\n * @see [[Renderer.EVENT_BEGIN]]\r\n * @see [[Renderer.EVENT_END]]\r\n */\r\nexport class RendererEvent extends Event {\r\n    /**\r\n     * The project the renderer is currently processing.\r\n     */\r\n    project: ProjectReflection;\r\n\r\n    /**\r\n     * The settings that have been passed to TypeDoc.\r\n     */\r\n    settings: any;\r\n\r\n    /**\r\n     * The path of the directory the documentation should be written to.\r\n     */\r\n    outputDirectory: string;\r\n\r\n    /**\r\n     * A list of all pages that should be generated.\r\n     *\r\n     * This list can be altered during the [[Renderer.EVENT_BEGIN]] event.\r\n     */\r\n    urls: UrlMapping[];\r\n\r\n    /**\r\n     * Triggered before the renderer starts rendering a project.\r\n     * @event\r\n     */\r\n    static BEGIN = 'beginRender';\r\n\r\n    /**\r\n     * Triggered after the renderer has written all documents.\r\n     * @event\r\n     */\r\n    static END = 'endRender';\r\n\r\n    /**\r\n     * Create an [[PageEvent]] event based on this event and the given url mapping.\r\n     *\r\n     * @internal\r\n     * @param mapping  The mapping that defines the generated [[PageEvent]] state.\r\n     * @returns A newly created [[PageEvent]] instance.\r\n     */\r\n    public createPageEvent(mapping: UrlMapping): PageEvent {\r\n        const event = new PageEvent(PageEvent.BEGIN);\r\n        event.project      = this.project;\r\n        event.settings     = this.settings;\r\n        event.url          = mapping.url;\r\n        event.model        = mapping.model;\r\n        event.templateName = mapping.template;\r\n        event.filename     = Path.join(this.outputDirectory, mapping.url);\r\n        return event;\r\n    }\r\n}\r\n\r\n/**\r\n * An event emitted by the [[Renderer]] class before and after the\r\n * markup of a page is rendered.\r\n *\r\n * This object will be passed as the rendering context to handlebars templates.\r\n *\r\n * @see [[Renderer.EVENT_BEGIN_PAGE]]\r\n * @see [[Renderer.EVENT_END_PAGE]]\r\n */\r\nexport class PageEvent extends Event {\r\n    /**\r\n     * The project the renderer is currently processing.\r\n     */\r\n    project: ProjectReflection;\r\n\r\n    /**\r\n     * The settings that have been passed to TypeDoc.\r\n     */\r\n    settings: any;\r\n\r\n    /**\r\n     * The filename the page will be written to.\r\n     */\r\n    filename: string;\r\n\r\n    /**\r\n     * The url this page will be located at.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * The model that should be rendered on this page.\r\n     */\r\n    model: any;\r\n\r\n    /**\r\n     * The template that should be used to render this page.\r\n     */\r\n    template: HandlebarsTemplateDelegate;\r\n\r\n    /**\r\n     * The name of the template that should be used to render this page.\r\n     */\r\n    templateName: string;\r\n\r\n    /**\r\n     * The primary navigation structure of this page.\r\n     */\r\n    navigation: NavigationItem;\r\n\r\n    /**\r\n     * The table of contents structure of this page.\r\n     */\r\n    toc: NavigationItem;\r\n\r\n    /**\r\n     * The final html content of this page.\r\n     *\r\n     * Should be rendered by layout templates and can be modifies by plugins.\r\n     */\r\n    contents: string;\r\n\r\n    /**\r\n     * Triggered before a document will be rendered.\r\n     * @event\r\n     */\r\n    static BEGIN = 'beginPage';\r\n\r\n    /**\r\n     * Triggered after a document has been rendered, just before it is written to disc.\r\n     * @event\r\n     */\r\n    static END = 'endPage';\r\n}\r\n\r\n/**\r\n * An event emitted by the [[MarkedPlugin]] on the [[Renderer]] after a chunk of\r\n * markdown has been processed. Allows other plugins to manipulate the result.\r\n *\r\n * @see [[MarkedPlugin.EVENT_PARSE_MARKDOWN]]\r\n */\r\nexport class MarkdownEvent extends Event {\r\n    /**\r\n     * The unparsed original text.\r\n     */\r\n    originalText: string;\r\n\r\n    /**\r\n     * The parsed output.\r\n     */\r\n    parsedText: string;\r\n\r\n    /**\r\n     * Triggered on the renderer when this plugin parses a markdown string.\r\n     * @event\r\n     */\r\n    static PARSE = 'parseMarkdown';\r\n}\r\n"]}