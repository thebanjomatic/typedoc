{"version":3,"file":"application.js","sourceRoot":"","sources":["../../src/lib/application.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * The TypeDoc main module and namespace.\r\n *\r\n * The [[Application]] class holds the core logic of the cli application. All code related\r\n * to resolving reflections is stored in [[TypeDoc.Factories]], the actual data models can be found\r\n * in [[TypeDoc.Models]] and the final rendering is defined in [[TypeDoc.Output]].\r\n */\r\n\r\nimport * as Path from 'path';\r\nimport * as FS from 'fs';\r\nimport * as typescript from 'typescript';\r\nimport { Minimatch, IMinimatch } from 'minimatch';\r\n\r\nimport { Converter } from './converter/index';\r\nimport { Renderer } from './output/renderer';\r\nimport { ProjectReflection } from './models/index';\r\nimport { Logger, ConsoleLogger, CallbackLogger, PluginHost, writeFile } from './utils/index';\r\n\r\nimport { AbstractComponent, ChildableComponent, Component, Option } from './utils/component';\r\nimport { Options, OptionsReadMode, OptionsReadResult } from './utils/options/index';\r\nimport { ParameterType } from './utils/options/declaration';\r\n\r\n/**\r\n * The default TypeDoc main application class.\r\n *\r\n * This class holds the two main components of TypeDoc, the [[Dispatcher]] and\r\n * the [[Renderer]]. When running TypeDoc, first the [[Dispatcher]] is invoked which\r\n * generates a [[ProjectReflection]] from the passed in source files. The\r\n * [[ProjectReflection]] is a hierarchical model representation of the TypeScript\r\n * project. Afterwards the model is passed to the [[Renderer]] which uses an instance\r\n * of [[BaseTheme]] to generate the final documentation.\r\n *\r\n * Both the [[Dispatcher]] and the [[Renderer]] are subclasses of the [[EventDispatcher]]\r\n * and emit a series of events while processing the project. Subscribe to these Events\r\n * to control the application flow or alter the output.\r\n */\r\n@Component({name: 'application', internal: true})\r\nexport class Application extends ChildableComponent<Application, AbstractComponent<Application>> {\r\n    options: Options;\r\n\r\n    /**\r\n     * The converter used to create the declaration reflections.\r\n     */\r\n    converter: Converter;\r\n\r\n    /**\r\n     * The renderer used to generate the documentation output.\r\n     */\r\n    renderer: Renderer;\r\n\r\n    /**\r\n     * The logger that should be used to output messages.\r\n     */\r\n    logger: Logger;\r\n\r\n    plugins: PluginHost;\r\n\r\n    @Option({\r\n        name: 'logger',\r\n        help: 'Specify the logger that should be used, \\'none\\' or \\'console\\'',\r\n        defaultValue: 'console',\r\n        type: ParameterType.Mixed\r\n    })\r\n    loggerType: string|Function;\r\n\r\n    @Option({\r\n        name: 'ignoreCompilerErrors',\r\n        help: 'Should TypeDoc generate documentation pages even after the compiler has returned errors?',\r\n        type: ParameterType.Boolean\r\n    })\r\n    ignoreCompilerErrors: boolean;\r\n\r\n    @Option({\r\n        name: 'exclude',\r\n        help: 'Define a pattern for excluded files when specifying paths.',\r\n        type: ParameterType.String\r\n    })\r\n    exclude: string;\r\n\r\n    /**\r\n     * The version number of TypeDoc.\r\n     */\r\n    static VERSION = '{{ VERSION }}';\r\n\r\n    /**\r\n     * Create a new TypeDoc application instance.\r\n     *\r\n     * @param options An object containing the options that should be used.\r\n     */\r\n    constructor(options?: Object) {\r\n        super(null);\r\n\r\n        this.logger    = new ConsoleLogger();\r\n        this.converter = this.addComponent<Converter>('converter', Converter);\r\n        this.renderer  = this.addComponent<Renderer>('renderer', Renderer);\r\n        this.plugins   = this.addComponent('plugins', PluginHost);\r\n        this.options   = this.addComponent('options', Options);\r\n\r\n        this.bootstrap(options);\r\n    }\r\n\r\n    /**\r\n     * Initialize TypeDoc with the given options object.\r\n     *\r\n     * @param options  The desired options to set.\r\n     */\r\n    protected bootstrap(options?: Object): OptionsReadResult {\r\n        this.options.read(options, OptionsReadMode.Prefetch);\r\n\r\n        const logger = this.loggerType;\r\n        if (typeof logger === 'function') {\r\n            this.logger = new CallbackLogger(<any> logger);\r\n        } else if (logger === 'none') {\r\n            this.logger = new Logger();\r\n        }\r\n\r\n        this.plugins.load();\r\n        return this.options.read(options, OptionsReadMode.Fetch);\r\n    }\r\n\r\n    /**\r\n     * Return the application / root component instance.\r\n     */\r\n    get application(): Application {\r\n        return this;\r\n    }\r\n\r\n    get isCLI(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Return the path to the TypeScript compiler.\r\n     */\r\n    public getTypeScriptPath(): string {\r\n        return Path.dirname(require.resolve('typescript'));\r\n    }\r\n\r\n    public getTypeScriptVersion(): string {\r\n        const tsPath = this.getTypeScriptPath();\r\n        const json = JSON.parse(FS.readFileSync(Path.join(tsPath, '..', 'package.json'), 'utf8'));\r\n        return json.version;\r\n    }\r\n\r\n    /**\r\n     * Run the converter for the given set of files and return the generated reflections.\r\n     *\r\n     * @param src  A list of source that should be compiled and converted.\r\n     * @returns An instance of ProjectReflection on success, NULL otherwise.\r\n     */\r\n    public convert(src: string[]): ProjectReflection {\r\n        this.logger.writeln('Using TypeScript %s from %s', this.getTypeScriptVersion(), this.getTypeScriptPath());\r\n\r\n        const result = this.converter.convert(src);\r\n        if (result.errors && result.errors.length) {\r\n            this.logger.diagnostics(result.errors);\r\n            if (this.ignoreCompilerErrors) {\r\n                this.logger.resetErrors();\r\n                return result.project;\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return result.project;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param src  A list of source files whose documentation should be generated.\r\n     */\r\n    public generateDocs(src: string[], out: string): boolean;\r\n\r\n    /**\r\n     * @param project  The project the documentation should be generated for.\r\n     */\r\n    public generateDocs(project: ProjectReflection, out: string): boolean;\r\n\r\n    /**\r\n     * Run the documentation generator for the given set of files.\r\n     *\r\n     * @param out  The path the documentation should be written to.\r\n     * @returns TRUE if the documentation could be generated successfully, otherwise FALSE.\r\n     */\r\n    public generateDocs(input: any, out: string): boolean {\r\n        const project = input instanceof ProjectReflection ? input : this.convert(input);\r\n        if (!project) {\r\n            return false;\r\n        }\r\n\r\n        out = Path.resolve(out);\r\n        this.renderer.render(project, out);\r\n        if (this.logger.hasErrors()) {\r\n            this.logger.error('Documentation could not be generated due to the errors above.');\r\n        } else {\r\n            this.logger.success('Documentation generated at %s', out);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param src  A list of source that should be compiled and converted.\r\n     */\r\n    public generateJson(src: string[], out: string): boolean;\r\n\r\n    /**\r\n     * @param project  The project that should be converted.\r\n     */\r\n    public generateJson(project: ProjectReflection, out: string): boolean;\r\n\r\n    /**\r\n     * Run the converter for the given set of files and write the reflections to a json file.\r\n     *\r\n     * @param out  The path and file name of the target file.\r\n     * @returns TRUE if the json file could be written successfully, otherwise FALSE.\r\n     */\r\n    public generateJson(input: any, out: string): boolean {\r\n        const project = input instanceof ProjectReflection ? input : this.convert(input);\r\n        if (!project) {\r\n            return false;\r\n        }\r\n\r\n        out = Path.resolve(out);\r\n        writeFile(out, JSON.stringify(project.toObject(), null, '\\t'), false);\r\n        this.logger.success('JSON written to %s', out);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Expand a list of input files.\r\n     *\r\n     * Searches for directories in the input files list and replaces them with a\r\n     * listing of all TypeScript files within them. One may use the ```--exclude``` option\r\n     * to filter out files with a pattern.\r\n     *\r\n     * @param inputFiles  The list of files that should be expanded.\r\n     * @returns  The list of input files with expanded directories.\r\n     */\r\n    public expandInputFiles(inputFiles?: string[]): string[] {\r\n        let exclude: IMinimatch, files: string[] = [];\r\n        if (this.exclude) {\r\n            exclude = new Minimatch(this.exclude);\r\n        }\r\n\r\n        function add(dirname: string) {\r\n            FS.readdirSync(dirname).forEach((file) => {\r\n                const realpath = Path.join(dirname, file);\r\n                if (FS.statSync(realpath).isDirectory()) {\r\n                    add(realpath);\r\n                } else if (/\\.tsx?$/.test(realpath)) {\r\n                    if (exclude && exclude.match(realpath.replace(/\\\\/g, '/'))) {\r\n                        return;\r\n                    }\r\n\r\n                    files.push(realpath);\r\n                }\r\n            });\r\n        }\r\n\r\n        inputFiles.forEach((file) => {\r\n            file = Path.resolve(file);\r\n            if (FS.statSync(file).isDirectory()) {\r\n                add(file);\r\n            } else if (!exclude || !exclude.match(file)) {\r\n                files.push(file);\r\n            }\r\n        });\r\n\r\n        return files;\r\n    }\r\n\r\n    /**\r\n     * Print the version number.\r\n     */\r\n    public toString() {\r\n        return [\r\n            '',\r\n            'TypeDoc ' + Application.VERSION,\r\n            'Using TypeScript ' + this.getTypeScriptVersion() + ' from ' + this.getTypeScriptPath(),\r\n            ''\r\n        ].join(typescript.sys.newLine);\r\n    }\r\n}\r\n"]}