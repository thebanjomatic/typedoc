{"version":3,"file":"compiler-host.js","sourceRoot":"","sources":["../../../../src/lib/converter/utils/compiler-host.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,+BAAiC;AACjC,uCAAyC;AAEzC,4CAAmD;AAKnD,IAAM,+BAA+B,GAAG,CAAC,UAAU,CAAC;AAKpD;IAAkC,gCAAkB;IAApD;;IA6IA,CAAC;IA5HG,oCAAa,GAAb,UAAc,QAAgB,EAAE,eAAgC,EAAE,OAAmC;QACjG,IAAI,IAAY,CAAC;QACjB,IAAI;YACA,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,OAAO,CAAC,CAAC;SAC3F;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,OAAO,EAAE;gBACT,OAAO,CAAC,CAAC,CAAC,MAAM,KAAK,+BAA+B,CAAC,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;aACnG;YACD,IAAI,GAAG,EAAE,CAAC;SACb;QAED,OAAO,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACjG,CAAC;IASD,4CAAqB,GAArB,UAAsB,OAA2B;QAC7C,IAAM,WAAW,GAAG,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,GAAG,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;QAC3F,OAAO,GAAG,CAAC,YAAY,CAAC,WAAW,EAAE,EAAE,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED,qCAAc,GAAd,UAAe,IAAY;QACvB,OAAO,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IASD,0CAAmB,GAAnB;QACI,OAAO,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC,GAAG,CAAC,mBAAmB,EAAE,CAAC,CAAC;IAC3F,CAAC;IASD,gDAAyB,GAAzB;QACI,OAAO,EAAE,CAAC,GAAG,CAAC,yBAAyB,CAAC;IAC5C,CAAC;IAUD,iCAAU,GAAV,UAAW,QAAgB;QACvB,OAAO,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAUD,sCAAe,GAAf,UAAgB,aAAqB;QACjC,OAAO,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;IACjD,CAAC;IAUD,+BAAQ,GAAR,UAAS,QAAgB;QACrB,OAAO,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAUD,2CAAoB,GAApB,UAAqB,QAAgB;QACjC,OAAO,EAAE,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;IAChF,CAAC;IASD,iCAAU,GAAV;QACI,OAAO,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC;IAC1B,CAAC;IAcD,gCAAS,GAAT,UAAU,QAAgB,EAAE,IAAY,EAAE,kBAA2B,EAAE,OAAmC,IAAI,CAAC;IACnH,mBAAC;AAAD,CAAC,AA7ID,CAAkC,+BAAkB,GA6InD;AA7IY,oCAAY","sourcesContent":["import * as ts from 'typescript';\r\nimport * as _ts from '../../ts-internal';\r\n\r\nimport { ConverterComponent } from '../components';\r\n\r\n/**\r\n * Return code of ts.sys.readFile when the file encoding is unsupported.\r\n */\r\nconst ERROR_UNSUPPORTED_FILE_ENCODING = -2147024809;\r\n\r\n/**\r\n * CompilerHost implementation\r\n */\r\nexport class CompilerHost extends ConverterComponent implements ts.CompilerHost {\r\n\r\n    /**\r\n     * The full path of the current directory. Result cache of [[getCurrentDirectory]].\r\n     */\r\n    private currentDirectory: string;\r\n\r\n    /**\r\n     * Return an instance of ts.SourceFile representing the given file.\r\n     *\r\n     * Implementation of ts.CompilerHost.getSourceFile()\r\n     *\r\n     * @param filename  The path and name of the file that should be loaded.\r\n     * @param languageVersion  The script target the file should be interpreted with.\r\n     * @param onError  A callback that will be invoked if an error occurs.\r\n     * @returns An instance of ts.SourceFile representing the given file.\r\n     */\r\n    getSourceFile(filename: string, languageVersion: ts.ScriptTarget, onError?: (message: string) => void): ts.SourceFile {\r\n        let text: string;\r\n        try {\r\n            text = ts.sys.readFile(filename, this.application.options.getCompilerOptions().charset);\r\n        } catch (e) {\r\n            if (onError) {\r\n                onError(e.number === ERROR_UNSUPPORTED_FILE_ENCODING ? 'Unsupported file encoding' : e.message);\r\n            }\r\n            text = '';\r\n        }\r\n\r\n        return text !== undefined ? ts.createSourceFile(filename, text, languageVersion) : undefined;\r\n    }\r\n\r\n    /**\r\n     * Return the full path of the default library that should be used.\r\n     *\r\n     * Implementation of ts.CompilerHost.getDefaultLibFilename()\r\n     *\r\n     * @returns The full path of the default library.\r\n     */\r\n    getDefaultLibFileName(options: ts.CompilerOptions): string {\r\n        const libLocation = _ts.getDirectoryPath(_ts.normalizePath(ts.sys.getExecutingFilePath()));\r\n        return _ts.combinePaths(libLocation, ts.getDefaultLibFileName(options));\r\n    }\r\n\r\n    getDirectories(path: string): string[] {\r\n        return ts.sys.getDirectories(path);\r\n    }\r\n\r\n    /**\r\n     * Return the full path of the current directory.\r\n     *\r\n     * Implementation of ts.CompilerHost.getCurrentDirectory()\r\n     *\r\n     * @returns The full path of the current directory.\r\n     */\r\n    getCurrentDirectory(): string {\r\n        return this.currentDirectory || (this.currentDirectory = ts.sys.getCurrentDirectory());\r\n    }\r\n\r\n    /**\r\n     * Return whether file names are case sensitive on the current platform or not.\r\n     *\r\n     * Implementation of ts.CompilerHost.useCaseSensitiveFileNames()\r\n     *\r\n     * @returns TRUE if file names are case sensitive on the current platform, FALSE otherwise.\r\n     */\r\n    useCaseSensitiveFileNames(): boolean {\r\n        return ts.sys.useCaseSensitiveFileNames;\r\n    }\r\n\r\n    /**\r\n     * Check whether the given file exists.\r\n     *\r\n     * Implementation of ts.CompilerHost.fileExists(fileName)\r\n     *\r\n     * @param fileName\r\n     * @returns {boolean}\r\n     */\r\n    fileExists(fileName: string): boolean {\r\n        return ts.sys.fileExists(fileName);\r\n    }\r\n\r\n    /**\r\n     * Check whether the given directory exists.\r\n     *\r\n     * Implementation of ts.CompilerHost.directoryExists(directoryName)\r\n     *\r\n     * @param directoryName\r\n     * @returns {boolean}\r\n     */\r\n    directoryExists(directoryName: string): boolean {\r\n        return ts.sys.directoryExists(directoryName);\r\n    }\r\n\r\n    /**\r\n     * Return the contents of the given file.\r\n     *\r\n     * Implementation of ts.CompilerHost.readFile(fileName)\r\n     *\r\n     * @param fileName\r\n     * @returns {string}\r\n     */\r\n    readFile(fileName: string): string {\r\n        return ts.sys.readFile(fileName);\r\n    }\r\n\r\n    /**\r\n     * Return the canonical file name of the given file.\r\n     *\r\n     * Implementation of ts.CompilerHost.getCanonicalFileName()\r\n     *\r\n     * @param fileName  The file name whose canonical variant should be resolved.\r\n     * @returns The canonical file name of the given file.\r\n     */\r\n    getCanonicalFileName(fileName: string): string {\r\n        return ts.sys.useCaseSensitiveFileNames ? fileName : fileName.toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Return the new line char sequence of the current platform.\r\n     *\r\n     * Implementation of ts.CompilerHost.getNewLine()\r\n     *\r\n     * @returns The new line char sequence of the current platform.\r\n     */\r\n    getNewLine(): string {\r\n        return ts.sys.newLine;\r\n    }\r\n\r\n    /**\r\n     * Write a compiled javascript file to disc.\r\n     *\r\n     * As TypeDoc will not emit compiled javascript files this is a null operation.\r\n     *\r\n     * Implementation of ts.CompilerHost.writeFile()\r\n     *\r\n     * @param fileName  The name of the file that should be written.\r\n     * @param data  The contents of the file.\r\n     * @param writeByteOrderMark  Whether the UTF-8 BOM should be written or not.\r\n     * @param onError  A callback that will be invoked if an error occurs.\r\n     */\r\n    writeFile(fileName: string, data: string, writeByteOrderMark: boolean, onError?: (message: string) => void) { }\r\n}\r\n"]}