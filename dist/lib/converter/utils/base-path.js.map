{"version":3,"file":"base-path.js","sourceRoot":"","sources":["../../../../src/lib/converter/utils/base-path.ts"],"names":[],"mappings":";;AAAA,2BAA6B;AAQ7B;IAAA;QAIY,cAAS,GAAa,EAAE,CAAC;IAiFrC,CAAC;IA1EG,sBAAG,GAAH,UAAI,QAAgB;QAChB,IAAM,OAAO,GAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5D,IAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEpC,SAAS,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC9D,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9C,IAAM,IAAI,GAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC5D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;gBAC3B,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE;oBAC7B,SAAS;iBACZ;gBAED,IAAI,CAAC,GAAG,CAAC,EAAE;oBAEP,SAAS,SAAS,CAAC;iBACtB;qBAAM;oBAEH,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE;wBACrB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBACtD;oBACD,OAAO;iBACV;aACJ;YAGD,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvD,OAAO;SACV;QAGD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAQD,uBAAI,GAAJ,UAAK,QAAgB;QACjB,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACnD,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,QAAQ,EAAE;gBAClD,OAAO,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aAC/C;SACJ;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAKD,wBAAK,GAAL;QACI,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACxB,CAAC;IAQM,kBAAS,GAAhB,UAAiB,IAAY;QAEzB,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAGhC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;QAG1C,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,UAAC,CAAC,EAAE,EAAE,IAAK,OAAA,EAAE,CAAC,WAAW,EAAE,GAAG,IAAI,EAAvB,CAAuB,CAAC,CAAC;IAC7E,CAAC;IACL,eAAC;AAAD,CAAC,AArFD,IAqFC;AArFY,4BAAQ","sourcesContent":["import * as Path from 'path';\r\n\r\n/**\r\n * Helper class that determines the common base path of a set of files.\r\n *\r\n * In the first step all files must be passed to [[add]]. Afterwards [[trim]]\r\n * can be used to retrieve the shortest path relative to the determined base path.\r\n */\r\nexport class BasePath {\r\n    /**\r\n     * List of known base paths.\r\n     */\r\n    private basePaths: string[] = [];\r\n\r\n    /**\r\n     * Add the given file path to this set of base paths.\r\n     *\r\n     * @param fileName  The absolute filename that should be added to the base path.\r\n     */\r\n    add(fileName: string) {\r\n        const fileDir  = Path.dirname(BasePath.normalize(fileName));\r\n        const filePath = fileDir.split('/');\r\n\r\n        basePaths: for (let n = 0, c = this.basePaths.length; n < c; n++) {\r\n            const basePath = this.basePaths[n].split('/');\r\n            const mMax     = Math.min(basePath.length, filePath.length);\r\n            for (let m = 0; m < mMax; m++) {\r\n                if (basePath[m] === filePath[m]) {\r\n                    continue;\r\n                }\r\n\r\n                if (m < 1) {\r\n                    // No match at all, try next known base path\r\n                    continue basePaths;\r\n                } else {\r\n                    // Partial match, trim the known base path\r\n                    if (m < basePath.length) {\r\n                        this.basePaths[n] = basePath.slice(0, m).join('/');\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Complete match, exit\r\n            this.basePaths[n] = basePath.splice(0, mMax).join('/');\r\n            return;\r\n        }\r\n\r\n        // Unknown base path, add it\r\n        this.basePaths.push(fileDir);\r\n    }\r\n\r\n    /**\r\n     * Trim the given filename by the determined base paths.\r\n     *\r\n     * @param fileName  The absolute filename that should be trimmed.\r\n     * @returns The trimmed version of the filename.\r\n     */\r\n    trim(fileName: string): string {\r\n        fileName = BasePath.normalize(fileName);\r\n        for (let n = 0, c = this.basePaths.length; n < c; n++) {\r\n            const basePath = this.basePaths[n];\r\n            if (fileName.substr(0, basePath.length) === basePath) {\r\n                return fileName.substr(basePath.length + 1);\r\n            }\r\n        }\r\n\r\n        return fileName;\r\n    }\r\n\r\n    /**\r\n     * Reset this instance, ignore all paths already passed to [[add]].\r\n     */\r\n    reset() {\r\n        this.basePaths = [];\r\n    }\r\n\r\n    /**\r\n     * Normalize the given path.\r\n     *\r\n     * @param path  The path that should be normalized.\r\n     * @returns Normalized version of the given path.\r\n     */\r\n    static normalize(path: string): string {\r\n        // Ensure forward slashes\r\n        path = path.replace(/\\\\/g, '/');\r\n\r\n        // Remove all surrounding quotes\r\n        path = path.replace(/^[\"']+|[\"']+$/g, '');\r\n\r\n        // Make Windows drive letters lower case\r\n        return path.replace(/^([^\\:]+)\\:\\//, (m, m1) => m1.toUpperCase() + ':/');\r\n    }\r\n}\r\n"]}