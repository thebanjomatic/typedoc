{"version":3,"file":"DecoratorPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/DecoratorPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\nimport * as _ts from '../../ts-internal';\r\n\r\nimport { ReferenceType } from '../../models/types/index';\r\nimport { Reflection, Decorator } from '../../models/reflections/index';\r\nimport { Component, ConverterComponent } from '../components';\r\nimport { Converter } from '../converter';\r\nimport { Context } from '../context';\r\n\r\n/**\r\n * A plugin that detects decorators.\r\n */\r\n@Component({name: 'decorator'})\r\nexport class DecoratorPlugin extends ConverterComponent {\r\n    private usages: {[symbolID: number]: ReferenceType[]};\r\n\r\n    /**\r\n     * Create a new ImplementsPlugin instance.\r\n     */\r\n    initialize() {\r\n        this.listenTo(this.owner, {\r\n            [Converter.EVENT_BEGIN]:              this.onBegin,\r\n            [Converter.EVENT_CREATE_DECLARATION]: this.onDeclaration,\r\n            [Converter.EVENT_CREATE_PARAMETER]:   this.onDeclaration,\r\n            [Converter.EVENT_RESOLVE]:            this.onBeginResolve\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create an object describing the arguments a decorator is set with.\r\n     *\r\n     * @param args  The arguments resolved from the decorator's call expression.\r\n     * @param signature  The signature definition of the decorator being used.\r\n     * @returns An object describing the decorator parameters,\r\n     */\r\n    private extractArguments(args: ts.NodeArray<ts.Expression>, signature: ts.Signature): any {\r\n        const result = {};\r\n        args.forEach((arg: ts.Expression, index: number) => {\r\n            if (index < signature.parameters.length) {\r\n                const parameter = signature.parameters[index];\r\n                result[parameter.name] = _ts.getTextOfNode(arg);\r\n            } else {\r\n                if (!result['...']) {\r\n                    result['...'] = [];\r\n                }\r\n                result['...'].push(_ts.getTextOfNode(arg));\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter begins converting a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onBegin(context: Context) {\r\n        this.usages = {};\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter has created a declaration or signature reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently processed.\r\n     * @param node  The node that is currently processed if available.\r\n     */\r\n    private onDeclaration(context: Context, reflection: Reflection, node?: ts.Node) {\r\n        if (!node || !node.decorators) {\r\n            return;\r\n        }\r\n        node.decorators.forEach((decorator: ts.Decorator) => {\r\n            let callExpression: ts.CallExpression;\r\n            let identifier: ts.Expression;\r\n\r\n            switch (decorator.expression.kind) {\r\n                case ts.SyntaxKind.Identifier:\r\n                    identifier = decorator.expression;\r\n                    break;\r\n                case ts.SyntaxKind.CallExpression:\r\n                    callExpression = <ts.CallExpression> decorator.expression;\r\n                    identifier = callExpression.expression;\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n\r\n            const info: Decorator = {\r\n                name: _ts.getTextOfNode(identifier)\r\n            };\r\n\r\n            const type = context.checker.getTypeAtLocation(identifier);\r\n            if (type && type.symbol) {\r\n                const symbolID = context.getSymbolID(type.symbol);\r\n                info.type = new ReferenceType(info.name, symbolID);\r\n\r\n                if (callExpression && callExpression.arguments) {\r\n                    const signature = context.checker.getResolvedSignature(callExpression);\r\n                    if (signature) {\r\n                        info.arguments = this.extractArguments(callExpression.arguments, signature);\r\n                    }\r\n                }\r\n\r\n                if (!this.usages[symbolID]) {\r\n                    this.usages[symbolID] = [];\r\n                }\r\n                this.usages[symbolID].push(new ReferenceType(reflection.name, ReferenceType.SYMBOL_ID_RESOLVED, reflection));\r\n            }\r\n\r\n            if (!reflection.decorators) {\r\n                reflection.decorators = [];\r\n            }\r\n            reflection.decorators.push(info);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter resolves a reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently resolved.\r\n     */\r\n    private onBeginResolve(context: Context) {\r\n        for (let symbolID in this.usages) {\r\n            if (!this.usages.hasOwnProperty(symbolID)) {\r\n                continue;\r\n            }\r\n\r\n            const id = context.project.symbolMapping[symbolID];\r\n            if (!id) {\r\n                continue;\r\n            }\r\n\r\n            const reflection = context.project.reflections[id];\r\n            if (reflection) {\r\n                reflection.decorates = this.usages[symbolID];\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}