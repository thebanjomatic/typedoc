{"version":3,"file":"DeepCommentPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/DeepCommentPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Reflection, SignatureReflection, ProjectReflection, TypeParameterReflection } from '../../models/reflections/index';\r\nimport { Comment, CommentTag } from '../../models/comments/index';\r\nimport { Component, ConverterComponent } from '../components';\r\nimport { Converter } from '../converter';\r\nimport { Context } from '../context';\r\n\r\n/**\r\n * A handler that moves comments with dot syntax to their target.\r\n */\r\n@Component({name: 'deep-comment'})\r\nexport class DeepCommentPlugin extends ConverterComponent {\r\n    /**\r\n     * Create a new CommentHandler instance.\r\n     */\r\n    initialize() {\r\n        this.listenTo(this.owner, Converter.EVENT_RESOLVE_BEGIN, this.onBeginResolve, 512);\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter begins resolving a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onBeginResolve(context: Context) {\r\n        const project = context.project;\r\n        let name: string;\r\n        for (let key in project.reflections) {\r\n            const reflection = project.reflections[key];\r\n            if (!reflection.comment) {\r\n                findDeepComment(reflection);\r\n            }\r\n        }\r\n\r\n        function push(parent: Reflection) {\r\n            let part = parent.originalName;\r\n            if (!part || part.substr(0, 2) === '__' || parent instanceof SignatureReflection) {\r\n                part = '';\r\n            }\r\n\r\n            if (part && part !== '') {\r\n                name = (name === '' ? part : part + '.' + name);\r\n            }\r\n        }\r\n\r\n        function findDeepComment(reflection: Reflection) {\r\n            name = '';\r\n            push(reflection);\r\n            let target = reflection.parent;\r\n\r\n            while (target && !(target instanceof ProjectReflection)) {\r\n                push(target);\r\n                if (target.comment) {\r\n                    let tag: CommentTag;\r\n                    if (reflection instanceof TypeParameterReflection) {\r\n                        tag = target.comment.getTag('typeparam', reflection.name);\r\n                        if (!tag) {\r\n                            tag = target.comment.getTag('param', '<' + reflection.name + '>');\r\n                        }\r\n                    }\r\n\r\n                    if (!tag) {\r\n                        tag = target.comment.getTag('param', name);\r\n                    }\r\n\r\n                    if (tag) {\r\n                        target.comment.tags.splice(target.comment.tags.indexOf(tag), 1);\r\n                        reflection.comment = new Comment('', tag.text);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                target = target.parent;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}