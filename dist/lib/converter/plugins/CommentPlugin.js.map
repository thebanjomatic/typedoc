{"version":3,"file":"CommentPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/CommentPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Comment, CommentTag } from '../../models/comments/index';\r\nimport { IntrinsicType } from '../../models/types/index';\r\nimport { Reflection, ReflectionFlag, ReflectionKind, TraverseProperty,\r\n    TypeParameterReflection, DeclarationReflection, ProjectReflection,\r\n    SignatureReflection, ParameterReflection } from '../../models/reflections/index';\r\nimport { Component, ConverterComponent } from '../components';\r\nimport { parseComment, getRawComment } from '../factories/comment';\r\nimport { Converter } from '../converter';\r\nimport { Context } from '../context';\r\n\r\n/**\r\n * Structure used by [[ContainerCommentHandler]] to store discovered module comments.\r\n */\r\ninterface ModuleComment {\r\n    /**\r\n     * The module reflection this comment is targeting.\r\n     */\r\n    reflection: Reflection;\r\n\r\n    /**\r\n     * The full text of the best matched comment.\r\n     */\r\n    fullText: string;\r\n\r\n    /**\r\n     * Has the full text been marked as being preferred?\r\n     */\r\n    isPreferred: boolean;\r\n}\r\n\r\n/**\r\n * A handler that parses javadoc comments and attaches [[Models.Comment]] instances to\r\n * the generated reflections.\r\n */\r\n@Component({name: 'comment'})\r\nexport class CommentPlugin extends ConverterComponent {\r\n    /**\r\n     * List of discovered module comments.\r\n     */\r\n    private comments: {[id: number]: ModuleComment};\r\n\r\n    /**\r\n     * List of hidden reflections.\r\n     */\r\n    private hidden: Reflection[];\r\n\r\n    /**\r\n     * Create a new CommentPlugin instance.\r\n     */\r\n    initialize() {\r\n        this.listenTo(this.owner, {\r\n            [Converter.EVENT_BEGIN]:                   this.onBegin,\r\n            [Converter.EVENT_CREATE_DECLARATION]:      this.onDeclaration,\r\n            [Converter.EVENT_CREATE_SIGNATURE]:        this.onDeclaration,\r\n            [Converter.EVENT_CREATE_TYPE_PARAMETER]:   this.onCreateTypeParameter,\r\n            [Converter.EVENT_FUNCTION_IMPLEMENTATION]: this.onFunctionImplementation,\r\n            [Converter.EVENT_RESOLVE_BEGIN]:           this.onBeginResolve,\r\n            [Converter.EVENT_RESOLVE]:                 this.onResolve\r\n        });\r\n    }\r\n\r\n    private storeModuleComment(comment: string, reflection: Reflection) {\r\n        const isPreferred = (comment.toLowerCase().indexOf('@preferred') !== -1);\r\n\r\n        if (this.comments[reflection.id]) {\r\n            const info = this.comments[reflection.id];\r\n            if (!isPreferred && (info.isPreferred || info.fullText.length > comment.length)) {\r\n                return;\r\n            }\r\n\r\n            info.fullText    = comment;\r\n            info.isPreferred = isPreferred;\r\n        } else {\r\n            this.comments[reflection.id] = {\r\n                reflection:  reflection,\r\n                fullText:    comment,\r\n                isPreferred: isPreferred\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply all comment tag modifiers to the given reflection.\r\n     *\r\n     * @param reflection  The reflection the modifiers should be applied to.\r\n     * @param comment  The comment that should be searched for modifiers.\r\n     */\r\n    private applyModifiers(reflection: Reflection, comment: Comment) {\r\n        if (comment.hasTag('private')) {\r\n            reflection.setFlag(ReflectionFlag.Private);\r\n            CommentPlugin.removeTags(comment, 'private');\r\n        }\r\n\r\n        if (comment.hasTag('protected')) {\r\n            reflection.setFlag(ReflectionFlag.Protected);\r\n            CommentPlugin.removeTags(comment, 'protected');\r\n        }\r\n\r\n        if (comment.hasTag('public')) {\r\n            reflection.setFlag(ReflectionFlag.Public);\r\n            CommentPlugin.removeTags(comment, 'public');\r\n        }\r\n\r\n        if (comment.hasTag('event')) {\r\n            reflection.kind = ReflectionKind.Event;\r\n            // reflection.setFlag(ReflectionFlag.Event);\r\n            CommentPlugin.removeTags(comment, 'event');\r\n        }\r\n\r\n        if (comment.hasTag('hidden')) {\r\n            if (!this.hidden) {\r\n                this.hidden = [];\r\n            }\r\n            this.hidden.push(reflection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter begins converting a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onBegin(context: Context) {\r\n        this.comments = {};\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter has created a type parameter reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently processed.\r\n     * @param node  The node that is currently processed if available.\r\n     */\r\n    private onCreateTypeParameter(context: Context, reflection: TypeParameterReflection, node?: ts.Node) {\r\n        const comment = reflection.parent.comment;\r\n        if (comment) {\r\n            let tag = comment.getTag('typeparam', reflection.name);\r\n            if (!tag) {\r\n                tag = comment.getTag('param', `<${reflection.name}>`);\r\n            }\r\n            if (!tag) {\r\n                tag = comment.getTag('param', reflection.name);\r\n            }\r\n\r\n            if (tag) {\r\n                reflection.comment = new Comment(tag.text);\r\n                comment.tags.splice(comment.tags.indexOf(tag), 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter has created a declaration or signature reflection.\r\n     *\r\n     * Invokes the comment parser.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently processed.\r\n     * @param node  The node that is currently processed if available.\r\n     */\r\n    private onDeclaration(context: Context, reflection: Reflection, node?: ts.Node) {\r\n        if (!node) {\r\n            return;\r\n        }\r\n        const rawComment = getRawComment(node);\r\n        if (!rawComment) {\r\n            return;\r\n        }\r\n\r\n        if (reflection.kindOf(ReflectionKind.FunctionOrMethod) || (reflection.kindOf(ReflectionKind.Event) && reflection['signatures'])) {\r\n            const comment = parseComment(rawComment, reflection.comment);\r\n            this.applyModifiers(reflection, comment);\r\n        } else if (reflection.kindOf(ReflectionKind.Module)) {\r\n            this.storeModuleComment(rawComment, reflection);\r\n        } else {\r\n            const comment = parseComment(rawComment, reflection.comment);\r\n            this.applyModifiers(reflection, comment);\r\n            reflection.comment = comment;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter has found a function implementation.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently processed.\r\n     * @param node  The node that is currently processed if available.\r\n     */\r\n    private onFunctionImplementation(context: Context, reflection: Reflection, node?: ts.Node) {\r\n        if (!node) {\r\n            return;\r\n        }\r\n\r\n        const comment = getRawComment(node);\r\n        if (comment) {\r\n            reflection.comment = parseComment(comment, reflection.comment);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter begins resolving a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onBeginResolve(context: Context) {\r\n        for (let id in this.comments) {\r\n            if (!this.comments.hasOwnProperty(id)) {\r\n                continue;\r\n            }\r\n\r\n            const info    = this.comments[id];\r\n            const comment = parseComment(info.fullText);\r\n            CommentPlugin.removeTags(comment, 'preferred');\r\n\r\n            this.applyModifiers(info.reflection, comment);\r\n            info.reflection.comment = comment;\r\n        }\r\n\r\n        if (this.hidden) {\r\n            const project = context.project;\r\n            this.hidden.forEach((reflection) => {\r\n                CommentPlugin.removeReflection(project, reflection);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter resolves a reflection.\r\n     *\r\n     * Cleans up comment tags related to signatures like @param or @return\r\n     * and moves their data to the corresponding parameter reflections.\r\n     *\r\n     * This hook also copies over the comment of function implementations to their\r\n     * signatures.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently resolved.\r\n     */\r\n    private onResolve(context: Context, reflection: DeclarationReflection) {\r\n        if (!(reflection instanceof DeclarationReflection)) {\r\n            return;\r\n        }\r\n\r\n        const signatures = reflection.getAllSignatures();\r\n        if (signatures.length) {\r\n            const comment = reflection.comment;\r\n            if (comment && comment.hasTag('returns')) {\r\n                comment.returns = comment.getTag('returns').text;\r\n                CommentPlugin.removeTags(comment, 'returns');\r\n            }\r\n\r\n            signatures.forEach((signature) => {\r\n                let childComment = signature.comment;\r\n                if (childComment && childComment.hasTag('returns')) {\r\n                    childComment.returns = childComment.getTag('returns').text;\r\n                    CommentPlugin.removeTags(childComment, 'returns');\r\n                }\r\n\r\n                if (comment) {\r\n                    if (!childComment) {\r\n                        childComment = signature.comment = new Comment();\r\n                    }\r\n\r\n                    childComment.shortText = childComment.shortText || comment.shortText;\r\n                    childComment.text      = childComment.text      || comment.text;\r\n                    childComment.returns   = childComment.returns   || comment.returns;\r\n                }\r\n\r\n                if (signature.parameters) {\r\n                    signature.parameters.forEach((parameter) => {\r\n                        let tag: CommentTag;\r\n                        if (childComment) {\r\n                            tag = childComment.getTag('param', parameter.name);\r\n                        }\r\n                        if (comment && !tag) {\r\n                            tag = comment.getTag('param', parameter.name);\r\n                        }\r\n                        if (tag) {\r\n                            parameter.comment = new Comment(tag.text);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                CommentPlugin.removeTags(childComment, 'param');\r\n            });\r\n\r\n            CommentPlugin.removeTags(comment, 'param');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all tags with the given name from the given comment instance.\r\n     *\r\n     * @param comment  The comment that should be modified.\r\n     * @param tagName  The name of the that that should be removed.\r\n     */\r\n    static removeTags(comment: Comment, tagName: string) {\r\n        if (!comment || !comment.tags) {\r\n            return;\r\n        }\r\n\r\n        let i = 0, c = comment.tags.length;\r\n        while (i < c) {\r\n            if (comment.tags[i].tagName === tagName) {\r\n                comment.tags.splice(i, 1);\r\n                c--;\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove the given reflection from the project.\r\n     */\r\n    static removeReflection(project: ProjectReflection, reflection: Reflection) {\r\n        reflection.traverse((child) => CommentPlugin.removeReflection(project, child));\r\n\r\n        const parent = <DeclarationReflection> reflection.parent;\r\n        parent.traverse((child: Reflection, property: TraverseProperty) => {\r\n            if (child === reflection) {\r\n                switch (property) {\r\n                    case TraverseProperty.Children:\r\n                        if (parent.children) {\r\n                            const index = parent.children.indexOf(<DeclarationReflection> reflection);\r\n                            if (index !== -1) {\r\n                                parent.children.splice(index, 1);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case TraverseProperty.GetSignature:\r\n                        delete parent.getSignature;\r\n                        break;\r\n                    case TraverseProperty.IndexSignature:\r\n                        delete parent.indexSignature;\r\n                        break;\r\n                    case TraverseProperty.Parameters:\r\n                        if ((<SignatureReflection> reflection.parent).parameters) {\r\n                            const index = (<SignatureReflection> reflection.parent).parameters.indexOf(<ParameterReflection> reflection);\r\n                            if (index !== -1) {\r\n                                (<SignatureReflection> reflection.parent).parameters.splice(index, 1);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case TraverseProperty.SetSignature:\r\n                        delete parent.setSignature;\r\n                        break;\r\n                    case TraverseProperty.Signatures:\r\n                        if (parent.signatures) {\r\n                            const index = parent.signatures.indexOf(<SignatureReflection> reflection);\r\n                            if (index !== -1) {\r\n                                parent.signatures.splice(index, 1);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case TraverseProperty.TypeLiteral:\r\n                        parent.type = new IntrinsicType('Object');\r\n                        break;\r\n                    case TraverseProperty.TypeParameter:\r\n                        if (parent.typeParameters) {\r\n                            const index = parent.typeParameters.indexOf(<TypeParameterReflection> reflection);\r\n                            if (index !== -1) {\r\n                                parent.typeParameters.splice(index, 1);\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n\r\n        let id = reflection.id;\r\n        delete project.reflections[id];\r\n\r\n        for (let key in project.symbolMapping) {\r\n            if (project.symbolMapping.hasOwnProperty(key) && project.symbolMapping[key] === id) {\r\n                delete project.symbolMapping[key];\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}