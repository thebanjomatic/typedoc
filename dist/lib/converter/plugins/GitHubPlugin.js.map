{"version":3,"file":"GitHubPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/GitHubPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ShellJS from 'shelljs';\r\nimport * as Path from 'path';\r\n\r\nimport { SourceReference } from '../../models/sources/file';\r\nimport { Component, ConverterComponent } from '../components';\r\nimport { BasePath } from '../utils/base-path';\r\nimport { Converter } from '../converter';\r\nimport { Context } from '../context';\r\nimport { Option } from '../../utils/component';\r\nimport { ParameterType } from '../../utils/options/declaration';\r\n\r\n/**\r\n * Stores data of a repository.\r\n */\r\nclass Repository {\r\n    /**\r\n     * The root path of this repository.\r\n     */\r\n    path: string;\r\n\r\n    /**\r\n     * The name of the branch this repository is on right now.\r\n     */\r\n    branch: string;\r\n\r\n    /**\r\n     * A list of all files tracked by the repository.\r\n     */\r\n    files: string[] = [];\r\n\r\n    /**\r\n     * The user/organisation name of this repository on GitHub.\r\n     */\r\n    gitHubUser: string;\r\n\r\n    /**\r\n     * The project name of this repository on GitHub.\r\n     */\r\n    gitHubProject: string;\r\n\r\n    /**\r\n     * Create a new Repository instance.\r\n     *\r\n     * @param path  The root path of the repository.\r\n     */\r\n    constructor(path: string, gitRevision: string) {\r\n        this.path = path;\r\n        this.branch = gitRevision || 'master';\r\n        ShellJS.pushd(path);\r\n\r\n        let out = <ShellJS.ExecOutputReturnValue> ShellJS.exec('git ls-remote --get-url', {silent: true});\r\n        if (out.code === 0) {\r\n            let url: RegExpExecArray;\r\n            const remotes = out.stdout.split('\\n');\r\n            for (let i = 0, c = remotes.length; i < c; i++) {\r\n                url = /github\\.com[:\\/]([^\\/]+)\\/(.*)/.exec(remotes[i]);\r\n                if (url) {\r\n                    this.gitHubUser = url[1];\r\n                    this.gitHubProject = url[2];\r\n                    if (this.gitHubProject.substr(-4) === '.git') {\r\n                        this.gitHubProject = this.gitHubProject.substr(0, this.gitHubProject.length - 4);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        out = <ShellJS.ExecOutputReturnValue> ShellJS.exec('git ls-files', {silent: true});\r\n        if (out.code === 0) {\r\n            out.stdout.split('\\n').forEach((file) => {\r\n                if (file !== '') {\r\n                    this.files.push(BasePath.normalize(path + '/' + file));\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!gitRevision) {\r\n            out = <ShellJS.ExecOutputReturnValue> ShellJS.exec('git rev-parse --short HEAD', {silent: true});\r\n            if (out.code === 0) {\r\n                this.branch = out.stdout.replace('\\n', '');\r\n            }\r\n        }\r\n\r\n        ShellJS.popd();\r\n    }\r\n\r\n    /**\r\n     * Check whether the given file is tracked by this repository.\r\n     *\r\n     * @param fileName  The name of the file to test for.\r\n     * @returns TRUE when the file is part of the repository, otherwise FALSE.\r\n     */\r\n    contains(fileName: string): boolean {\r\n        return this.files.indexOf(fileName) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Get the URL of the given file on GitHub.\r\n     *\r\n     * @param fileName  The file whose GitHub URL should be determined.\r\n     * @returns An url pointing to the web preview of the given file or NULL.\r\n     */\r\n    getGitHubURL(fileName: string): string {\r\n        if (!this.gitHubUser || !this.gitHubProject || !this.contains(fileName)) {\r\n            return null;\r\n        }\r\n\r\n        return [\r\n            'https://github.com',\r\n            this.gitHubUser,\r\n            this.gitHubProject,\r\n            'blob',\r\n            this.branch,\r\n            fileName.substr(this.path.length + 1)\r\n        ].join('/');\r\n    }\r\n\r\n    /**\r\n     * Try to create a new repository instance.\r\n     *\r\n     * Checks whether the given path is the root of a valid repository and if so\r\n     * creates a new instance of [[Repository]].\r\n     *\r\n     * @param path  The potential repository root.\r\n     * @returns A new instance of [[Repository]] or NULL.\r\n     */\r\n    static tryCreateRepository(path: string, gitRevision: string): Repository {\r\n        ShellJS.pushd(path);\r\n        const out = <ShellJS.ExecOutputReturnValue> ShellJS.exec('git rev-parse --show-toplevel', {silent: true});\r\n        ShellJS.popd();\r\n\r\n        if (!out || out.code !== 0) {\r\n            return null;\r\n        }\r\n        return new Repository(BasePath.normalize(out.stdout.replace('\\n', '')), gitRevision);\r\n    }\r\n}\r\n\r\n/**\r\n * A handler that watches for repositories with GitHub origin and links\r\n * their source files to the related GitHub pages.\r\n */\r\n@Component({name: 'git-hub'})\r\nexport class GitHubPlugin extends ConverterComponent {\r\n    /**\r\n     * List of known repositories.\r\n     */\r\n    private repositories: {[path: string]: Repository} = {};\r\n\r\n    /**\r\n     * List of paths known to be not under git control.\r\n     */\r\n    private ignoredPaths: string[] = [];\r\n\r\n    @Option({\r\n        name: 'gitRevision',\r\n        help: 'Use specified revision instead of the last revision for linking to GitHub source files.',\r\n        type: ParameterType.String\r\n    })\r\n    gitRevision: string;\r\n\r\n    /**\r\n     * Create a new GitHubHandler instance.\r\n     *\r\n     * @param converter  The converter this plugin should be attached to.\r\n     */\r\n    initialize() {\r\n        ShellJS.config.silent = true;\r\n        if (ShellJS.which('git')) {\r\n            this.listenTo(this.owner, Converter.EVENT_RESOLVE_END, this.onEndResolve);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check whether the given file is placed inside a repository.\r\n     *\r\n     * @param fileName  The name of the file a repository should be looked for.\r\n     * @returns The found repository info or NULL.\r\n     */\r\n    private getRepository(fileName: string): Repository {\r\n        // Check for known non-repositories\r\n        const dirName = Path.dirname(fileName);\r\n        for (let i = 0, c = this.ignoredPaths.length; i < c; i++) {\r\n            if (this.ignoredPaths[i] === dirName) {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        // Check for known repositories\r\n        for (let path in this.repositories) {\r\n            if (!this.repositories.hasOwnProperty(path)) {\r\n                continue;\r\n            }\r\n            if (fileName.substr(0, path.length) === path) {\r\n                return this.repositories[path];\r\n            }\r\n        }\r\n\r\n        // Try to create a new repository\r\n        const repository = Repository.tryCreateRepository(dirName, this.gitRevision);\r\n        if (repository) {\r\n            this.repositories[repository.path] = repository;\r\n            return repository;\r\n        }\r\n\r\n        // No repository found, add path to ignored paths\r\n        const segments = dirName.split('/');\r\n        for (let i = segments.length; i > 0; i--) {\r\n            this.ignoredPaths.push(segments.slice(0, i).join('/'));\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter has finished resolving a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onEndResolve(context: Context) {\r\n        const project = context.project;\r\n        project.files.forEach((sourceFile) => {\r\n            const repository = this.getRepository(sourceFile.fullFileName);\r\n            if (repository) {\r\n                sourceFile.url = repository.getGitHubURL(sourceFile.fullFileName);\r\n            }\r\n        });\r\n\r\n        for (let key in project.reflections) {\r\n            const reflection = project.reflections[key];\r\n            if (reflection.sources) {\r\n                reflection.sources.forEach((source: SourceReference) => {\r\n                    if (source.file && source.file.url) {\r\n                        source.url = source.file.url + '#L' + source.line;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}