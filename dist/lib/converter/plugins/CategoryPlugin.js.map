{"version":3,"file":"CategoryPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/CategoryPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Reflection, ContainerReflection } from '../../models/reflections/index';\r\nimport { ReflectionCategory } from '../../models/ReflectionCategory';\r\nimport { SourceDirectory } from '../../models/sources/directory';\r\nimport { Component, ConverterComponent } from '../components';\r\nimport { Converter } from '../converter';\r\nimport { Context } from '../context';\r\nimport { GroupPlugin } from './GroupPlugin';\r\n\r\n/**\r\n * A handler that sorts and categorizes the found reflections in the resolving phase.\r\n *\r\n * The handler sets the ´category´ property of all reflections.\r\n */\r\n@Component({name: 'category'})\r\nexport class CategoryPlugin extends ConverterComponent {\r\n    /**\r\n     * Define the sort order of categories. By default, sort alphabetically.\r\n     */\r\n    static WEIGHTS = [];\r\n\r\n    /**\r\n     * Create a new CategoryPlugin instance.\r\n     */\r\n    initialize() {\r\n        this.listenTo(this.owner, {\r\n            [Converter.EVENT_RESOLVE]:     this.onResolve,\r\n            [Converter.EVENT_RESOLVE_END]: this.onEndResolve\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter resolves a reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently resolved.\r\n     */\r\n    private onResolve(context: Context, reflection: Reflection) {\r\n        if (reflection instanceof ContainerReflection) {\r\n            const container = <ContainerReflection> reflection;\r\n            if (container.children && container.children.length > 0) {\r\n                container.children.sort(GroupPlugin.sortCallback);\r\n                container.categories = CategoryPlugin.getReflectionCategories(container.children);\r\n            }\r\n            if (container.categories && container.categories.length > 1) {\r\n                container.categories.sort(CategoryPlugin.sortCatCallback);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter has finished resolving a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onEndResolve(context: Context) {\r\n        function walkDirectory(directory: SourceDirectory) {\r\n            directory.categories = CategoryPlugin.getReflectionCategories(directory.getAllReflections());\r\n\r\n            for (let key in directory.directories) {\r\n                if (!directory.directories.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                walkDirectory(directory.directories[key]);\r\n            }\r\n        }\r\n\r\n        const project = context.project;\r\n        if (project.children && project.children.length > 0) {\r\n            project.children.sort(GroupPlugin.sortCallback);\r\n            project.categories = CategoryPlugin.getReflectionCategories(project.children);\r\n        }\r\n        if (project.categories && project.categories.length > 1) {\r\n            project.categories.sort(CategoryPlugin.sortCatCallback);\r\n        }\r\n\r\n        walkDirectory(project.directory);\r\n        project.files.forEach((file) => {\r\n            file.categories = CategoryPlugin.getReflectionCategories(file.reflections);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create a categorized representation of the given list of reflections.\r\n     *\r\n     * @param reflections  The reflections that should be categorized.\r\n     * @returns An array containing all children of the given reflection categorized\r\n     */\r\n    static getReflectionCategories(reflections: Reflection[]): ReflectionCategory[] {\r\n        const categories: ReflectionCategory[] = [];\r\n        reflections.forEach((child) => {\r\n            const childCat = CategoryPlugin.getCategory(child);\r\n            if (childCat === '') {\r\n              return;\r\n            }\r\n            for (let i = 0; i < categories.length; i++) {\r\n                const category = categories[i];\r\n\r\n                if (category.title !== childCat) {\r\n                    continue;\r\n                }\r\n\r\n                category.children.push(child);\r\n                return;\r\n            }\r\n\r\n            const category = new ReflectionCategory(childCat);\r\n            category.children.push(child);\r\n            categories.push(category);\r\n        });\r\n        return categories;\r\n    }\r\n\r\n    /**\r\n     * Return the category of a given reflection.\r\n     *\r\n     * @param reflection The reflection.\r\n     * @returns The category the reflection belongs to\r\n     */\r\n    static getCategory(reflection: Reflection): string {\r\n        if (reflection.comment) {\r\n            const tags = reflection.comment.tags;\r\n            if (tags) {\r\n                for (let i = 0; i < tags.length; i++) {\r\n                    if (tags[i].tagName === 'category') {\r\n                        let tag = tags[i].text;\r\n                        return (tag.charAt(0).toUpperCase() + tag.slice(1).toLowerCase()).trim();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Callback used to sort reflections by name.\r\n     *\r\n     * @param a The left reflection to sort.\r\n     * @param b The right reflection to sort.\r\n     * @returns The sorting weight.\r\n     */\r\n    static sortCallback(a: Reflection, b: Reflection): number {\r\n        return a.name > b.name ? 1 : -1;\r\n    }\r\n\r\n    /**\r\n     * Callback used to sort categories by name.\r\n     *\r\n     * @param a The left reflection to sort.\r\n     * @param b The right reflection to sort.\r\n     * @returns The sorting weight.\r\n     */\r\n    static sortCatCallback(a: ReflectionCategory, b: ReflectionCategory): number {\r\n        const aWeight = CategoryPlugin.WEIGHTS.indexOf(a.title);\r\n        const bWeight = CategoryPlugin.WEIGHTS.indexOf(b.title);\r\n        if (aWeight < 0 && bWeight < 0) {\r\n            return a.title > b.title ? 1 : -1;\r\n        }\r\n        if (aWeight < 0) {\r\n            return 1;\r\n        }\r\n        if (bWeight < 0) {\r\n            return -1;\r\n        }\r\n        return aWeight - bWeight;\r\n    }\r\n}\r\n"]}