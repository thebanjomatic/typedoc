{"version":3,"file":"PackagePlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/PackagePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\r\nimport * as FS from 'fs';\r\nimport * as ts from 'typescript';\r\n\r\nimport { Reflection } from '../../models/reflections/abstract';\r\nimport { Component, ConverterComponent } from '../components';\r\nimport { Converter } from '../converter';\r\nimport { Context } from '../context';\r\nimport { Option } from '../../utils/component';\r\n\r\n/**\r\n * A handler that tries to find the package.json and readme.md files of the\r\n * current project.\r\n *\r\n * The handler traverses the file tree upwards for each file processed by the processor\r\n * and records the nearest package info files it can find. Within the resolve files, the\r\n * contents of the found files will be read and appended to the ProjectReflection.\r\n */\r\n@Component({name: 'package'})\r\nexport class PackagePlugin extends ConverterComponent {\r\n    @Option({\r\n        name: 'readme',\r\n        help: 'Path to the readme file that should be displayed on the index page. Pass `none` to disable the index page and start the documentation on the globals page.'\r\n    })\r\n    readme: string;\r\n\r\n    /**\r\n     * The file name of the found readme.md file.\r\n     */\r\n    private readmeFile: string;\r\n\r\n    /**\r\n     * The file name of the found package.json file.\r\n     */\r\n    private packageFile: string;\r\n\r\n    /**\r\n     * List of directories the handler already inspected.\r\n     */\r\n    private visited: string[];\r\n\r\n    /**\r\n     * Should the readme file be ignored?\r\n     */\r\n    private noReadmeFile: boolean;\r\n\r\n    /**\r\n     * Create a new PackageHandler instance.\r\n     */\r\n    initialize() {\r\n        this.listenTo(this.owner, {\r\n            [Converter.EVENT_BEGIN]:         this.onBegin,\r\n            [Converter.EVENT_FILE_BEGIN]:    this.onBeginDocument,\r\n            [Converter.EVENT_RESOLVE_BEGIN]: this.onBeginResolve\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter begins converting a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onBegin(context: Context) {\r\n        this.readmeFile  = null;\r\n        this.packageFile = null;\r\n        this.visited     = [];\r\n\r\n        let readme = this.readme;\r\n        this.noReadmeFile = (readme === 'none');\r\n        if (!this.noReadmeFile && readme) {\r\n            readme = Path.resolve(readme);\r\n            if (FS.existsSync(readme)) {\r\n                this.readmeFile = readme;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter begins converting a source file.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently processed.\r\n     * @param node  The node that is currently processed if available.\r\n     */\r\n    private onBeginDocument(context: Context, reflection: Reflection, node?: ts.SourceFile) {\r\n        if (!node) {\r\n            return;\r\n        }\r\n        if (this.readmeFile && this.packageFile) {\r\n            return;\r\n        }\r\n\r\n        const fileName = node.fileName;\r\n        let dirName: string, parentDir = Path.resolve(Path.dirname(fileName));\r\n        do {\r\n            dirName = parentDir;\r\n            if (this.visited.indexOf(dirName) !== -1) {\r\n                break;\r\n            }\r\n\r\n            FS.readdirSync(dirName).forEach((file) => {\r\n                const lfile = file.toLowerCase();\r\n                if (!this.noReadmeFile && !this.readmeFile && lfile === 'readme.md') {\r\n                    this.readmeFile = Path.join(dirName, file);\r\n                }\r\n\r\n                if (!this.packageFile && lfile === 'package.json') {\r\n                    this.packageFile = Path.join(dirName, file);\r\n                }\r\n            });\r\n\r\n            this.visited.push(dirName);\r\n            parentDir = Path.resolve(Path.join(dirName, '..'));\r\n        } while (dirName !== parentDir);\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter begins resolving a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onBeginResolve(context: Context) {\r\n        const project = context.project;\r\n        if (this.readmeFile) {\r\n            project.readme = FS.readFileSync(this.readmeFile, 'utf-8');\r\n        }\r\n\r\n        if (this.packageFile) {\r\n            project.packageInfo = JSON.parse(FS.readFileSync(this.packageFile, 'utf-8'));\r\n            if (!project.name) {\r\n                project.name = project.packageInfo.name;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}