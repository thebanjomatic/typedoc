{"version":3,"file":"string-literal.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/string-literal.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,kDAAmE;AACnE,4CAAiF;AAIjF;IAA4C,0CAAsB;IAAlE;;IA8CA,CAAC;IA1CG,6CAAY,GAAZ,UAAa,OAAgB,EAAE,IAAsB;QACjD,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC;IACrD,CAAC;IAKD,6CAAY,GAAZ,UAAa,OAAgB,EAAE,IAAoB;QAC/C,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IACvD,CAAC;IAcD,4CAAW,GAAX,UAAY,OAAgB,EAAE,IAAsB;QAChD,MAAM,CAAC,IAAI,yBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAcD,4CAAW,GAAX,UAAY,OAAgB,EAAE,IAAoB;QAC9C,MAAM,CAAC,IAAI,yBAAiB,CAAU,IAAI,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC;IA7CQ,sBAAsB;QADlC,sBAAS,CAAC,EAAC,IAAI,EAAE,qBAAqB,EAAC,CAAC;OAC5B,sBAAsB,CA8ClC;IAAD,6BAAC;CAAA,AA9CD,CAA4C,mCAAsB,GA8CjE;AA9CY,wDAAsB","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Type, StringLiteralType } from '../../models/types/index';\r\nimport { Component, ConverterTypeComponent, TypeConverter } from '../components';\r\nimport { Context } from '../context';\r\n\r\n@Component({name: 'type:string-literal'})\r\nexport class StringLiteralConverter extends ConverterTypeComponent implements TypeConverter<ts.LiteralType, ts.StringLiteral> {\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript node.\r\n     */\r\n    supportsNode(context: Context, node: ts.StringLiteral): boolean {\r\n        return node.kind === ts.SyntaxKind.StringLiteral;\r\n    }\r\n\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript type.\r\n     */\r\n    supportsType(context: Context, type: ts.LiteralType): boolean {\r\n        return !!(type.flags & ts.TypeFlags.StringLiteral);\r\n    }\r\n\r\n    /**\r\n     * Convert the given string literal expression node to its type reflection.\r\n     *\r\n     * This is a node based converter, see [[convertStringLiteralType]] for the type equivalent.\r\n     *\r\n     * ```\r\n     * createElement(tagName: \"a\"): HTMLAnchorElement;\r\n     * ```\r\n     *\r\n     * @param node  The string literal node that should be converted.\r\n     * @returns The type reflection representing the given string literal node.\r\n     */\r\n    convertNode(context: Context, node: ts.StringLiteral): Type {\r\n        return new StringLiteralType(node.text);\r\n    }\r\n\r\n    /**\r\n     * Convert the given string literal type to its type reflection.\r\n     *\r\n     * This is a type based converter, see [[convertStringLiteralExpression]] for the node equivalent.\r\n     *\r\n     * ```\r\n     * createElement(tagName: \"a\"): HTMLAnchorElement;\r\n     * ```\r\n     *\r\n     * @param type  The intrinsic type that should be converted.\r\n     * @returns The type reflection representing the given string literal type.\r\n     */\r\n    convertType(context: Context, type: ts.LiteralType): Type {\r\n        return new StringLiteralType(<string> type.value);\r\n    }\r\n}\r\n"]}