{"version":3,"file":"intrinsic.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/intrinsic.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAmD;AACnD,4CAAqF;AAOrF,IAAM,kBAAkB,GAAI,EAAE,CAAC,SAAiB,CAAC,SAAS,CAAC;AAC3D,EAAE,CAAC,CAAC,kBAAkB,KAAK,SAAS,CAAC,CAAC,CAAC;IACnC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;AAC5E,CAAC;AAGD;IAAwC,sCAAsB;IAA9D;;IAwBA,CAAC;IApBG,yCAAY,GAAZ,UAAa,OAAgB,EAAE,IAAa;QACxC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC,CAAC;IAC/C,CAAC;IAcD,wCAAW,GAAX,UAAY,OAAgB,EAAE,IAAa;QACvC,IAAI,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACxE,MAAM,CAAC,IAAI,qBAAa,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC;IAvBQ,kBAAkB;QAD9B,sBAAS,CAAC,EAAC,IAAI,EAAE,gBAAgB,EAAC,CAAC;OACvB,kBAAkB,CAwB9B;IAAD,yBAAC;CAAA,AAxBD,CAAwC,mCAAsB,GAwB7D;AAxBY,gDAAkB","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { IntrinsicType } from '../../models/index';\r\nimport { Component, ConverterTypeComponent, TypeTypeConverter } from '../components';\r\nimport { Context } from '../context';\r\n\r\n// TypeScript has an @internal enum set for the intrinsic types:\r\n// https://github.com/Microsoft/TypeScript/blob/v2.0.5/src/compiler/types.ts#L2297-L2298\r\n// It is not included in the typescript typings, so the enum is cast as `any` to access the `Intrinsic` set.\r\n// tslint:disable-next-line:variable-name\r\nconst IntrinsicTypeFlags = (ts.TypeFlags as any).Intrinsic;\r\nif (IntrinsicTypeFlags === undefined) {\r\n    throw new Error('Internal TypeScript API missing: TypeFlags.Intrinsic');\r\n}\r\n\r\n@Component({name: 'type:intrinsic'})\r\nexport class IntrinsicConverter extends ConverterTypeComponent implements TypeTypeConverter<ts.Type> {\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript type.\r\n     */\r\n    supportsType(context: Context, type: ts.Type): boolean {\r\n        return !!(type.flags & IntrinsicTypeFlags);\r\n    }\r\n\r\n    /**\r\n     * Convert the given intrinsic type to its type reflection.\r\n     *\r\n     * This is a type based converter with no node based equivalent.\r\n     *\r\n     * ```\r\n     * let someValue: string;\r\n     * ```\r\n     *\r\n     * @param type  The intrinsic type that should be converted.\r\n     * @returns The type reflection representing the given intrinsic type.\r\n     */\r\n    convertType(context: Context, type: ts.Type): IntrinsicType {\r\n        let intrinsicName = context.program.getTypeChecker().typeToString(type);\r\n        return new IntrinsicType(intrinsicName);\r\n    }\r\n}\r\n"]}