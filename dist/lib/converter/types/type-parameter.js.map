{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/type-parameter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AACjC,uCAAyC;AAEzC,kDAAmE;AACnE,4CAAqF;AAIrF;IAA4C,0CAAsB;IADlE;QAAA,qEA0CC;QApCG,cAAQ,GAAG,CAAC,EAAE,CAAC;;IAoCnB,CAAC;IA/BG,6CAAY,GAAZ,UAAa,OAAgB,EAAE,IAA0B,EAAE,IAAa;QACpE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IACvD,CAAC;IAiBD,4CAAW,GAAX,UAAY,OAAgB,EAAE,IAA0B;QACpD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,IAAM,MAAI,GAAG,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9C,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,cAAc,CAAC,MAAI,CAAC,CAAC,CAAC,CAAC;gBACzD,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,MAAI,CAAC,CAAC,KAAK,EAAE,CAAC;YAChD,CAAC;YAED,IAAM,MAAM,GAAG,IAAI,yBAAiB,EAAE,CAAC;YACvC,MAAM,CAAC,IAAI,GAAG,MAAI,CAAC;YACnB,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;IACL,CAAC;IAxCQ,sBAAsB;QADlC,sBAAS,CAAC,EAAC,IAAI,EAAE,qBAAqB,EAAC,CAAC;OAC5B,sBAAsB,CAyClC;IAAD,6BAAC;CAAA,AAzCD,CAA4C,mCAAsB,GAyCjE;AAzCY,wDAAsB","sourcesContent":["import * as ts from 'typescript';\r\nimport * as _ts from '../../ts-internal';\r\n\r\nimport { Type, TypeParameterType } from '../../models/types/index';\r\nimport { Component, ConverterTypeComponent, TypeNodeConverter } from '../components';\r\nimport { Context } from '../context';\r\n\r\n@Component({name: 'type:type-parameter'})\r\nexport class TypeParameterConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.TypeReferenceNode> {\r\n    /**\r\n     * The priority this converter should be executed with.\r\n     * A higher priority means the converter will be applied earlier.\r\n     */\r\n    priority = -50;\r\n\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript node.\r\n     */\r\n    supportsNode(context: Context, node: ts.TypeReferenceNode, type: ts.Type): boolean {\r\n        return !!(type.flags & ts.TypeFlags.TypeParameter);\r\n    }\r\n\r\n    /**\r\n     * Interpret the given type reference node as a type parameter and convert it to its type reflection.\r\n     *\r\n     * This is a node based converter with no type equivalent.\r\n     *\r\n     * ```\r\n     * class SomeClass<T> {\r\n     *   public someValue: T;\r\n     * }\r\n     * ```\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node  The type reference node representing a type parameter.\r\n     * @returns The type reflection representing the given type parameter.\r\n     */\r\n    convertNode(context: Context, node: ts.TypeReferenceNode): Type {\r\n        if (node.typeName) {\r\n            const name = _ts.getTextOfNode(node.typeName);\r\n            if (context.typeParameters && context.typeParameters[name]) {\r\n                return context.typeParameters[name].clone();\r\n            }\r\n\r\n            const result = new TypeParameterType();\r\n            result.name = name;\r\n            return result;\r\n        }\r\n    }\r\n}\r\n"]}