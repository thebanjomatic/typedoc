{"version":3,"file":"tuple.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/tuple.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,kDAA2D;AAC3D,4CAAiF;AAIjF;IAAoC,kCAAsB;IAA1D;;IA8DA,CAAC;IA1DG,qCAAY,GAAZ,UAAa,OAAgB,EAAE,IAAsB;QACjD,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC;IACjD,CAAC;IAKD,qCAAY,GAAZ,UAAa,OAAgB,EAAE,IAAsB;QACjD,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACvD,CAAC;IAeD,oCAAW,GAAX,UAAY,OAAgB,EAAE,IAAsB;QAApD,iBASC;QARG,IAAI,QAAgB,CAAC;QACrB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACpB,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,EAAlC,CAAkC,CAAC,CAAC;QAChF,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,QAAQ,GAAG,EAAE,CAAC;QAClB,CAAC;QAED,MAAM,CAAC,IAAI,iBAAS,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAeD,oCAAW,GAAX,UAAY,OAAgB,EAAE,IAAsB;QAApD,iBASC;QARG,IAAI,QAAgB,CAAC;QACrB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACrB,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,EAAxC,CAAwC,CAAC,CAAC;QACvF,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,QAAQ,GAAG,EAAE,CAAC;QAClB,CAAC;QAED,MAAM,CAAC,IAAI,iBAAS,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IA7DQ,cAAc;QAD1B,sBAAS,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC;OACnB,cAAc,CA8D1B;IAAD,qBAAC;CAAA,AA9DD,CAAoC,mCAAsB,GA8DzD;AA9DY,wCAAc","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Type, TupleType } from '../../models/types/index';\r\nimport { Component, ConverterTypeComponent, TypeConverter } from '../components';\r\nimport { Context } from '../context';\r\n\r\n@Component({name: 'type:tuple'})\r\nexport class TupleConverter extends ConverterTypeComponent implements TypeConverter<ts.TypeReference, ts.TupleTypeNode> {\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript node.\r\n     */\r\n    supportsNode(context: Context, node: ts.TupleTypeNode): boolean {\r\n        return node.kind === ts.SyntaxKind.TupleType;\r\n    }\r\n\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript type.\r\n     */\r\n    supportsType(context: Context, type: ts.TypeReference): boolean {\r\n        return !!(type.objectFlags & ts.ObjectFlags.Tuple);\r\n    }\r\n\r\n    /**\r\n     * Convert the given tuple type node to its type reflection.\r\n     *\r\n     * This is a node based converter, see [[convertTupleType]] for the type equivalent.\r\n     *\r\n     * ```\r\n     * let someValue: [string,number];\r\n     * ```\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node  The tuple type node that should be converted.\r\n     * @returns The type reflection representing the given tuple type node.\r\n     */\r\n    convertNode(context: Context, node: ts.TupleTypeNode): TupleType {\r\n        let elements: Type[];\r\n        if (node.elementTypes) {\r\n            elements = node.elementTypes.map((n) => this.owner.convertType(context, n));\r\n        } else {\r\n            elements = [];\r\n        }\r\n\r\n        return new TupleType(elements);\r\n    }\r\n\r\n    /**\r\n     * Convert the given tuple type to its type reflection.\r\n     *\r\n     * This is a type based converter, see [[convertTupleTypeNode]] for the node equivalent.\r\n     *\r\n     * ```\r\n     * let someValue: [string,number];\r\n     * ```\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param type  The tuple type that should be converted.\r\n     * @returns The type reflection representing the given tuple type.\r\n     */\r\n    convertType(context: Context, type: ts.TypeReference): TupleType {\r\n        let elements: Type[];\r\n        if (type.typeArguments) {\r\n            elements = type.typeArguments.map((t) => this.owner.convertType(context, null, t));\r\n        } else {\r\n            elements = [];\r\n        }\r\n\r\n        return new TupleType(elements);\r\n    }\r\n}\r\n"]}