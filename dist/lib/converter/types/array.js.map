{"version":3,"file":"array.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/array.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAqD;AACrD,4CAAiF;AAIjF;IAAoC,kCAAsB;IAA1D;;IAsDA,CAAC;IAlDG,qCAAY,GAAZ,UAAa,OAAgB,EAAE,IAAsB;QACjD,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC;IACjD,CAAC;IAKD,qCAAY,GAAZ,UAAa,OAAgB,EAAE,IAAsB;QAEjD,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,CAAC;IACnL,CAAC;IAeD,oCAAW,GAAX,UAAY,OAAgB,EAAE,IAAsB;QAChD,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAEjE,MAAM,CAAC,IAAI,iBAAS,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAgBD,oCAAW,GAAX,UAAY,OAAgB,EAAE,IAAsB;QAChD,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;QAE5E,MAAM,CAAC,IAAI,iBAAS,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IArDQ,cAAc;QAD1B,sBAAS,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC;OACnB,cAAc,CAsD1B;IAAD,qBAAC;CAAA,AAtDD,CAAoC,mCAAsB,GAsDzD;AAtDY,wCAAc","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Type, ArrayType } from '../../models/index';\r\nimport { Component, ConverterTypeComponent, TypeConverter } from '../components';\r\nimport { Context } from '../context';\r\n\r\n@Component({name: 'type:array'})\r\nexport class ArrayConverter extends ConverterTypeComponent implements TypeConverter<ts.TypeReference, ts.ArrayTypeNode> {\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript node.\r\n     */\r\n    supportsNode(context: Context, node: ts.ArrayTypeNode): boolean {\r\n        return node.kind === ts.SyntaxKind.ArrayType;\r\n    }\r\n\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript type.\r\n     */\r\n    supportsType(context: Context, type: ts.TypeReference): boolean {\r\n        // Is there a better way to detect the {\"type\":\"reference\",\"name\":\"Array\",\"typeArguments\":{...}} types that are in fact arrays?\r\n        return !!(type.flags & ts.TypeFlags.Object) && !!type.symbol && type.symbol.name === 'Array' && !type.symbol.parent && !!type.typeArguments && type.typeArguments.length === 1;\r\n    }\r\n\r\n    /**\r\n     * Convert the given array type node to its type reflection.\r\n     *\r\n     * This is a node based converter with no type equivalent.\r\n     *\r\n     * ```\r\n     * let someValue: number[];\r\n     * ```\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node  The array type node that should be converted.\r\n     * @returns The type reflection representing the given array type node.\r\n     */\r\n    convertNode(context: Context, node: ts.ArrayTypeNode): Type {\r\n        const result = this.owner.convertType(context, node.elementType);\r\n\r\n        return new ArrayType(result);\r\n    }\r\n\r\n    /**\r\n     * Convert the given type reference to its type reflection.\r\n     *\r\n     * This is a type based converter, see [[convertTypeReference]] for the node equivalent.\r\n     *\r\n     * ```\r\n     * class SomeClass { }\r\n     * let someValue: SomeClass;\r\n     * ```\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param type  The type reference that should be converted.\r\n     * @returns The type reflection representing the given type reference.\r\n     */\r\n    convertType(context: Context, type: ts.TypeReference): Type {\r\n        const result = this.owner.convertType(context, null, type.typeArguments[0]);\r\n\r\n        return new ArrayType(result);\r\n    }\r\n}\r\n"]}