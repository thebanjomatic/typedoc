{"version":3,"file":"enum.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/enum.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAGjC,4CAAyD;AACzD,4CAAqF;AAIrF;IAAmC,iCAAsB;IAAzD;;IAyBA,CAAC;IArBG,oCAAY,GAAZ,UAAa,OAAgB,EAAE,IAAa;QACxC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC;IAgBD,mCAAW,GAAX,UAAY,OAAgB,EAAE,IAAa;QACvC,MAAM,CAAC,2BAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACrD,CAAC;IAxBQ,aAAa;QADzB,sBAAS,CAAC,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC;OAClB,aAAa,CAyBzB;IAAD,oBAAC;CAAA,AAzBD,CAAmC,mCAAsB,GAyBxD;AAzBY,sCAAa","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Type } from '../../models/index';\r\nimport { createReferenceType } from '../factories/index';\r\nimport { Component, ConverterTypeComponent, TypeTypeConverter } from '../components';\r\nimport { Context } from '../context';\r\n\r\n@Component({name: 'type:enum'})\r\nexport class EnumConverter extends ConverterTypeComponent implements TypeTypeConverter<ts.Type> {\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript type.\r\n     */\r\n    supportsType(context: Context, type: ts.Type): boolean {\r\n        return !!(type.flags & ts.TypeFlags.EnumLike);\r\n    }\r\n\r\n    /**\r\n     * Convert the given enumeration type to its type reflection.\r\n     *\r\n     * This is a type based converter with no node based equivalent.\r\n     *\r\n     * ```\r\n     * enum MyEnum { One, Two, Three }\r\n     * let someValue: MyEnum;\r\n     * ```\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param type  The enumeration type that should be converted.\r\n     * @returns The type reflection representing the given enumeration type.\r\n     */\r\n    convertType(context: Context, type: ts.Type): Type {\r\n        return createReferenceType(context, type.symbol);\r\n    }\r\n}\r\n"]}