{"version":3,"file":"variable-statement.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/variable-statement.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AACjC,uCAAyC;AAIzC,4CAAkE;AAGlE;IAAgD,8CAA4C;IAD5F;QAAA,qEA6CC;QAxCG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,iBAAiB;SAClC,CAAC;;IAsCN,CAAC;IA7BG,4CAAO,GAAP,UAAQ,OAAgB,EAAE,IAA0B;QAApD,iBAYC;QAXG,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE;YAC3D,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,mBAAmB;gBAC1D,IAAI,GAAG,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE;oBAChD,KAAI,CAAC,qBAAqB,CAAC,OAAO,EAAsB,mBAAmB,CAAC,IAAI,CAAC,CAAC;iBACrF;qBAAM;oBACH,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;iBACxD;YACL,CAAC,CAAC,CAAC;SACN;QAED,OAAO,OAAO,CAAC,KAAK,CAAC;IACzB,CAAC;IAQD,0DAAqB,GAArB,UAAsB,OAAgB,EAAE,IAAuB;QAA/D,iBAQC;QAPI,IAAI,CAAC,QAA4C,CAAC,OAAO,CAAC,UAAC,OAA0B;YAClF,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAEzC,IAAI,GAAG,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACpC,KAAI,CAAC,qBAAqB,CAAC,OAAO,EAAsB,OAAO,CAAC,IAAI,CAAC,CAAC;aACzE;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IA3CQ,0BAA0B;QADtC,sBAAS,CAAC,EAAC,IAAI,EAAE,yBAAyB,EAAC,CAAC;OAChC,0BAA0B,CA4CtC;IAAD,iCAAC;CAAA,AA5CD,CAAgD,mCAAsB,GA4CrE;AA5CY,gEAA0B","sourcesContent":["import * as ts from 'typescript';\r\nimport * as _ts from '../../ts-internal';\r\n\r\nimport { Reflection } from '../../models/index';\r\nimport { Context } from '../context';\r\nimport { Component, ConverterNodeComponent } from '../components';\r\n\r\n@Component({name: 'node:variable-statement'})\r\nexport class VariableStatementConverter extends ConverterNodeComponent<ts.VariableStatement> {\r\n    /**\r\n     * List of supported TypeScript syntax kinds.\r\n     */\r\n    supports: ts.SyntaxKind[] = [\r\n        ts.SyntaxKind.VariableStatement\r\n    ];\r\n\r\n    /**\r\n     * Analyze the given variable statement node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The variable statement node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    convert(context: Context, node: ts.VariableStatement): Reflection {\r\n        if (node.declarationList && node.declarationList.declarations) {\r\n            node.declarationList.declarations.forEach((variableDeclaration) => {\r\n                if (_ts.isBindingPattern(variableDeclaration.name)) {\r\n                    this.convertBindingPattern(context, <ts.BindingPattern> variableDeclaration.name);\r\n                } else {\r\n                    this.owner.convertNode(context, variableDeclaration);\r\n                }\r\n            });\r\n        }\r\n\r\n        return context.scope;\r\n    }\r\n\r\n    /**\r\n     * Traverse the elements of the given binding pattern and create the corresponding variable reflections.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The binding pattern node that should be analyzed.\r\n     */\r\n    convertBindingPattern(context: Context, node: ts.BindingPattern) {\r\n        (node.elements as ts.NodeArray<ts.BindingElement>).forEach((element: ts.BindingElement) => {\r\n            this.owner.convertNode(context, element);\r\n\r\n            if (_ts.isBindingPattern(element.name)) {\r\n                this.convertBindingPattern(context, <ts.BindingPattern> element.name);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}