{"version":3,"file":"signature-call.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/signature-call.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAuF;AAEvF,4CAAkE;AAClE,4CAAqD;AAGrD;IAAwC,sCAA2F;IADnI;QAAA,qEAgCC;QA3BG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,aAAa;YAC3B,EAAE,CAAC,UAAU,CAAC,YAAY;YAC1B,EAAE,CAAC,UAAU,CAAC,kBAAkB;YAChC,EAAE,CAAC,UAAU,CAAC,aAAa;SAC9B,CAAC;;IAsBN,CAAC;IAbG,oCAAO,GAAP,UAAQ,OAAgB,EAAE,IAAyE;QAC/F,IAAM,KAAK,GAA2B,OAAO,CAAC,KAAK,CAAC;QACpD,EAAE,CAAC,CAAC,KAAK,YAAY,6BAAqB,CAAC,CAAC,CAAC;YACzC,IAAM,MAAI,GAAG,KAAK,CAAC,MAAM,CAAC,sBAAc,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC;YACnF,IAAM,SAAS,GAAG,uBAAe,CAAC,OAAO,EAA4B,IAAI,EAAE,MAAI,EAAE,sBAAc,CAAC,aAAa,CAAC,CAAC;YAC/G,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpB,KAAK,CAAC,UAAU,GAAG,EAAE,CAAC;YAC1B,CAAC;YACD,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IA9BQ,kBAAkB;QAD9B,sBAAS,CAAC,EAAC,IAAI,EAAE,qBAAqB,EAAC,CAAC;OAC5B,kBAAkB,CA+B9B;IAAD,yBAAC;CAAA,AA/BD,CAAwC,mCAAsB,GA+B7D;AA/BY,gDAAkB","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Reflection, ReflectionKind, DeclarationReflection } from '../../models/index';\r\nimport { Context } from '../context';\r\nimport { Component, ConverterNodeComponent } from '../components';\r\nimport { createSignature } from '../factories/index';\r\n\r\n@Component({name: 'node:signature-call'})\r\nexport class SignatureConverter extends ConverterNodeComponent<ts.FunctionExpression|ts.SignatureDeclaration|ts.FunctionExpression> {\r\n    /**\r\n     * List of supported TypeScript syntax kinds.\r\n     */\r\n    supports: ts.SyntaxKind[] = [\r\n        ts.SyntaxKind.CallSignature,\r\n        ts.SyntaxKind.FunctionType,\r\n        ts.SyntaxKind.FunctionExpression,\r\n        ts.SyntaxKind.ArrowFunction\r\n    ];\r\n\r\n    /**\r\n     * Analyze the given call signature declaration node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The signature declaration node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    convert(context: Context, node: ts.FunctionExpression|ts.SignatureDeclaration|ts.FunctionExpression): Reflection {\r\n        const scope = <DeclarationReflection> context.scope;\r\n        if (scope instanceof DeclarationReflection) {\r\n            const name = scope.kindOf(ReflectionKind.FunctionOrMethod) ? scope.name : '__call';\r\n            const signature = createSignature(context, <ts.SignatureDeclaration> node, name, ReflectionKind.CallSignature);\r\n            if (!scope.signatures) {\r\n                scope.signatures = [];\r\n            }\r\n            scope.signatures.push(signature);\r\n        }\r\n\r\n        return scope;\r\n    }\r\n}\r\n"]}