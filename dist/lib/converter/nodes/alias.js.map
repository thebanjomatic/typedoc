{"version":3,"file":"alias.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/alias.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAgE;AAChE,4CAAuD;AAEvD,4CAAkE;AAGlE;IAAoC,kCAA+C;IADnF;QAAA,qEAyBC;QApBG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,oBAAoB;SACrC,CAAC;;IAkBN,CAAC;IATG,gCAAO,GAAP,UAAQ,OAAgB,EAAE,IAA6B;QAAvD,iBAQC;QAPG,IAAM,KAAK,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,SAAS,CAAC,CAAC;QAEzE,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE;YACrB,KAAK,CAAC,IAAI,GAAG,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAvBQ,cAAc;QAD1B,sBAAS,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC;OACnB,cAAc,CAwB1B;IAAD,qBAAC;CAAA,AAxBD,CAAoC,mCAAsB,GAwBzD;AAxBY,wCAAc","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Reflection, ReflectionKind } from '../../models/index';\r\nimport { createDeclaration } from '../factories/index';\r\nimport { Context } from '../context';\r\nimport { Component, ConverterNodeComponent } from '../components';\r\n\r\n@Component({name: 'node:alias'})\r\nexport class AliasConverter extends ConverterNodeComponent<ts.TypeAliasDeclaration> {\r\n    /**\r\n     * List of supported TypeScript syntax kinds.\r\n     */\r\n    supports: ts.SyntaxKind[] = [\r\n        ts.SyntaxKind.TypeAliasDeclaration\r\n    ];\r\n\r\n    /**\r\n     * Analyze the given type alias declaration node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The type alias declaration node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    convert(context: Context, node: ts.TypeAliasDeclaration): Reflection {\r\n        const alias = createDeclaration(context, node, ReflectionKind.TypeAlias);\r\n\r\n        context.withScope(alias, () => {\r\n            alias.type = this.owner.convertType(context, node.type, context.getTypeAtLocation(node.type));\r\n        });\r\n\r\n        return alias;\r\n    }\r\n}\r\n"]}