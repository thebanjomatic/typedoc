{"version":3,"file":"block.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/block.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Reflection, ReflectionKind, ReflectionFlag } from '../../models/index';\r\nimport { createDeclaration } from '../factories/index';\r\nimport { Context } from '../context';\r\nimport { Component, ConverterNodeComponent } from '../components';\r\nimport { Option } from '../../utils/component';\r\nimport { ParameterType } from '../../utils/options/declaration';\r\n\r\nconst prefered: ts.SyntaxKind[] = [\r\n    ts.SyntaxKind.ClassDeclaration,\r\n    ts.SyntaxKind.InterfaceDeclaration,\r\n    ts.SyntaxKind.EnumDeclaration\r\n];\r\n\r\nexport enum SourceFileMode {\r\n    File, Modules\r\n}\r\n\r\n@Component({name: 'node:block'})\r\nexport class BlockConverter extends ConverterNodeComponent<ts.SourceFile|ts.Block|ts.ModuleBlock> {\r\n    @Option({\r\n        name: 'mode',\r\n        help: \"Specifies the output mode the project is used to be compiled with: 'file' or 'modules'\",\r\n        type: ParameterType.Map,\r\n        map: {\r\n            'file': SourceFileMode.File,\r\n            'modules': SourceFileMode.Modules\r\n        },\r\n        defaultValue: SourceFileMode.Modules\r\n    })\r\n    mode: number;\r\n\r\n    /**\r\n     * List of supported TypeScript syntax kinds.\r\n     */\r\n    supports: ts.SyntaxKind[] = [\r\n        ts.SyntaxKind.Block,\r\n        ts.SyntaxKind.ModuleBlock,\r\n        ts.SyntaxKind.SourceFile\r\n    ];\r\n\r\n    /**\r\n     * Analyze the given class declaration node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The class declaration node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    convert(context: Context, node: ts.SourceFile|ts.Block|ts.ModuleBlock): Reflection {\r\n        if (node.kind === ts.SyntaxKind.SourceFile) {\r\n            this.convertSourceFile(context, <ts.SourceFile> node);\r\n        } else {\r\n            this.convertStatements(context, node);\r\n        }\r\n\r\n        return context.scope;\r\n    }\r\n\r\n    /**\r\n     * Analyze the given source file node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The source file node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    private convertSourceFile(context: Context, node: ts.SourceFile): Reflection {\r\n        let result = context.scope;\r\n\r\n        context.withSourceFile(node, () => {\r\n            if (this.mode === SourceFileMode.Modules) {\r\n                result = createDeclaration(context, node, ReflectionKind.ExternalModule, node.fileName);\r\n                context.withScope(result, () => {\r\n                    this.convertStatements(context, node);\r\n                    result.setFlag(ReflectionFlag.Exported);\r\n                });\r\n            } else {\r\n                this.convertStatements(context, node);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    private convertStatements(context: Context, node: ts.SourceFile|ts.Block|ts.ModuleBlock) {\r\n        if (node.statements) {\r\n            const statements: ts.Statement[] = [];\r\n\r\n            node.statements.forEach((statement) => {\r\n                if (prefered.indexOf(statement.kind) !== -1) {\r\n                    this.owner.convertNode(context, statement);\r\n                } else {\r\n                    statements.push(statement);\r\n                }\r\n            });\r\n\r\n            statements.forEach((statement) => {\r\n                this.owner.convertNode(context, statement);\r\n            });\r\n        }\r\n    }\r\n}\r\n"]}