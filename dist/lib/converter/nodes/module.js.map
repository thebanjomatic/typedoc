{"version":3,"file":"module.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAmG;AACnG,4CAAuD;AAEvD,4CAAkE;AAGlE;IAAqC,mCAA4C;IADjF;QAAA,qEAiCC;QA5BG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,iBAAiB;SAClC,CAAC;;IA0BN,CAAC;IAjBG,iCAAO,GAAP,UAAQ,OAAgB,EAAE,IAA0B;QAApD,iBAgBC;QAfG,IAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;QAC7B,IAAM,UAAU,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,MAAM,CAAC,CAAC;QAE3E,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE;YAC1B,EAAE,CAAC,CAAC,MAAM,YAAY,yBAAiB,IAAI,CAAC,OAAO,CAAC,aAAa;gBAC7D,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjE,UAAU,CAAC,OAAO,CAAC,sBAAc,CAAC,QAAQ,CAAC,CAAC;YAChD,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACZ,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/C,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IA/BQ,eAAe;QAD3B,sBAAS,CAAC,EAAC,IAAI,EAAE,aAAa,EAAC,CAAC;OACpB,eAAe,CAgC3B;IAAD,sBAAC;CAAA,AAhCD,CAAqC,mCAAsB,GAgC1D;AAhCY,0CAAe","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Reflection, ReflectionKind, ReflectionFlag, ProjectReflection } from '../../models/index';\r\nimport { createDeclaration } from '../factories/index';\r\nimport { Context } from '../context';\r\nimport { Component, ConverterNodeComponent } from '../components';\r\n\r\n@Component({name: 'node:module'})\r\nexport class ModuleConverter extends ConverterNodeComponent<ts.ModuleDeclaration> {\r\n    /**\r\n     * List of supported TypeScript syntax kinds.\r\n     */\r\n    supports: ts.SyntaxKind[] = [\r\n        ts.SyntaxKind.ModuleDeclaration\r\n    ];\r\n\r\n    /**\r\n     * Analyze the given module node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The module node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    convert(context: Context, node: ts.ModuleDeclaration): Reflection {\r\n        const parent = context.scope;\r\n        const reflection = createDeclaration(context, node, ReflectionKind.Module);\r\n\r\n        context.withScope(reflection, () => {\r\n            if (parent instanceof ProjectReflection && !context.isDeclaration &&\r\n                (!module || module.valueOf() === ts.ModuleKind.None.valueOf())) {\r\n                reflection.setFlag(ReflectionFlag.Exported);\r\n            }\r\n\r\n            if (node.body) {\r\n                this.owner.convertNode(context, node.body);\r\n            }\r\n        });\r\n\r\n        return reflection;\r\n    }\r\n}\r\n"]}