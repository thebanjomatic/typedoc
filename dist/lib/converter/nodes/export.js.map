{"version":3,"file":"export.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/export.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAuF;AAEvF,4CAAkE;AAGlE;IAAqC,mCAA2C;IADhF;QAAA,qEAgDC;QA3CG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,gBAAgB;SACjC,CAAC;;IAyCN,CAAC;IAvCG,iCAAO,GAAP,UAAQ,OAAgB,EAAE,IAAyB;QAC/C,IAAI,MAAM,GAAc,SAAS,CAAC;QAGlC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACrF,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3D,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACtD,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;QAC5C,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;YAChC,IAAM,SAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAChC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,WAAW;gBACpC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;oBACtB,MAAM,CAAC;gBACX,CAAC;gBACD,IAAM,EAAE,GAAG,SAAO,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC1E,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACN,MAAM,CAAC;gBACX,CAAC;gBAED,IAAM,UAAU,GAAG,SAAO,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;gBAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,UAAU,YAAY,6BAAqB,CAAC,CAAC,CAAC;oBAC5C,UAAW,CAAC,OAAO,CAAC,sBAAc,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;gBACxF,CAAC;gBACD,cAAc,CAAC,UAAU,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACP,CAAC;QAED,wBAAwB,UAAsB;YAC1C,EAAE,CAAC,CAAC,UAAU,YAAY,6BAAqB,CAAC,CAAC,CAAC;gBACrB,UAAW,CAAC,OAAO,CAAC,sBAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAChF,CAAC;YAED,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QACxC,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;IACzB,CAAC;IA9CQ,eAAe;QAD3B,sBAAS,CAAC,EAAC,IAAI,EAAE,aAAa,EAAC,CAAC;OACpB,eAAe,CA+C3B;IAAD,sBAAC;CAAA,AA/CD,CAAqC,mCAAsB,GA+C1D;AA/CY,0CAAe","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Reflection, ReflectionFlag, DeclarationReflection } from '../../models/index';\r\nimport { Context } from '../context';\r\nimport { Component, ConverterNodeComponent } from '../components';\r\n\r\n@Component({name: 'node:export'})\r\nexport class ExportConverter extends ConverterNodeComponent<ts.ExportAssignment> {\r\n    /**\r\n     * List of supported TypeScript syntax kinds.\r\n     */\r\n    supports: ts.SyntaxKind[] = [\r\n        ts.SyntaxKind.ExportAssignment\r\n    ];\r\n\r\n    convert(context: Context, node: ts.ExportAssignment): Reflection {\r\n        let symbol: ts.Symbol = undefined;\r\n\r\n        // default export\r\n        if (node.symbol && (node.symbol.flags & ts.SymbolFlags.Alias) === ts.SymbolFlags.Alias) {\r\n            symbol = context.checker.getAliasedSymbol(node.symbol);\r\n        } else {\r\n            let type = context.getTypeAtLocation(node.expression);\r\n            symbol = type ? type.symbol : undefined;\r\n        }\r\n        if (symbol && symbol.declarations) {\r\n            const project = context.project;\r\n            symbol.declarations.forEach((declaration) => {\r\n                if (!declaration.symbol) {\r\n                    return;\r\n                }\r\n                const id = project.symbolMapping[context.getSymbolID(declaration.symbol)];\r\n                if (!id) {\r\n                    return;\r\n                }\r\n\r\n                const reflection = project.reflections[id];\r\n                if (node.isExportEquals && reflection instanceof DeclarationReflection) {\r\n                    (<DeclarationReflection> reflection).setFlag(ReflectionFlag.ExportAssignment, true);\r\n                }\r\n                markAsExported(reflection);\r\n            });\r\n        }\r\n\r\n        function markAsExported(reflection: Reflection) {\r\n            if (reflection instanceof DeclarationReflection) {\r\n                (<DeclarationReflection> reflection).setFlag(ReflectionFlag.Exported, true);\r\n            }\r\n\r\n            reflection.traverse(markAsExported);\r\n        }\r\n\r\n        return context.scope;\r\n    }\r\n}\r\n"]}