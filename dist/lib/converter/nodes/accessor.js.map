{"version":3,"file":"accessor.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/accessor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAgE;AAChE,4CAAwE;AAExE,4CAAkE;AAGlE;IAAuC,qCAA+C;IADtF;QAAA,qEA8BC;QAzBG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,WAAW;YACzB,EAAE,CAAC,UAAU,CAAC,WAAW;SAC5B,CAAC;;IAsBN,CAAC;IAbG,mCAAO,GAAP,UAAQ,OAAgB,EAAE,IAA6B;QACnD,IAAM,QAAQ,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,QAAQ,CAAC,CAAC;QAE3E,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE;YACxB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC1C,QAAQ,CAAC,YAAY,GAAG,uBAAe,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,sBAAc,CAAC,YAAY,CAAC,CAAC;YACjG,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,QAAQ,CAAC,YAAY,GAAG,uBAAe,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,sBAAc,CAAC,YAAY,CAAC,CAAC;YACjG,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IA5BQ,iBAAiB;QAD7B,sBAAS,CAAC,EAAC,IAAI,EAAE,eAAe,EAAC,CAAC;OACtB,iBAAiB,CA6B7B;IAAD,wBAAC;CAAA,AA7BD,CAAuC,mCAAsB,GA6B5D;AA7BY,8CAAiB","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Reflection, ReflectionKind } from '../../models/index';\r\nimport { createDeclaration, createSignature } from '../factories/index';\r\nimport { Context } from '../context';\r\nimport { Component, ConverterNodeComponent } from '../components';\r\n\r\n@Component({name: 'node:accessor'})\r\nexport class AccessorConverter extends ConverterNodeComponent<ts.SignatureDeclaration> {\r\n    /**\r\n     * List of supported TypeScript syntax kinds.\r\n     */\r\n    supports: ts.SyntaxKind[] = [\r\n        ts.SyntaxKind.GetAccessor,\r\n        ts.SyntaxKind.SetAccessor\r\n    ];\r\n\r\n    /**\r\n     * Analyze the given getter declaration node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The signature declaration node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    convert(context: Context, node: ts.SignatureDeclaration): Reflection {\r\n        const accessor = createDeclaration(context, node, ReflectionKind.Accessor);\r\n\r\n        context.withScope(accessor, () => {\r\n            if (node.kind === ts.SyntaxKind.GetAccessor) {\r\n                accessor.getSignature = createSignature(context, node, '__get', ReflectionKind.GetSignature);\r\n            } else {\r\n                accessor.setSignature = createSignature(context, node, '__set', ReflectionKind.SetSignature);\r\n            }\r\n        });\r\n\r\n        return accessor;\r\n    }\r\n}\r\n"]}