{"version":3,"file":"literal-type.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/literal-type.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAIjC,4CAAkE;AAGlE;IAA0C,wCAA0C;IADpF;QAAA,qEAyBC;QApBG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,WAAW;SAC5B,CAAC;;IAkBN,CAAC;IATG,sCAAO,GAAP,UAAQ,OAAgB,EAAE,IAAwB;QAAlD,iBAQC;QAPG,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,IAAI;gBACtB,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;SACN;QAED,OAAO,OAAO,CAAC,KAAK,CAAC;IACzB,CAAC;IAvBQ,oBAAoB;QADhC,sBAAS,CAAC,EAAC,IAAI,EAAE,mBAAmB,EAAC,CAAC;OAC1B,oBAAoB,CAwBhC;IAAD,2BAAC;CAAA,AAxBD,CAA0C,mCAAsB,GAwB/D;AAxBY,oDAAoB","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Reflection } from '../../models/index';\r\nimport { Context } from '../context';\r\nimport { Component, ConverterNodeComponent } from '../components';\r\n\r\n@Component({name: 'node:literal-type'})\r\nexport class TypeLiteralConverter extends ConverterNodeComponent<ts.TypeLiteralNode> {\r\n    /**\r\n     * List of supported TypeScript syntax kinds.\r\n     */\r\n    supports: ts.SyntaxKind[] = [\r\n        ts.SyntaxKind.TypeLiteral\r\n    ];\r\n\r\n    /**\r\n     * Analyze the given type literal node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The type literal node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    convert(context: Context, node: ts.TypeLiteralNode): Reflection {\r\n        if (node.members) {\r\n            node.members.forEach((node) => {\r\n                this.owner.convertNode(context, node);\r\n            });\r\n        }\r\n\r\n        return context.scope;\r\n    }\r\n}\r\n"]}