{"version":3,"file":"enum.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/enum.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAgE;AAChE,4CAAuD;AAEvD,4CAAkE;AAClE,kCAA+C;AAG/C;IAAmC,iCAA0C;IAD7E;QAAA,qEA6CC;QAxCG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,eAAe;SAChC,CAAC;;IAsCN,CAAC;IA7BG,+BAAO,GAAP,UAAQ,OAAgB,EAAE,IAAwB;QAAlD,iBAYC;QAXG,IAAM,WAAW,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,IAAI,CAAC,CAAC;QAE1E,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,KAAmB,UAAY,EAAZ,KAAA,IAAI,CAAC,OAAO,EAAZ,cAAY,EAAZ,IAAY,EAAE;oBAA5B,IAAI,MAAM,SAAA;oBACX,KAAI,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;iBACvC;aACJ;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC;IACvB,CAAC;IASO,qCAAa,GAArB,UAAsB,OAAgB,EAAE,IAAmB;QACvD,IAAM,MAAM,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,UAAU,CAAC,CAAC;QAC3E,IAAI,MAAM,EAAE;YACR,MAAM,CAAC,YAAY,GAAG,2BAAmB,CAAC,IAAI,CAAC,CAAC;SACnD;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IA3CQ,aAAa;QADzB,sBAAS,CAAC,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC;OAClB,aAAa,CA4CzB;IAAD,oBAAC;CAAA,AA5CD,CAAmC,mCAAsB,GA4CxD;AA5CY,sCAAa","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Reflection, ReflectionKind } from '../../models/index';\r\nimport { createDeclaration } from '../factories/index';\r\nimport { Context } from '../context';\r\nimport { Component, ConverterNodeComponent } from '../components';\r\nimport { convertDefaultValue } from '../index';\r\n\r\n@Component({name: 'node:enum'})\r\nexport class EnumConverter extends ConverterNodeComponent<ts.EnumDeclaration> {\r\n    /**\r\n     * List of supported TypeScript syntax kinds.\r\n     */\r\n    supports: ts.SyntaxKind[] = [\r\n        ts.SyntaxKind.EnumDeclaration\r\n    ];\r\n\r\n    /**\r\n     * Analyze the given enumeration declaration node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The enumeration declaration node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    convert(context: Context, node: ts.EnumDeclaration): Reflection {\r\n        const enumeration = createDeclaration(context, node, ReflectionKind.Enum);\r\n\r\n        context.withScope(enumeration, () => {\r\n            if (node.members) {\r\n                for (let member of node.members) {\r\n                    this.convertMember(context, member);\r\n                }\r\n            }\r\n        });\r\n\r\n        return enumeration;\r\n    }\r\n\r\n    /**\r\n     * Analyze the given enumeration member node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The enumeration member node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    private convertMember(context: Context, node: ts.EnumMember): Reflection {\r\n        const member = createDeclaration(context, node, ReflectionKind.EnumMember);\r\n        if (member) {\r\n            member.defaultValue = convertDefaultValue(node);\r\n        }\r\n\r\n        return member;\r\n    }\r\n}\r\n"]}