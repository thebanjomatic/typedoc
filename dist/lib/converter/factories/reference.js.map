{"version":3,"file":"reference.js","sourceRoot":"","sources":["../../../../src/lib/converter/factories/reference.ts"],"names":[],"mappings":";;AAEA,kDAAyD;AAWzD,6BAAoC,OAAgB,EAAE,MAAiB,EAAE,aAAuB;IAC5F,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IAChC,IAAM,EAAE,GAAQ,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAC5C,IAAI,IAAI,GAAM,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAE7C,EAAE,CAAC,CAAC,aAAa,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QACjC,IAAI,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC;IAC9D,CAAC;IAED,MAAM,CAAC,IAAI,qBAAa,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AACvC,CAAC;AAVD,kDAUC","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { ReferenceType } from '../../models/types/index';\r\nimport { Context } from '../context';\r\n\r\n/**\r\n * Create a new reference type pointing to the given symbol.\r\n *\r\n * @param context  The context object describing the current state the converter is in.\r\n * @param symbol  The symbol the reference type should point to.\r\n * @param includeParent  Should the name of the parent be provided within the fallback name?\r\n * @returns A new reference type instance pointing to the given symbol.\r\n */\r\nexport function createReferenceType(context: Context, symbol: ts.Symbol, includeParent?: boolean): ReferenceType {\r\n    const checker = context.checker;\r\n    const id      = context.getSymbolID(symbol);\r\n    let name    = checker.symbolToString(symbol);\r\n\r\n    if (includeParent && symbol.parent) {\r\n        name = checker.symbolToString(symbol.parent) + '.' + name;\r\n    }\r\n\r\n    return new ReferenceType(name, id);\r\n}\r\n"]}