{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../../src/lib/converter/factories/type-parameter.ts"],"names":[],"mappings":";;AAEA,4CAAwG;AAExG,0CAAyC;AASzC,SAAgB,mBAAmB,CAAC,OAAgB,EAAE,IAAiC;IACnF,IAAM,aAAa,GAAG,IAAI,yBAAiB,EAAE,CAAC;IAC9C,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IACtC,IAAI,IAAI,CAAC,UAAU,EAAE;QACjB,aAAa,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;KACtF;IAED,IAAM,UAAU,GAA4B,OAAO,CAAC,KAAK,CAAC;IAC1D,IAAM,uBAAuB,GAAG,IAAI,+BAAuB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IAEvF,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE;QAC5B,UAAU,CAAC,cAAc,GAAG,EAAE,CAAC;KAClC;IACD,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAExD,OAAO,CAAC,kBAAkB,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC;IAC1D,OAAO,CAAC,OAAO,CAAC,qBAAS,CAAC,2BAA2B,EAAE,uBAAuB,EAAE,IAAI,CAAC,CAAC;IAEtF,OAAO,aAAa,CAAC;AACzB,CAAC;AAnBD,kDAmBC","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { TypeParameterContainer, TypeParameterReflection, TypeParameterType } from '../../models/index';\r\nimport { Context } from '../context';\r\nimport { Converter } from '../converter';\r\n\r\n/**\r\n * Create a type parameter reflection for the given node.\r\n *\r\n * @param context  The context object describing the current state the converter is in.\r\n * @param node  The type parameter node that should be reflected.\r\n * @returns The newly created type parameter reflection.\r\n */\r\nexport function createTypeParameter(context: Context, node: ts.TypeParameterDeclaration): TypeParameterType {\r\n    const typeParameter = new TypeParameterType();\r\n    typeParameter.name = node.symbol.name;\r\n    if (node.constraint) {\r\n        typeParameter.constraint = context.converter.convertType(context, node.constraint);\r\n    }\r\n\r\n    const reflection = <TypeParameterContainer> context.scope;\r\n    const typeParameterReflection = new TypeParameterReflection(reflection, typeParameter);\r\n\r\n    if (!reflection.typeParameters) {\r\n        reflection.typeParameters = [];\r\n    }\r\n    reflection.typeParameters.push(typeParameterReflection);\r\n\r\n    context.registerReflection(typeParameterReflection, node);\r\n    context.trigger(Converter.EVENT_CREATE_TYPE_PARAMETER, typeParameterReflection, node);\r\n\r\n    return typeParameter;\r\n}\r\n"]}