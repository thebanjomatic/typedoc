{"version":3,"file":"convert-expression.js","sourceRoot":"","sources":["../../../src/lib/converter/convert-expression.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AACjC,oCAAsC;AAStC,SAAgB,mBAAmB,CAAC,IAAkE;IAClG,IAAI,IAAI,CAAC,WAAW,EAAE;QAClB,OAAO,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC9C;SAAM;QACH,OAAO,IAAI,CAAC;KACf;AACL,CAAC;AAND,kDAMC;AAED,SAAgB,iBAAiB,CAAC,UAAyB;IACvD,QAAQ,UAAU,CAAC,IAAI,EAAE;QACrB,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa;YAC5B,OAAO,GAAG,GAA2B,UAAW,CAAC,IAAI,GAAG,GAAG,CAAC;QAChE,KAAK,EAAE,CAAC,UAAU,CAAC,cAAc;YAC7B,OAA+B,UAAW,CAAC,IAAI,CAAC;QACpD,KAAK,EAAE,CAAC,UAAU,CAAC,WAAW;YAC1B,OAAO,MAAM,CAAC;QAClB,KAAK,EAAE,CAAC,UAAU,CAAC,YAAY;YAC3B,OAAO,OAAO,CAAC;QACnB;YACI,IAAM,MAAM,GAAG,GAAG,CAAC,mBAAmB,CAAW,UAAU,CAAC,CAAC;YAC7D,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;KACpE;AACL,CAAC;AAdD,8CAcC","sourcesContent":["import * as ts from 'typescript';\r\nimport * as _ts from '../ts-internal';\r\n\r\n/**\r\n * Return the default value of the given node.\r\n *\r\n * @param node  The TypeScript node whose default value should be extracted.\r\n * @returns The default value as a string.\r\n */\r\n\r\nexport function convertDefaultValue(node: ts.VariableDeclaration|ts.ParameterDeclaration|ts.EnumMember): string {\r\n    if (node.initializer) {\r\n        return convertExpression(node.initializer);\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function convertExpression(expression: ts.Expression): string {\r\n    switch (expression.kind) {\r\n        case ts.SyntaxKind.StringLiteral:\r\n            return '\"' + (<ts.LiteralExpression> expression).text + '\"';\r\n        case ts.SyntaxKind.NumericLiteral:\r\n            return (<ts.LiteralExpression> expression).text;\r\n        case ts.SyntaxKind.TrueKeyword:\r\n            return 'true';\r\n        case ts.SyntaxKind.FalseKeyword:\r\n            return 'false';\r\n        default:\r\n            const source = _ts.getSourceFileOfNode(<ts.Node> expression);\r\n            return source.text.substring(expression.pos, expression.end);\r\n    }\r\n}\r\n"]}