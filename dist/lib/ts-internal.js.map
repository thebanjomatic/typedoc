{"version":3,"file":"ts-internal.js","sourceRoot":"","sources":["../../src/lib/ts-internal.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\nconst tsany = ts as any;\r\n\r\n/**\r\n * Expose the internal TypeScript APIs that are used by TypeDoc\r\n */\r\ndeclare module 'typescript' {\r\n  interface Symbol {\r\n    // https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/types.ts#L2658\r\n    id?: number;\r\n    // https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/types.ts#L2660\r\n    parent?: ts.Symbol;\r\n  }\r\n\r\n  interface Node {\r\n    // https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/types.ts#L497\r\n    symbol?: ts.Symbol;\r\n    // https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/types.ts#L500\r\n    localSymbol?: ts.Symbol;\r\n    // https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/types.ts#L499\r\n    nextContainer?: ts.Node;\r\n  }\r\n}\r\n\r\nfunction applyWithDiag(fnName: string, thisVal: any, args: IArguments) {\r\n   if (tsany[fnName] === undefined) {\r\n     throw new Error(`${fnName} was not found`);\r\n   }\r\n   return tsany[fnName].apply(thisVal, args);\r\n}\r\n\r\n/**\r\n * These functions are in \"core\" and are marked as @internal:\r\n * https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/core.ts#L9-L10\r\n */\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/core.ts#L1133-LL1134\r\nexport function createCompilerDiagnostic(message: ts.DiagnosticMessage, ...args: (string | number)[]): ts.Diagnostic;\r\nexport function createCompilerDiagnostic(message: ts.DiagnosticMessage): ts.Diagnostic;\r\nexport function createCompilerDiagnostic() {\r\n  return applyWithDiag('createCompilerDiagnostic', this, arguments);\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/core.ts#L1191\r\nexport function compareValues<T>(a: T, b: T): number {\r\n   return applyWithDiag('compareValues', this, arguments); // Actually returns a ts.Comparison which is also internal\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/core.ts#L1281\r\nexport function normalizeSlashes(path: string): string {\r\n  return applyWithDiag('normalizeSlashes', this, arguments);\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/core.ts#L1288\r\nexport function getRootLength(path: string): number {\r\n  return applyWithDiag('getRootLength', this, arguments);\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/core.ts#L1368-L1370\r\nexport function getDirectoryPath(path: ts.Path): ts.Path;\r\nexport function getDirectoryPath(path: string): string;\r\nexport function getDirectoryPath() {\r\n  return applyWithDiag('getDirectoryPath', this, arguments);\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.2.1/src/compiler/core.ts#L1418\r\nexport function normalizePath(path: string): string {\r\n  return tsany.normalizePath(path);\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.2.1/src/compiler/core.ts#L1628\r\nexport function combinePaths(path1: string, path2: string): string {\r\n  return tsany.combinePaths(path1, path2);\r\n}\r\n\r\n/**\r\n * These functions are in \"utilities\" and are marked as @internal:\r\n * https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/utilities.ts#L3-L4\r\n */\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/utilities.ts#L152\r\nexport function getSourceFileOfNode(node: ts.Node): ts.SourceFile {\r\n  return applyWithDiag('getSourceFileOfNode', this, arguments);\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/utilities.ts#L301\r\nexport function getTextOfNode(node: ts.Node, includeTrivia = false): string {\r\n  return applyWithDiag('getTextOfNode', this, arguments);\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/utilities.ts#L473\r\nexport function declarationNameToString(name: ts.DeclarationName): string {\r\n  return applyWithDiag('declarationNameToString', this, arguments);\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/utilities.ts#L1423\r\nexport function getJSDocCommentRanges(node: ts.Node, text: string) {\r\n  return applyWithDiag('getJSDocCommentRanges', this, arguments);\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/utilities.ts#L3738\r\nexport function isBindingPattern(node: ts.Node): node is ts.BindingPattern {\r\n  return applyWithDiag('isBindingPattern', this, arguments);\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/utilities.ts#L1729\r\nexport function getClassExtendsHeritageElement(node: ts.ClassLikeDeclaration | ts.InterfaceDeclaration) {\r\n  return applyWithDiag('getClassExtendsHeritageElement', this, arguments);\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/utilities.ts#L1734\r\nexport function getClassImplementsHeritageClauseElements(node: ts.ClassLikeDeclaration) {\r\n  return applyWithDiag('getClassImplementsHeritageClauseElements', this, arguments);\r\n}\r\n\r\n// https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/utilities.ts#L1739\r\nexport function getInterfaceBaseTypeNodes(node: ts.InterfaceDeclaration) {\r\n  return applyWithDiag('getInterfaceBaseTypeNodes', this, arguments);\r\n}\r\n\r\n/**\r\n * https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/types.ts#L3347\r\n * This is large enum of char codes.\r\n *\r\n * Faking the enum as a var (only certain codes are used by TypeDoc)\r\n */\r\nexport const CharacterCodes: {\r\n  [key: string]: number;\r\n  doubleQuote: number;\r\n  space: number;\r\n  minus: number;\r\n  at: number;\r\n} = tsany.CharacterCodes;\r\n\r\nexport const optionDeclarations: CommandLineOption[] = tsany.optionDeclarations;\r\n\r\n/**\r\n * Command line options\r\n *\r\n * https://github.com/Microsoft/TypeScript/blob/v2.1.4/src/compiler/types.ts#L3344\r\n */\r\nexport interface CommandLineOption {\r\n  name: string;\r\n  type: string;\r\n  shortName: string;\r\n  description: DiagnosticsEnumValue;\r\n  paramType: DiagnosticsEnumValue;\r\n}\r\n\r\nexport const Diagnostics: {\r\n  [key: string]: DiagnosticsEnumValue;\r\n  FILE: DiagnosticsEnumValue;\r\n  DIRECTORY: DiagnosticsEnumValue;\r\n} = tsany.Diagnostics;\r\n\r\nexport interface DiagnosticsEnumValue {\r\n  code: number;\r\n  category: ts.DiagnosticCategory;\r\n  key: string;\r\n  message: string;\r\n}\r\n"]}