{"version":3,"file":"events.js","sourceRoot":"","sources":["../../../src/lib/utils/events.ts"],"names":[],"mappings":"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","sourcesContent":["// Backbone.js 1.2.3\r\n// (c) 2010-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n// Backbone may be freely distributed under the MIT license.\r\n// For all details and documentation:\r\n// http://backbonejs.org\r\n//\r\n// The Events object is a typesafe conversion of Backbones Events object:\r\n// https://github.com/jashkenas/backbone/blob/05fde9e201f7e2137796663081105cd6dad12a98/backbone.js#L119-L374\r\n\r\nimport * as _ from 'lodash';\r\n\r\nexport interface EventCallback extends Function {\r\n    _callback?: Function;\r\n}\r\n\r\ninterface EventListener {\r\n    obj: any;\r\n    objId: number;\r\n    id: number;\r\n    listeningTo: EventListeners;\r\n    count: number;\r\n}\r\n\r\ninterface EventListeners {\r\n    [id: number]: EventListener;\r\n}\r\n\r\ninterface EventHandler {\r\n    callback: EventCallback;\r\n    context: any;\r\n    ctx: any;\r\n    listening: EventListener;\r\n    priority: number;\r\n}\r\n\r\ninterface EventHandlers {\r\n    [name: string]: EventHandler[];\r\n}\r\n\r\nexport interface EventMap {\r\n    [name: string]: EventCallback;\r\n}\r\n\r\ninterface EventIteratee<T, U> {\r\n    (events: U, name: string, callback: Function, options: T): U;\r\n}\r\n\r\ninterface OnApiOptions {\r\n    context: any;\r\n    ctx: any;\r\n    listening: any;\r\n    priority: number;\r\n}\r\n\r\ninterface OffApiOptions {\r\n    context: any;\r\n    listeners: any;\r\n}\r\n\r\n// Regular expression used to split event strings.\r\nconst eventSplitter = /\\s+/;\r\n\r\n/**\r\n * Iterates over the standard `event, callback` (as well as the fancy multiple\r\n * space-separated events `\"change blur\", callback` and jQuery-style event\r\n * maps `{event: callback}`).\r\n */\r\nfunction eventsApi<T, U>(iteratee: EventIteratee<T, U>, events: U, name: EventMap|string, callback: EventCallback, options: T): U {\r\n    let i = 0, names: string[];\r\n\r\n    if (name && typeof name === 'object') {\r\n        // Handle event maps.\r\n        if (callback !== void 0 && 'context' in options && options['context'] === void 0) {\r\n            options['context'] = callback;\r\n        }\r\n\r\n        for (names = _.keys(name); i < names.length ; i++) {\r\n            events = eventsApi(iteratee, events, names[i], name[names[i]], options);\r\n        }\r\n    } else if (name && typeof name === 'string' && eventSplitter.test(name)) {\r\n        // Handle space separated event names by delegating them individually.\r\n        for (names = name.split(eventSplitter); i < names.length; i++) {\r\n            events = iteratee(events, names[i], callback, options);\r\n        }\r\n    } else {\r\n        // Finally, standard events.\r\n        events = iteratee(events, <any> name, callback, options);\r\n    }\r\n\r\n    return events;\r\n}\r\n\r\n/**\r\n * The reducing API that adds a callback to the `events` object.\r\n */\r\nfunction onApi(events: EventHandlers, name: string, callback: EventCallback, options: OnApiOptions): EventHandlers {\r\n    if (callback) {\r\n        const handlers = events[name] || (events[name] = []);\r\n        const context = options.context, ctx = options.ctx, listening = options.listening, priority = options.priority;\r\n        if (listening) {\r\n            listening.count++;\r\n        }\r\n\r\n        handlers.push({\r\n            callback:  callback,\r\n            context:   context,\r\n            ctx:       context || ctx,\r\n            listening: listening,\r\n            priority:  priority\r\n        });\r\n\r\n        handlers.sort((a, b) => b.priority - a.priority);\r\n    }\r\n\r\n    return events;\r\n}\r\n\r\n/**\r\n * The reducing API that removes a callback from the `events` object.\r\n */\r\nfunction offApi(events: EventHandlers, name: string, callback: EventCallback, options: OffApiOptions): EventHandlers {\r\n    if (!events) {\r\n        return;\r\n    }\r\n\r\n    let i = 0, listening: EventListener;\r\n    const context = options.context, listeners = options.listeners;\r\n\r\n    // Delete all events listeners and \"drop\" events.\r\n    if (!name && !callback && !context) {\r\n        const ids = _.keys(listeners);\r\n        for (; i < ids.length; i++) {\r\n            listening = listeners[ids[i]];\r\n            delete listeners[listening.id];\r\n            delete listening.listeningTo[listening.objId];\r\n        }\r\n        return;\r\n    }\r\n\r\n    const names = name ? [name] : _.keys(events);\r\n    for (; i < names.length; i++) {\r\n        name = names[i];\r\n        const handlers = events[name];\r\n\r\n        // Bail out if there are no events stored.\r\n        if (!handlers) {\r\n            break;\r\n        }\r\n\r\n        // Replace events if there are any remaining.  Otherwise, clean up.\r\n        const remaining: EventHandler[] = [];\r\n        for (let j = 0; j < handlers.length; j++) {\r\n            const handler = handlers[j];\r\n            if (\r\n                callback && callback !== handler.callback &&\r\n                callback !== handler.callback._callback ||\r\n                context && context !== handler.context\r\n            ) {\r\n                remaining.push(handler);\r\n            } else {\r\n                listening = handler.listening;\r\n                if (listening && --listening.count === 0) {\r\n                    delete listeners[listening.id];\r\n                    delete listening.listeningTo[listening.objId];\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update tail event if the list has any events.  Otherwise, clean up.\r\n        if (remaining.length) {\r\n            events[name] = remaining;\r\n        } else {\r\n            delete events[name];\r\n        }\r\n    }\r\n\r\n    if (_.size(events)) {\r\n        return events;\r\n    }\r\n}\r\n\r\n/**\r\n * Reduces the event callbacks into a map of `{event: onceWrapper`.}\r\n * `offer` unbinds the `onceWrapper` after it has been called.\r\n */\r\nfunction onceMap(map: EventMap, name: string, callback: EventCallback, offer: Function): EventMap {\r\n    if (callback) {\r\n        const once = map[name] = <EventCallback> _.once(function() {\r\n            offer(name, once);\r\n            callback.apply(this, arguments);\r\n        });\r\n\r\n        once._callback = callback;\r\n    }\r\n\r\n    return map;\r\n}\r\n\r\n/**\r\n * Handles triggering the appropriate event callbacks.\r\n */\r\nfunction triggerApi(objEvents: EventHandlers, name: string, callback: Function, args: any[], triggerer: {(events: EventHandler[], args: any[]): void} = triggerEvents): EventHandlers {\r\n    if (objEvents) {\r\n        const events = objEvents[name];\r\n        let allEvents = objEvents['all'];\r\n        if (events && allEvents) {\r\n            allEvents = allEvents.slice();\r\n        }\r\n        if (events) {\r\n            triggerer(events, args);\r\n        }\r\n        if (allEvents) {\r\n            triggerer(allEvents, [name].concat(args));\r\n        }\r\n    }\r\n\r\n    return objEvents;\r\n}\r\n\r\n/**\r\n * A difficult-to-believe, but optimized internal dispatch function for\r\n * triggering events. Tries to keep the usual cases speedy (most internal\r\n * Backbone events have 3 arguments).\r\n */\r\nfunction triggerEvents(events: EventHandler[], args: any[]) {\r\n    let ev: EventHandler, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\r\n    switch (args.length) {\r\n        case 0: while (++i < l) { (ev = events[i]).callback.call(ev.ctx); } return;\r\n        case 1: while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1); } return;\r\n        case 2: while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2); } return;\r\n        case 3: while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); } return;\r\n        default: while (++i < l) { (ev = events[i]).callback.apply(ev.ctx, args); } return;\r\n    }\r\n}\r\n\r\n/**\r\n * An event object that can be processed with [[Events]].\r\n */\r\nexport class Event {\r\n    /**\r\n     * The name of the event.\r\n     */\r\n    private _name: string;\r\n\r\n    /**\r\n     * Has [[Event.stopPropagation]] been called?\r\n     */\r\n    private _isPropagationStopped: boolean;\r\n\r\n    /**\r\n     * Has [[Event.preventDefault]] been called?\r\n     */\r\n    private _isDefaultPrevented: boolean;\r\n\r\n    /**\r\n     * Create a new Event instance.\r\n     */\r\n    constructor(name: string) {\r\n        this._name = name;\r\n    }\r\n\r\n    /**\r\n     * Stop the propagation of this event. Remaining event handlers will not be executed.\r\n     */\r\n    stopPropagation() {\r\n        this._isPropagationStopped = true;\r\n    }\r\n\r\n    /**\r\n     * Prevent the default action associated with this event from being executed.\r\n     */\r\n    preventDefault() {\r\n        this._isDefaultPrevented = true;\r\n    }\r\n\r\n    /**\r\n     * Return the event name.\r\n     */\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Has [[Event.stopPropagation]] been called?\r\n     */\r\n    get isPropagationStopped(): boolean {\r\n        return this._isPropagationStopped;\r\n    }\r\n\r\n    /**\r\n     * Has [[Event.preventDefault]] been called?\r\n     */\r\n    get isDefaultPrevented(): boolean {\r\n        return this._isDefaultPrevented;\r\n    }\r\n}\r\n\r\n/**\r\n * A class that provides a custom event channel.\r\n *\r\n * You may bind a callback to an event with `on` or remove with `off`;\r\n * `trigger`-ing an event fires all callbacks in succession.\r\n */\r\nexport class EventDispatcher {\r\n    /**\r\n     * Map of all handlers registered with the \"on\" function.\r\n     */\r\n    private _events: EventHandlers;\r\n\r\n    /**\r\n     * Map of all objects this instance is listening to.\r\n     */\r\n    private _listeningTo: EventListeners;\r\n\r\n    /**\r\n     * Map of all objects that are listening to this instance.\r\n     */\r\n    private _listeners: EventListeners;\r\n\r\n    /**\r\n     * A unique id that identifies this instance.\r\n     */\r\n    private _listenId: string;\r\n\r\n    /**\r\n     * Bind an event to a `callback` function. Passing `\"all\"` will bind\r\n     * the callback to all events fired.\r\n     */\r\n    on(eventMap: EventMap, context?: any);\r\n    on(eventMap: EventMap, callback?: EventCallback, context?: any, priority?: number);\r\n    on(name: string, callback: EventCallback, context?: any, priority?: number);\r\n    on(nameOrMap: EventMap|string, callback: EventCallback, context?: any, priority?: number) {\r\n        this.internalOn(nameOrMap, callback, context, priority);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Guard the `listening` argument from the public API.\r\n     */\r\n    private internalOn(name: EventMap|string, callback: EventCallback, context?: any, priority: number = 0, listening?: EventListener) {\r\n        this._events = eventsApi(onApi, this._events || <EventHandlers> {}, name, callback, {\r\n            context: context,\r\n            ctx: this,\r\n            listening: listening,\r\n            priority: priority\r\n        });\r\n\r\n        if (listening) {\r\n            const listeners = this._listeners || (this._listeners = {});\r\n            listeners[listening.id] = listening;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bind an event to only be triggered a single time. After the first time\r\n     * the callback is invoked, its listener will be removed. If multiple events\r\n     * are passed in using the space-separated syntax, the handler will fire\r\n     * once for each event, not once for a combination of all events.\r\n     */\r\n    once(eventMap: EventMap, context?: any);\r\n    once(name: string, callback: EventCallback, context?: any, priority?: any);\r\n    once(name: EventMap|string, callback?: EventCallback, context?: any, priority?: number) {\r\n        // Map the event into a `{event: once}` object.\r\n        const events = eventsApi(onceMap, <EventMap> {}, name, callback, _.bind(this.off, this));\r\n        return this.on(events, void 0, context, priority);\r\n    }\r\n\r\n    /**\r\n     * Remove one or many callbacks. If `context` is null, removes all\r\n     * callbacks with that function. If `callback` is null, removes all\r\n     * callbacks for the event. If `name` is null, removes all bound\r\n     * callbacks for all events.\r\n     */\r\n    off();\r\n    off(eventMap: EventMap, context?: any);\r\n    off(name: string, callback?: EventCallback, context?: any);\r\n    off(name?: EventMap|string, callback?: EventCallback, context?: any) {\r\n        if (!this._events) {\r\n            return this;\r\n        }\r\n\r\n        this._events = eventsApi(offApi, this._events, name, callback, {\r\n            context: context,\r\n            listeners: this._listeners\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Inversion-of-control versions of `on`. Tell *this* object to listen to\r\n     * an event in another object... keeping track of what it's listening to\r\n     * for easier unbinding later.\r\n     */\r\n    listenTo(obj: EventDispatcher, name: EventMap|string, callback?: EventCallback, priority?: number) {\r\n        if (!obj) {\r\n            return this;\r\n        }\r\n        const id = obj._listenId || (obj._listenId = _.uniqueId('l'));\r\n        const listeningTo = this._listeningTo || (this._listeningTo = {});\r\n        let listening = listeningTo[id];\r\n\r\n        // This object is not listening to any other events on `obj` yet.\r\n        // Setup the necessary references to track the listening callbacks.\r\n        if (!listening) {\r\n            const thisId = this._listenId || (this._listenId = _.uniqueId('l'));\r\n            listening = listeningTo[id] = {\r\n                obj: obj,\r\n                objId: id,\r\n                id: thisId,\r\n                listeningTo: listeningTo,\r\n                count: 0\r\n            };\r\n        }\r\n\r\n        // Bind callbacks on obj, and keep track of them on listening.\r\n        obj.internalOn(name, callback, this, priority, listening);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Inversion-of-control versions of `once`.\r\n     */\r\n    listenToOnce(obj: EventDispatcher, eventMap: EventMap);\r\n    listenToOnce(obj: EventDispatcher, name: string, callback: EventCallback, priority?: number);\r\n    listenToOnce(obj: EventDispatcher, name: EventMap|string, callback?: EventCallback, priority?: number) {\r\n        // Map the event into a `{event: once}` object.\r\n        const events = eventsApi(onceMap, <EventMap> {}, name, callback, _.bind(this.stopListening, this, obj));\r\n        return this.listenTo(obj, events, void 0, priority);\r\n    }\r\n\r\n    /**\r\n     * Tell this object to stop listening to either specific events ... or\r\n     * to every object it's currently listening to.\r\n     */\r\n    stopListening(obj?: EventDispatcher, name?: EventMap|string, callback?: EventCallback) {\r\n        const listeningTo = this._listeningTo;\r\n        if (!listeningTo) {\r\n            return this;\r\n        }\r\n\r\n        const ids = obj ? [obj._listenId] : _.keys(listeningTo);\r\n        for (let i = 0; i < ids.length; i++) {\r\n            const listening = listeningTo[ids[i]];\r\n\r\n            // If listening doesn't exist, this object is not currently\r\n            // listening to obj. Break out early.\r\n            if (!listening) {\r\n                break;\r\n            }\r\n\r\n            listening.obj.off(name, callback, this);\r\n        }\r\n\r\n        if (_.isEmpty(listeningTo)) {\r\n            this._listeningTo = void 0;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Trigger one or many events, firing all bound callbacks. Callbacks are\r\n     * passed the same arguments as `trigger` is, apart from the event name\r\n     * (unless you're listening on `\"all\"`, which will cause your callback to\r\n     * receive the true name of the event as the first argument).\r\n     */\r\n    trigger(name: Event|EventMap|string, ...args: any[]) {\r\n        if (!this._events) {\r\n            return this;\r\n        }\r\n\r\n        if (name instanceof Event) {\r\n            triggerApi(this._events, name.name, void 0, [name], (events: EventHandler[], args: any[]) => {\r\n                let ev: EventHandler, i = -1, l = events.length;\r\n                while (++i < l) {\r\n                    if (name.isPropagationStopped) {\r\n                        return;\r\n                    }\r\n                    ev = events[i];\r\n                    ev.callback.apply(ev.ctx, args);\r\n                }\r\n            });\r\n        } else {\r\n            eventsApi(triggerApi, this._events, <EventMap|string> name, void 0, args);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n"]}