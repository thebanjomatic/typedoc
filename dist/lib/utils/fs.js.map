{"version":3,"file":"fs.js","sourceRoot":"","sources":["../../../src/lib/utils/fs.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\nimport * as _ts from '../ts-internal';\r\nimport * as FS from 'fs';\r\n\r\n/**\r\n * List of known existent directories. Used to speed up [[directoryExists]].\r\n */\r\nconst existingDirectories: ts.MapLike<boolean> = {};\r\n\r\n/**\r\n * Normalize the given path.\r\n *\r\n * @param path  The path that should be normalized.\r\n * @returns The normalized path.\r\n */\r\nexport function normalizePath(path: string) {\r\n    return path.replace(/\\\\/g, '/');\r\n}\r\n\r\n/**\r\n * Test whether the given directory exists.\r\n *\r\n * @param directoryPath  The directory that should be tested.\r\n * @returns TRUE if the given directory exists, FALSE otherwise.\r\n */\r\nexport function directoryExists(directoryPath: string): boolean {\r\n    if (existingDirectories.hasOwnProperty(directoryPath)) {\r\n        return true;\r\n    }\r\n\r\n    if (ts.sys.directoryExists(directoryPath)) {\r\n        existingDirectories[directoryPath] = true;\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Make sure that the given directory exists.\r\n *\r\n * @param directoryPath  The directory that should be validated.\r\n */\r\nexport function ensureDirectoriesExist(directoryPath: string) {\r\n    if (directoryPath.length > _ts.getRootLength(directoryPath) && !directoryExists(directoryPath)) {\r\n        const parentDirectory = _ts.getDirectoryPath(directoryPath);\r\n        ensureDirectoriesExist(parentDirectory);\r\n        ts.sys.createDirectory(directoryPath);\r\n    }\r\n}\r\n\r\n/**\r\n * Write a file to disc.\r\n *\r\n * If the containing directory does not exist it will be created.\r\n *\r\n * @param fileName  The name of the file that should be written.\r\n * @param data  The contents of the file.\r\n * @param writeByteOrderMark  Whether the UTF-8 BOM should be written or not.\r\n * @param onError  A callback that will be invoked if an error occurs.\r\n */\r\nexport function writeFile(fileName: string, data: string, writeByteOrderMark: boolean, onError?: (message: string) => void) {\r\n    try {\r\n        ensureDirectoriesExist(_ts.getDirectoryPath(normalizePath(fileName)));\r\n        ts.sys.writeFile(fileName, data, writeByteOrderMark);\r\n    } catch (e) {\r\n        if (onError) {\r\n            onError(e.message);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Load the given file and return its contents.\r\n *\r\n * @param file  The path of the file to read.\r\n * @returns The files contents.\r\n */\r\nexport function readFile(file: string): string {\r\n    const buffer = FS.readFileSync(file);\r\n    switch (buffer[0]) {\r\n        case 0xFE:\r\n            if (buffer[1] === 0xFF) {\r\n                let i = 0;\r\n                while ((i + 1) < buffer.length) {\r\n                    const temp = buffer[i];\r\n                    buffer[i] = buffer[i + 1];\r\n                    buffer[i + 1] = temp;\r\n                    i += 2;\r\n                }\r\n                return buffer.toString('ucs2', 2);\r\n            }\r\n            break;\r\n        case 0xFF:\r\n            if (buffer[1] === 0xFE) {\r\n                return buffer.toString('ucs2', 2);\r\n            }\r\n            break;\r\n        case 0xEF:\r\n            if (buffer[1] === 0xBB) {\r\n                return buffer.toString('utf8', 3);\r\n            }\r\n    }\r\n\r\n    return buffer.toString('utf8', 0);\r\n}\r\n"]}