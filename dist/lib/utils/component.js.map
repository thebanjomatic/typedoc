{"version":3,"file":"component.js","sourceRoot":"","sources":["../../../src/lib/utils/component.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\r\n\r\nimport { Application } from '../application';\r\nimport { EventDispatcher, Event, EventMap } from './events';\r\nimport { DeclarationOption } from './options/declaration';\r\n\r\nexport interface ComponentHost {\r\n    application: Application;\r\n}\r\n\r\nexport interface Component extends AbstractComponent<ComponentHost> {\r\n\r\n}\r\n\r\nexport interface ComponentClass<T extends Component> extends Function {\r\n    new(owner: ComponentHost): T;\r\n}\r\n\r\nexport interface ComponentOptions {\r\n    name?: string;\r\n    childClass?: Function;\r\n    internal?: boolean;\r\n}\r\n\r\nconst childMappings: {host: any, child: Function}[] = [];\r\n\r\nexport function Component(options: ComponentOptions): ClassDecorator {\r\n    return (target: Function) => {\r\n        const proto = target.prototype;\r\n        if (!(proto instanceof AbstractComponent)) {\r\n            throw new Error('The `Component` decorator can only be used with a subclass of `AbstractComponent`.');\r\n        }\r\n\r\n        if (options.childClass) {\r\n            if (!(proto instanceof ChildableComponent)) {\r\n                throw new Error('The `Component` decorator accepts the parameter `childClass` only when used with a subclass of `ChildableComponent`.');\r\n            }\r\n\r\n            childMappings.push({\r\n                host: proto,\r\n                child: options.childClass\r\n            });\r\n        }\r\n\r\n        const name = options.name;\r\n        if (name) {\r\n            proto.componentName = name;\r\n        }\r\n\r\n        const internal = !!options.internal;\r\n        if (name && !internal) {\r\n            for (let childMapping of childMappings) {\r\n                if (!(proto instanceof childMapping.child)) {\r\n                    continue;\r\n                }\r\n\r\n                const host = childMapping.host;\r\n                const defaults = host._defaultComponents || (host._defaultComponents = {});\r\n                defaults[name] = target;\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport function Option(options: DeclarationOption): PropertyDecorator {\r\n    return function(target: AbstractComponent<any>, propertyKey: string) {\r\n        if (!(target instanceof AbstractComponent)) {\r\n            throw new Error('The `Option` decorator can only be used on properties within an `AbstractComponent` subclass.');\r\n        }\r\n\r\n        const list = target['_componentOptions'] || (target['_componentOptions'] = []);\r\n        options.component = target['_componentName'];\r\n        list.push(options);\r\n\r\n        Object.defineProperty(target, propertyKey, {\r\n            get: function () {\r\n                return this.application.options.getValue(options.name);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n    };\r\n}\r\n\r\nexport class ComponentEvent extends Event {\r\n    owner: ComponentHost;\r\n\r\n    component: AbstractComponent<ComponentHost>;\r\n\r\n    static ADDED = 'componentAdded';\r\n\r\n    static REMOVED = 'componentRemoved';\r\n\r\n    constructor(name: string, owner: ComponentHost, component: AbstractComponent<ComponentHost>) {\r\n        super(name);\r\n        this.owner = owner;\r\n        this.component = component;\r\n    }\r\n}\r\n\r\n/**\r\n * Component base class.\r\n */\r\nexport abstract class AbstractComponent<O extends ComponentHost> extends EventDispatcher implements ComponentHost {\r\n    /**\r\n     * The owner of this component instance.\r\n     */\r\n    private _componentOwner: O;\r\n\r\n    /**\r\n     * The name of this component as set by the @Component decorator.\r\n     */\r\n    public componentName: string;\r\n\r\n    /**\r\n     * A list of options defined by this component.\r\n     */\r\n    private _componentOptions: DeclarationOption[];\r\n\r\n    /**\r\n     * Create new Component instance.\r\n     */\r\n    constructor(owner: O) {\r\n        super();\r\n        this._componentOwner = owner;\r\n        this.initialize();\r\n    }\r\n\r\n    /**\r\n     * Initialize this component.\r\n     */\r\n    protected initialize() {}\r\n\r\n    protected bubble(name: Event|EventMap|string, ...args: any[]) {\r\n        super.trigger.apply(this, arguments);\r\n\r\n        const owner = <any> this.owner;\r\n        if (owner instanceof AbstractComponent) {\r\n            owner.bubble.apply(this._componentOwner, arguments);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return all option declarations emitted by this component.\r\n     */\r\n    getOptionDeclarations(): DeclarationOption[] {\r\n        return this._componentOptions ? this._componentOptions.slice() : [];\r\n    }\r\n\r\n    /**\r\n     * Return the application / root component instance.\r\n     */\r\n    get application(): Application {\r\n        if (this._componentOwner) {\r\n            return this._componentOwner.application;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the owner of this component.\r\n     */\r\n    get owner(): O {\r\n        return this._componentOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * Component base class.\r\n */\r\nexport abstract class ChildableComponent<O extends ComponentHost, C extends Component> extends AbstractComponent<O> {\r\n    /**\r\n     *\r\n     */\r\n    private _componentChildren: {[name: string]: C};\r\n\r\n    private _defaultComponents: {[name: string]: ComponentClass<C>};\r\n\r\n    /**\r\n     * Create new Component instance.\r\n     */\r\n    constructor(owner: O) {\r\n        super(owner);\r\n\r\n        for (let name in this._defaultComponents) {\r\n            this.addComponent(name, this._defaultComponents[name]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieve a plugin instance.\r\n     *\r\n     * @returns  The instance of the plugin or NULL if no plugin with the given class is attached.\r\n     */\r\n    getComponent(name: string): C {\r\n        if (this._componentChildren && this._componentChildren[name]) {\r\n            return this._componentChildren[name];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getComponents(): C[] {\r\n        return _.values<C>(this._componentChildren);\r\n    }\r\n\r\n    hasComponent(name: string): boolean {\r\n        return !!(this._componentChildren && this._componentChildren[name]);\r\n    }\r\n\r\n    addComponent<T extends C & Component>(name: string, componentClass: T|ComponentClass<T>): T {\r\n        if (!this._componentChildren) {\r\n            this._componentChildren = {};\r\n        }\r\n\r\n        if (this._componentChildren[name]) {\r\n            throw new Error('The component `%s` has already been added.');\r\n        } else {\r\n            const component: T = typeof componentClass === 'function' ? new (<ComponentClass<T>> componentClass)(this) : <T> componentClass;\r\n            const event = new ComponentEvent(ComponentEvent.ADDED, this, component);\r\n\r\n            this.bubble(event);\r\n            this._componentChildren[name] = component;\r\n\r\n            return component;\r\n        }\r\n    }\r\n\r\n    removeComponent(name: string): C {\r\n        if (!this._componentChildren) {\r\n            return null;\r\n        }\r\n        const component = this._componentChildren[name];\r\n        if (component) {\r\n            delete this._componentChildren[name];\r\n            component.stopListening();\r\n            this.bubble(new ComponentEvent(ComponentEvent.REMOVED, this, component));\r\n            return component;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    removeAllComponents() {\r\n        if (!this._componentChildren) {\r\n            return;\r\n        }\r\n        for (let name in this._componentChildren) {\r\n            this._componentChildren[name].stopListening();\r\n        }\r\n\r\n        this._componentChildren = {};\r\n    }\r\n}\r\n"]}