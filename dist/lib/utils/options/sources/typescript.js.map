{"version":3,"file":"typescript.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/sources/typescript.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AACjC,0CAA4C;AAE5C,6CAA4C;AAC5C,sCAA8C;AAC9C,8CAAiG;AAGjG;IAAsC,oCAAgB;IAAtD;;IAwEA,CAAC;yBAxEY,gBAAgB;IAYzB,qCAAU,GAAV;QACI,IAAM,OAAO,GAAG,kBAAgB,CAAC,OAAO,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QAEvB,KAAwB,UAAsB,EAAtB,KAAA,GAAG,CAAC,kBAAkB,EAAtB,cAAsB,EAAtB,IAAsB,EAAE;YAA3C,IAAI,WAAW,SAAA;YAChB,IAAI,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC1C,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;aACjC;SACJ;IACL,CAAC;IAKD,gDAAqB,GAArB;QACI,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAEO,sCAAW,GAAnB,UAAoB,MAA6B;QAC7C,IAAM,KAAK,GAAsB;YAC7B,IAAI,EAAO,MAAM,CAAC,IAAI;YACtB,KAAK,EAAM,MAAM,CAAC,SAAS;YAC3B,IAAI,EAAO,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI;YAC7D,KAAK,EAAM,4BAAc,CAAC,UAAU;YACpC,SAAS,EAAE,IAAI,CAAC,aAAa;SAChC,CAAC;QAEF,QAAQ,MAAM,CAAC,IAAI,EAAE;YACjB,KAAK,QAAQ;gBACT,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,MAAM,CAAC;gBAClC,MAAM;YACV,KAAK,SAAS;gBACV,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,OAAO,CAAC;gBACnC,MAAM;YACV,KAAK,QAAQ;gBACT,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,MAAM,CAAC;gBAClC,MAAM;YACV,KAAK,MAAM;gBACP,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,KAAK,CAAC;gBACjC,MAAM;YACV;gBACI,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,GAAG,CAAC;gBAC/B,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;gBACxB,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;oBACjB,IAAM,KAAK,GAAG,GAAG,CAAC,wBAAwB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC5D,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC,4BAA4B,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;iBAC7E;SACR;QAED,QAAQ,MAAM,CAAC,SAAS,EAAE;YACtB,KAAK,GAAG,CAAC,WAAW,CAAC,IAAI;gBACrB,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,IAAI,CAAC;gBAChC,MAAM;YACV,KAAK,GAAG,CAAC,WAAW,CAAC,SAAS;gBAC1B,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,SAAS,CAAC;gBACrC,MAAM;SACb;QAED,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;;IAjEM,wBAAO,GAAa;QACvB,KAAK,EAAE,SAAS,EAAE,MAAM;QACxB,OAAO,EAAE,aAAa,EAAE,gBAAgB,EAAE,SAAS;QACnD,WAAW,EAAE,eAAe,EAAE,gBAAgB;KACjD,CAAC;IAVO,gBAAgB;QAD5B,qBAAS,CAAC,EAAC,IAAI,EAAE,oBAAoB,EAAC,CAAC;OAC3B,gBAAgB,CAwE5B;IAAD,uBAAC;CAAA,AAxED,CAAsC,0BAAgB,GAwErD;AAxEY,4CAAgB","sourcesContent":["import * as ts from 'typescript';\r\nimport * as _ts from '../../../ts-internal';\r\n\r\nimport { Component } from '../../component';\r\nimport { OptionsComponent } from '../options';\r\nimport { DeclarationOption, ParameterScope, ParameterType, ParameterHint } from '../declaration';\r\n\r\n@Component({name: 'options:typescript'})\r\nexport class TypeScriptSource extends OptionsComponent {\r\n    private declarations: DeclarationOption[];\r\n\r\n    /**\r\n     * A list of all TypeScript parameters that should be ignored.\r\n     */\r\n    static IGNORED: string[] = [\r\n        'out', 'version', 'help',\r\n        'watch', 'declaration', 'declarationDir', 'mapRoot',\r\n        'sourceMap', 'inlineSources', 'removeComments'\r\n    ];\r\n\r\n    initialize() {\r\n        const ignored = TypeScriptSource.IGNORED;\r\n        this.declarations = [];\r\n\r\n        for (let declaration of _ts.optionDeclarations) {\r\n            if (ignored.indexOf(declaration.name) === -1) {\r\n                this.addTSOption(declaration);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return all option declarations emitted by this component.\r\n     */\r\n    getOptionDeclarations(): DeclarationOption[] {\r\n        return this.declarations;\r\n    }\r\n\r\n    private addTSOption(option: _ts.CommandLineOption) {\r\n        const param: DeclarationOption = {\r\n            name:      option.name,\r\n            short:     option.shortName,\r\n            help:      option.description ? option.description.key : null,\r\n            scope:     ParameterScope.TypeScript,\r\n            component: this.componentName\r\n        };\r\n\r\n        switch (option.type) {\r\n            case 'number':\r\n                param.type = ParameterType.Number;\r\n                break;\r\n            case 'boolean':\r\n                param.type = ParameterType.Boolean;\r\n                break;\r\n            case 'string':\r\n                param.type = ParameterType.String;\r\n                break;\r\n            case 'list':\r\n                param.type = ParameterType.Array;\r\n                break;\r\n            default:\r\n                param.type = ParameterType.Map;\r\n                param.map = option.type;\r\n                if (option['error']) {\r\n                    const error = _ts.createCompilerDiagnostic(option['error']);\r\n                    param.mapError = ts.flattenDiagnosticMessageText(error.messageText, ', ');\r\n                }\r\n        }\r\n\r\n        switch (option.paramType) {\r\n            case _ts.Diagnostics.FILE:\r\n                param.hint = ParameterHint.File;\r\n                break;\r\n            case _ts.Diagnostics.DIRECTORY:\r\n                param.hint = ParameterHint.Directory;\r\n                break;\r\n        }\r\n\r\n        this.declarations.push(param);\r\n    }\r\n}\r\n"]}