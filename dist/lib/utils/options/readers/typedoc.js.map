{"version":3,"file":"typedoc.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/readers/typedoc.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\r\nimport * as FS from 'fs';\r\nimport * as _ from 'lodash';\r\n\r\nimport { Component, Option } from '../../component';\r\nimport { OptionsComponent, DiscoverEvent } from '../options';\r\nimport { ParameterType, ParameterHint } from '../declaration';\r\n\r\n@Component({name: 'options:typedoc'})\r\nexport class TypedocReader extends OptionsComponent {\r\n    @Option({\r\n        name: TypedocReader.OPTIONS_KEY,\r\n        help: 'Specify a js option file that should be loaded. If not specified TypeDoc will look for \\'typedoc.js\\' in the current directory.',\r\n        type: ParameterType.String,\r\n        hint: ParameterHint.File\r\n    })\r\n    options: string;\r\n\r\n    /**\r\n     * The name of the parameter that specifies the options file.\r\n     */\r\n    private static OPTIONS_KEY = 'options';\r\n\r\n    initialize() {\r\n        this.listenTo(this.owner, DiscoverEvent.DISCOVER, this.onDiscover, -150);\r\n    }\r\n\r\n    onDiscover(event: DiscoverEvent) {\r\n        if (TypedocReader.OPTIONS_KEY in event.data) {\r\n            this.load(event, Path.resolve(event.data[TypedocReader.OPTIONS_KEY]));\r\n        } else if (this.application.isCLI) {\r\n            const file = Path.resolve('typedoc.js');\r\n            if (FS.existsSync(file)) {\r\n                this.load(event, file);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load the specified option file.\r\n     *\r\n     * @param optionFile  The absolute path and file name of the option file.\r\n     * @param ignoreUnknownArgs  Should unknown arguments be ignored? If so the parser\r\n     *   will simply skip all unknown arguments.\r\n     * @returns TRUE on success, otherwise FALSE.\r\n     */\r\n    load(event: DiscoverEvent, optionFile: string) {\r\n        if (!FS.existsSync(optionFile)) {\r\n            event.addError('The option file %s does not exist.', optionFile);\r\n            return;\r\n        }\r\n\r\n        let data = require(optionFile);\r\n        if (typeof data === 'function') {\r\n            data = data(this.application);\r\n        }\r\n\r\n        if (!(typeof data === 'object')) {\r\n            event.addError('The option file %s could not be read, it must either export a function or an object.', optionFile);\r\n        } else {\r\n            if (data.src) {\r\n                if (typeof data.src === 'string') {\r\n                    event.inputFiles = [data.src];\r\n                } else if (_.isArray(data.src)) {\r\n                    event.inputFiles = data.src;\r\n                } else {\r\n                    event.addError('The property \\'src\\' of the option file %s must be a string or an array.', optionFile);\r\n                }\r\n\r\n                delete data.src;\r\n            }\r\n\r\n            _.defaultsDeep(event.data, data);\r\n        }\r\n    }\r\n}\r\n"]}