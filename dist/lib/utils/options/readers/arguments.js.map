{"version":3,"file":"arguments.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/readers/arguments.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\nimport * as _ts from '../../../ts-internal';\r\n\r\nimport { Component } from '../../component';\r\nimport { DiscoverEvent, OptionsComponent } from '../options';\r\nimport { ParameterType } from '../declaration';\r\n\r\n@Component({name: 'options:arguments'})\r\nexport class ArgumentsReader extends OptionsComponent {\r\n    initialize() {\r\n        this.listenTo(this.owner, DiscoverEvent.DISCOVER, this.onDiscover, -200);\r\n    }\r\n\r\n    onDiscover(event: DiscoverEvent) {\r\n        if (this.application.isCLI) {\r\n            this.parseArguments(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Read and store the given list of arguments.\r\n     *\r\n     * @param args  The list of arguments that should be parsed. When omitted the\r\n     *   current command line arguments will be used.\r\n     * @param ignoreUnknownArgs  Should unknown arguments be ignored? If so the parser\r\n     *   will simply skip all unknown arguments.\r\n     * @returns TRUE on success, otherwise FALSE.\r\n     */\r\n    private parseArguments(event: DiscoverEvent, args?: string[]) {\r\n        let index = 0;\r\n        const owner = this.owner;\r\n        args = args || process.argv.slice(2);\r\n\r\n        function readArgument(arg: string) {\r\n            const declaration = owner.getDeclaration(arg);\r\n            if (!declaration) {\r\n                event.addError('Unknown option: %s', arg);\r\n            } else if (declaration.type !== ParameterType.Boolean) {\r\n                if (!args[index]) {\r\n                    event.addError('Option \"%s\" expects an argument', declaration.name);\r\n                } else {\r\n                    event.data[declaration.name] = args[index++];\r\n                }\r\n            } else {\r\n                event.data[declaration.name] = true;\r\n            }\r\n        }\r\n\r\n        const files = [];\r\n        while (index < args.length) {\r\n            const arg = args[index++];\r\n\r\n            if (arg.charCodeAt(0) === _ts.CharacterCodes.at) {\r\n                this.parseResponseFile(event, arg.slice(1));\r\n            } else if (arg.charCodeAt(0) === _ts.CharacterCodes.minus) {\r\n                readArgument(arg.slice(arg.charCodeAt(1) === _ts.CharacterCodes.minus ? 2 : 1).toLowerCase());\r\n            } else {\r\n                files.push(arg);\r\n            }\r\n        }\r\n        if (files) {\r\n            event.inputFiles = files;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Read the arguments stored in the given file.\r\n     *\r\n     * @param filename  The path and filename that should be parsed.\r\n     * @param ignoreUnknownArgs  Should unknown arguments be ignored?\r\n     * @returns TRUE on success, otherwise FALSE.\r\n     */\r\n    private parseResponseFile(event: DiscoverEvent, filename: string) {\r\n        const text = ts.sys.readFile(filename);\r\n        if (!text) {\r\n            event.addError('File not found: \"%s\"', filename);\r\n            return;\r\n        }\r\n\r\n        const args: string[] = [];\r\n        let pos = 0;\r\n        while (true) {\r\n            while (pos < text.length && text.charCodeAt(pos) <= _ts.CharacterCodes.space) {\r\n                pos++;\r\n            }\r\n            if (pos >= text.length) {\r\n                break;\r\n            }\r\n\r\n            const start = pos;\r\n            if (text.charCodeAt(start) === _ts.CharacterCodes.doubleQuote) {\r\n                pos++;\r\n                while (pos < text.length && text.charCodeAt(pos) !== _ts.CharacterCodes.doubleQuote) {\r\n                    pos++;\r\n                }\r\n                if (pos < text.length) {\r\n                    args.push(text.substring(start + 1, pos));\r\n                    pos++;\r\n                } else {\r\n                    event.addError('Unterminated quoted string in response file \"%s\"', filename);\r\n                    return;\r\n                }\r\n            } else {\r\n                while (text.charCodeAt(pos) > _ts.CharacterCodes.space) {\r\n                    pos++;\r\n                }\r\n                args.push(text.substring(start, pos));\r\n            }\r\n        }\r\n\r\n        this.parseArguments(event, args);\r\n    }\r\n}\r\n"]}