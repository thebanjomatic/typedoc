{"version":3,"file":"options.js","sourceRoot":"","sources":["../../../../src/lib/utils/options/options.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\r\nimport * as Util from 'util';\r\nimport * as ts from 'typescript';\r\n\r\nimport { Event } from '../events';\r\nimport { Component, AbstractComponent, ChildableComponent } from '../component';\r\nimport { Application } from '../../application';\r\nimport { OptionDeclaration, DeclarationOption, ParameterScope } from './declaration';\r\n\r\nexport class OptionsComponent extends AbstractComponent<Options> { }\r\n\r\nexport enum OptionsReadMode {\r\n    Prefetch,\r\n    Fetch\r\n}\r\n\r\nexport interface OptionsReadResult {\r\n    hasErrors: boolean;\r\n    inputFiles: string[];\r\n}\r\n\r\nexport class DiscoverEvent extends Event {\r\n    data: any;\r\n\r\n    mode: OptionsReadMode;\r\n\r\n    inputFiles: string[] = [];\r\n\r\n    errors: string[] = [];\r\n\r\n    static DISCOVER = 'optionsDiscover';\r\n\r\n    /**\r\n     * Add an input/source file.\r\n     *\r\n     * The input files will be used as source files for the compiler. All command line\r\n     * arguments without parameter will be interpreted as being input files.\r\n     *\r\n     * @param fileName The path and filename of the input file.\r\n     */\r\n    addInputFile(fileName: string) {\r\n        this.inputFiles.push(fileName);\r\n    }\r\n\r\n    addError(message: string, ...args: string[]) {\r\n        this.errors.push(Util.format.apply(this, arguments));\r\n    }\r\n}\r\n\r\n@Component({name: 'options', internal: true, childClass: OptionsComponent})\r\nexport class Options extends ChildableComponent<Application, OptionsComponent> {\r\n    private declarations: {[name: string]: OptionDeclaration};\r\n\r\n    private values: {[name: string]: any};\r\n\r\n    private compilerOptions: ts.CompilerOptions;\r\n\r\n    initialize() {\r\n        this.declarations = {};\r\n        this.values = {};\r\n        this.compilerOptions = {\r\n            target: ts.ScriptTarget.ES3,\r\n            module: ts.ModuleKind.None\r\n        };\r\n    }\r\n\r\n    read(data: any = {}, mode: OptionsReadMode = OptionsReadMode.Fetch): OptionsReadResult {\r\n        const event  = new DiscoverEvent(DiscoverEvent.DISCOVER);\r\n        event.data = data;\r\n        event.mode = mode;\r\n\r\n        this.trigger(event);\r\n        this.setValues(event.data, '', event.addError.bind(event));\r\n\r\n        if (mode === OptionsReadMode.Fetch) {\r\n            const logger = this.application.logger;\r\n            for (let error of event.errors) {\r\n                logger.error(error);\r\n            }\r\n        }\r\n\r\n        return {\r\n            hasErrors: event.errors.length > 0,\r\n            inputFiles: event.inputFiles\r\n        };\r\n    }\r\n\r\n    getValue(name: string): any {\r\n        const declaration = this.getDeclaration(name);\r\n        if (!declaration) {\r\n            throw new Error(Util.format('Unknown option `%s`.', name));\r\n        }\r\n\r\n        if (declaration.scope === ParameterScope.TypeScript) {\r\n            throw new Error('TypeScript options cannot be fetched using `getValue`, use `getCompilerOptions` instead.');\r\n        }\r\n\r\n        if (name in this.values) {\r\n            return this.values[name];\r\n        } else {\r\n            return declaration.defaultValue;\r\n        }\r\n    }\r\n\r\n    getRawValues(): any {\r\n        return _.clone(this.values);\r\n    }\r\n\r\n    getDeclaration(name: string): OptionDeclaration {\r\n        name = name.toLowerCase();\r\n\r\n        if (name in this.declarations) {\r\n            return this.declarations[name];\r\n        }\r\n    }\r\n\r\n    getDeclarationsByScope(scope: ParameterScope): OptionDeclaration[] {\r\n        const result: OptionDeclaration[] = [];\r\n        for (let name in this.declarations) {\r\n            const declaration = this.declarations[name];\r\n            if (declaration.scope === scope) {\r\n                result.push(declaration);\r\n            }\r\n        }\r\n\r\n        return _.uniq(result);\r\n    }\r\n\r\n    getCompilerOptions(): ts.CompilerOptions {\r\n        return this.compilerOptions;\r\n    }\r\n\r\n    setValue(name: string|OptionDeclaration, value: any, errorCallback?: Function) {\r\n        const declaration = name instanceof OptionDeclaration ? name : this.getDeclaration(<string> name);\r\n        if (!declaration) {\r\n            return;\r\n        }\r\n\r\n        const key = declaration.name;\r\n        if (declaration.scope === ParameterScope.TypeScript) {\r\n            this.compilerOptions[key] = declaration.convert(value, errorCallback);\r\n        } else {\r\n            this.values[key] = declaration.convert(value, errorCallback);\r\n        }\r\n    }\r\n\r\n    setValues(obj: Object, prefix: string = '', errorCallback?: Function) {\r\n        for (let key in obj) {\r\n            const value = obj[key];\r\n            const declaration = this.getDeclaration(key);\r\n            const shouldValueBeAnObject = declaration && declaration['map'] === 'object';\r\n            if (!Array.isArray(value) && typeof value === 'object' && !shouldValueBeAnObject) {\r\n                this.setValues(value, prefix + key + '.', errorCallback);\r\n            } else {\r\n                this.setValue(prefix + key, value, errorCallback);\r\n            }\r\n        }\r\n    }\r\n\r\n    addDeclaration(declaration: OptionDeclaration|DeclarationOption) {\r\n        let decl: OptionDeclaration;\r\n        if (!(declaration instanceof OptionDeclaration)) {\r\n            decl = new OptionDeclaration(<DeclarationOption> declaration);\r\n        } else {\r\n            decl = <OptionDeclaration> declaration;\r\n        }\r\n\r\n        for (let name of decl.getNames()) {\r\n            if (name in this.declarations) {\r\n                this.application.logger.error('The option \"%s\" has already been registered by the \"%s\" component.', name, this.declarations[name].component);\r\n            } else {\r\n                this.declarations[name] = decl;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDeclarations(declarations: (OptionDeclaration|DeclarationOption)[]) {\r\n        for (let declaration of declarations) {\r\n            this.addDeclaration(declaration);\r\n        }\r\n    }\r\n\r\n    removeDeclaration(declaration: OptionDeclaration) {\r\n        const names = _.keys(this.declarations);\r\n        let name: string;\r\n        for (name in names) {\r\n            if (this.declarations[name] === declaration) {\r\n                delete this.declarations[name];\r\n            }\r\n        }\r\n\r\n        name = declaration.name;\r\n        if (name in this.values) {\r\n            delete this.values[name];\r\n        }\r\n    }\r\n\r\n    removeDeclarationByName(name: string) {\r\n        const declaration = this.getDeclaration(name);\r\n        if (declaration) {\r\n            this.removeDeclaration(declaration);\r\n        }\r\n    }\r\n}\r\n"]}