{"version":3,"file":"plugins.js","sourceRoot":"","sources":["../../../src/lib/utils/plugins.ts"],"names":[],"mappings":"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","sourcesContent":["import * as FS from 'fs';\r\nimport * as Path from 'path';\r\nimport * as Util from 'util';\r\n\r\nimport { Application } from '../application';\r\nimport { AbstractComponent, Component, Option } from './component';\r\nimport { ParameterType } from './options/declaration';\r\n\r\n@Component({name: 'plugin-host', internal: true})\r\nexport class PluginHost extends AbstractComponent<Application> {\r\n    @Option({\r\n        name: 'plugin',\r\n        help: 'Specify the npm plugins that should be loaded. Omit to load all installed plugins, set to \\'none\\' to load no plugins.',\r\n        type: ParameterType.String,\r\n        isArray: true\r\n    })\r\n    plugins: string[];\r\n\r\n    /**\r\n     * Load the given list of npm plugins.\r\n     *\r\n     * @param plugins  A list of npm modules that should be loaded as plugins. When not specified\r\n     *   this function will invoke [[discoverNpmPlugins]] to find a list of all installed plugins.\r\n     * @returns TRUE on success, otherwise FALSE.\r\n     */\r\n    load(): boolean {\r\n        const logger = this.application.logger;\r\n        const plugins = this.plugins || this.discoverNpmPlugins();\r\n\r\n        let i: number, c: number = plugins.length;\r\n        for (i = 0; i < c; i++) {\r\n            const plugin = plugins[i];\r\n            if (typeof plugin !== 'string') {\r\n                logger.error('Unknown plugin %s', plugin);\r\n                return false;\r\n            } else if (plugin.toLowerCase() === 'none') {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < c; i++) {\r\n            const plugin = plugins[i];\r\n            try {\r\n                const instance = require(plugin);\r\n                const initFunction = typeof instance.load === 'function'\r\n                  ? instance.load\r\n                  : instance                // support legacy plugins\r\n                ;\r\n                if (typeof initFunction === 'function') {\r\n                    instance(this);\r\n                    logger.write('Loaded plugin %s', plugin);\r\n                } else {\r\n                    logger.error('Invalid structure in plugin %s, no function found.', plugin);\r\n                }\r\n            } catch (error) {\r\n                logger.error('The plugin %s could not be loaded.', plugin);\r\n                logger.writeln(error.stack);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Discover all installed TypeDoc plugins.\r\n     *\r\n     * @returns A list of all npm module names that are qualified TypeDoc plugins.\r\n     */\r\n    private discoverNpmPlugins(): string[] {\r\n        const result: string[] = [];\r\n        const logger = this.application.logger;\r\n        discover();\r\n        return result;\r\n\r\n        /**\r\n         * Find all parent folders containing a `node_modules` subdirectory.\r\n         */\r\n        function discover() {\r\n            let path = process.cwd(), previous: string;\r\n            do {\r\n                const modules = Path.join(path, 'node_modules');\r\n                if (FS.existsSync(modules) && FS.lstatSync(modules).isDirectory()) {\r\n                    discoverModules(modules);\r\n                }\r\n\r\n                previous = path;\r\n                path = Path.resolve(Path.join(previous, '..'));\r\n            } while (previous !== path);\r\n        }\r\n\r\n        /**\r\n         * Scan the given `node_modules` directory for TypeDoc plugins.\r\n         */\r\n        function discoverModules(basePath: string) {\r\n            FS.readdirSync(basePath).forEach((name) => {\r\n                const dir = Path.join(basePath, name);\r\n                const infoFile = Path.join(dir, 'package.json');\r\n                if (!FS.existsSync(infoFile)) {\r\n                    return;\r\n                }\r\n\r\n                const info = loadPackageInfo(infoFile);\r\n                if (isPlugin(info)) {\r\n                    result.push(name);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Load and parse the given `package.json`.\r\n         */\r\n        function loadPackageInfo(fileName: string): any {\r\n            try {\r\n                return JSON.parse(FS.readFileSync(fileName, {encoding: 'utf-8'}));\r\n            } catch (error) {\r\n                logger.error('Could not parse %s', fileName);\r\n                return {};\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Test whether the given package info describes a TypeDoc plugin.\r\n         */\r\n        function isPlugin(info: any): boolean {\r\n            const keywords: string[] = info.keywords;\r\n            if (!keywords || !Util.isArray(keywords)) {\r\n                return false;\r\n            }\r\n\r\n            for (let i = 0, c = keywords.length; i < c; i++) {\r\n                const keyword = keywords[i];\r\n                if (typeof keyword === 'string' && keyword.toLowerCase() === 'typedocplugin') {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"]}